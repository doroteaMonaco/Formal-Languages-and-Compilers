// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\3\0\1\7\1\0\1\10\1\11\2\12\1\13"+
    "\1\14\1\0\1\15\1\16\1\17\1\20\1\21\2\22"+
    "\4\23\1\0\1\24\1\0\1\25\1\0\1\26\1\0"+
    "\1\27\1\30\1\31\1\32\1\33\1\34\2\0\1\35"+
    "\1\36\1\0\1\37\1\0\1\40\1\41\1\42\1\0"+
    "\1\43\1\44\1\45\1\46\2\0\1\47\1\50\1\51"+
    "\1\52\1\0\1\53\3\0\1\54\1\55\1\56\1\57"+
    "\1\60\1\57\1\61\4\62\1\63\1\64\1\65\1\66"+
    "\1\67\1\62\1\70\1\71\1\72\1\73\1\74\2\62"+
    "\1\75\1\62\1\0\1\76\10\0\1\3\u01a2\0\2\3"+
    "\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\11\12\1\1\12\1\13\1\0\1\14"+
    "\3\0\1\15\1\0\1\16\1\17\1\0\1\20\5\0"+
    "\1\21\21\0\1\22\6\0\1\23\6\0\1\24\7\0"+
    "\1\25\12\0\1\26\261\0\1\27\37\0\1\30\51\0"+
    "\1\31\140\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\77\0\77\0\176\0\77\0\275\0\77\0\77"+
    "\0\77\0\77\0\77\0\374\0\u013b\0\u017a\0\u01b9\0\u01f8"+
    "\0\u0237\0\u0276\0\u02b5\0\u02f4\0\u0333\0\u0372\0\u03b1\0\77"+
    "\0\275\0\77\0\u03f0\0\u042f\0\u046e\0\u04ad\0\u04ec\0\77"+
    "\0\77\0\u052b\0\77\0\u056a\0\u05a9\0\u05e8\0\u0627\0\u0666"+
    "\0\77\0\u06a5\0\u06e4\0\u0723\0\u0762\0\u07a1\0\u07e0\0\u081f"+
    "\0\u085e\0\u089d\0\u08dc\0\u091b\0\u095a\0\u0999\0\u09d8\0\u0a17"+
    "\0\u0a56\0\u0a95\0\77\0\u0ad4\0\u0b13\0\u0b52\0\u0b91\0\u0bd0"+
    "\0\u0c0f\0\77\0\u0c4e\0\u0c8d\0\u0ccc\0\u0d0b\0\u0d4a\0\u0d89"+
    "\0\77\0\u0dc8\0\u0e07\0\u0e46\0\u0e85\0\u0ec4\0\u0f03\0\u0f42"+
    "\0\77\0\u0f81\0\u0fc0\0\u0fff\0\u103e\0\u107d\0\u10bc\0\u10fb"+
    "\0\u113a\0\u1179\0\u11b8\0\77\0\u11f7\0\u1236\0\u1275\0\u12b4"+
    "\0\u12f3\0\u1332\0\u1371\0\u13b0\0\u13ef\0\u142e\0\u146d\0\u14ac"+
    "\0\u14eb\0\u152a\0\u1569\0\u15a8\0\u15e7\0\u1626\0\u1665\0\u16a4"+
    "\0\u16e3\0\u1722\0\u1761\0\u17a0\0\u17df\0\u181e\0\u185d\0\u189c"+
    "\0\u18db\0\u191a\0\u1959\0\u1998\0\u19d7\0\u1a16\0\u1a55\0\u1a94"+
    "\0\u1ad3\0\u1b12\0\u1b51\0\u1b90\0\u1bcf\0\u1c0e\0\u1c4d\0\u1c8c"+
    "\0\u1ccb\0\u1d0a\0\u1d49\0\u1d88\0\u1dc7\0\u1e06\0\u1e45\0\u1e84"+
    "\0\u1ec3\0\u1f02\0\u1f41\0\u1f80\0\u1fbf\0\u1ffe\0\u203d\0\u207c"+
    "\0\u20bb\0\u20fa\0\u2139\0\u2178\0\u21b7\0\u21f6\0\u2235\0\u2274"+
    "\0\u22b3\0\u22f2\0\u2331\0\u2370\0\u23af\0\u23ee\0\u242d\0\u246c"+
    "\0\u24ab\0\u24ea\0\u2529\0\u2568\0\u25a7\0\u25e6\0\u2625\0\u2664"+
    "\0\u26a3\0\u26e2\0\u2721\0\u2760\0\u279f\0\u27de\0\u281d\0\u285c"+
    "\0\u289b\0\u28da\0\u2919\0\u2958\0\u2997\0\u29d6\0\u2a15\0\u2a54"+
    "\0\u2a93\0\u2ad2\0\u2b11\0\u2b50\0\u2b8f\0\u2bce\0\u2c0d\0\u2c4c"+
    "\0\u2c8b\0\u2cca\0\u2d09\0\u2d48\0\u2d87\0\u2dc6\0\u2e05\0\u2e44"+
    "\0\u2e83\0\u2ec2\0\u2f01\0\u2f40\0\u2f7f\0\u2fbe\0\u2ffd\0\u303c"+
    "\0\u307b\0\u30ba\0\u30f9\0\u3138\0\u3177\0\u31b6\0\u31f5\0\u3234"+
    "\0\u3273\0\u32b2\0\u32f1\0\u3330\0\u336f\0\u33ae\0\u33ed\0\u342c"+
    "\0\u346b\0\u34aa\0\u34e9\0\u3528\0\u3567\0\u35a6\0\u35e5\0\u3624"+
    "\0\u3663\0\u36a2\0\u36e1\0\u3720\0\u375f\0\u379e\0\u37dd\0\u381c"+
    "\0\u385b\0\u389a\0\u38d9\0\u3918\0\u3957\0\u3996\0\u39d5\0\u3a14"+
    "\0\u3a53\0\u3a92\0\u3ad1\0\u3b10\0\u3b4f\0\u3b8e\0\u3bcd\0\u3c0c"+
    "\0\u3c4b\0\u3c8a\0\u3cc9\0\u3d08\0\u3d47\0\77\0\u3d86\0\u3dc5"+
    "\0\u3e04\0\u3e43\0\u3e82\0\u3ec1\0\u3f00\0\u3f3f\0\u3f7e\0\u3fbd"+
    "\0\u3ffc\0\u403b\0\u407a\0\u40b9\0\u40f8\0\u4137\0\u4176\0\u41b5"+
    "\0\u41f4\0\u4233\0\u4272\0\u42b1\0\u42f0\0\u432f\0\u436e\0\u43ad"+
    "\0\u43ec\0\u442b\0\u446a\0\u44a9\0\u44e8\0\77\0\u4527\0\u4566"+
    "\0\u45a5\0\u45e4\0\u4623\0\u4662\0\u46a1\0\u46e0\0\u471f\0\u475e"+
    "\0\u479d\0\u47dc\0\u481b\0\u485a\0\u4899\0\u48d8\0\u4917\0\u4956"+
    "\0\u4995\0\u49d4\0\u4a13\0\u4a52\0\u4a91\0\u4ad0\0\u4b0f\0\u4b4e"+
    "\0\u4b8d\0\u4bcc\0\u4c0b\0\u4c4a\0\u4c89\0\u4cc8\0\u4d07\0\u4d46"+
    "\0\u4d85\0\u4dc4\0\u4e03\0\u4e42\0\u4e81\0\u4ec0\0\u4eff\0\77"+
    "\0\u4f3e\0\u4f7d\0\u4fbc\0\u4ffb\0\u503a\0\u5079\0\u50b8\0\u50f7"+
    "\0\u5136\0\u5175\0\u51b4\0\u51f3\0\u5232\0\u5271\0\u52b0\0\u52ef"+
    "\0\u532e\0\u536d\0\u53ac\0\u53eb\0\u542a\0\u5469\0\u54a8\0\u54e7"+
    "\0\u5526\0\u5565\0\u55a4\0\u55e3\0\u5622\0\u5661\0\u56a0\0\u56df"+
    "\0\u571e\0\u575d\0\u579c\0\u57db\0\u581a\0\u5859\0\u5898\0\u58d7"+
    "\0\u5916\0\u5955\0\u5994\0\u59d3\0\u5a12\0\u5a51\0\u5a90\0\u5acf"+
    "\0\u5b0e\0\u5b4d\0\u5b8c\0\u5bcb\0\u5c0a\0\u5c49\0\u5c88\0\u5cc7"+
    "\0\u5d06\0\u5d45\0\u5d84\0\u5dc3\0\u5e02\0\u5e41\0\u5e80\0\u5ebf"+
    "\0\u5efe\0\u5f3d\0\u5f7c\0\u5fbb\0\u5ffa\0\u6039\0\u6078\0\u60b7"+
    "\0\u60f6\0\u6135\0\u6174\0\u61b3\0\u61f2\0\u6231\0\u6270\0\u62af"+
    "\0\u62ee\0\u632d\0\u636c\0\u63ab\0\u63ea\0\u6429\0\u6468\0\u64a7"+
    "\0\u64e6\0\u6525\0\u6564\0\u65a3\0\u65e2\0\u6621\0\u6660\0\u669f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\2\1\12\10\2\1\13\1\14\1\2\1\15"+
    "\2\2\1\16\1\2\1\17\1\20\2\2\1\21\1\22"+
    "\1\23\1\24\1\2\1\25\4\2\1\26\1\2\22\27"+
    "\1\30\101\0\1\3\74\0\6\31\1\32\70\31\25\0"+
    "\1\33\111\0\1\34\52\0\1\35\24\0\1\36\64\0"+
    "\1\37\5\0\1\40\75\0\1\41\56\0\1\42\125\0"+
    "\1\43\76\0\1\44\47\0\1\45\125\0\1\46\105\0"+
    "\1\47\100\0\22\27\26\0\1\50\103\0\1\51\62\0"+
    "\1\52\1\53\1\54\1\55\115\0\1\56\75\0\1\57"+
    "\56\0\1\60\1\61\3\62\3\0\1\62\1\63\4\64"+
    "\17\0\1\62\1\63\3\64\53\0\1\65\110\0\1\66"+
    "\1\67\1\70\73\0\1\71\44\0\1\72\107\0\1\73"+
    "\70\0\3\74\2\75\71\0\1\76\4\75\1\77\71\0"+
    "\1\100\5\77\71\0\1\77\1\101\112\0\1\102\107\0"+
    "\1\103\50\0\6\64\3\0\6\64\17\0\5\64\34\0"+
    "\6\64\3\0\6\104\17\0\5\104\34\0\6\104\3\0"+
    "\6\104\17\0\5\104\34\0\6\104\3\0\2\104\1\105"+
    "\3\106\17\0\2\104\1\105\2\106\34\0\6\106\3\0"+
    "\6\106\17\0\5\106\56\0\1\107\105\0\1\110\77\0"+
    "\1\110\77\0\1\110\60\0\1\111\57\0\1\112\77\0"+
    "\1\113\76\0\1\114\76\0\1\115\76\0\1\116\76\0"+
    "\1\117\76\0\1\120\114\0\1\121\55\0\1\122\2\0"+
    "\1\122\1\106\1\123\1\124\3\125\3\0\2\125\4\126"+
    "\17\0\2\125\3\126\30\0\1\122\2\0\1\122\1\106"+
    "\1\123\1\124\1\125\2\127\3\0\1\127\1\130\4\131"+
    "\17\0\1\127\1\130\3\131\30\0\1\122\2\0\1\122"+
    "\1\0\1\132\1\133\3\127\3\0\1\127\1\130\4\131"+
    "\17\0\1\127\1\130\3\131\63\0\1\134\100\0\1\135"+
    "\1\136\1\137\25\0\14\112\1\140\62\112\27\0\1\141"+
    "\2\0\1\142\3\0\1\143\1\0\1\144\1\145\2\0"+
    "\1\146\61\0\1\141\2\0\1\142\3\0\1\147\1\0"+
    "\1\144\1\145\2\0\1\146\61\0\1\141\6\0\1\147"+
    "\67\0\1\141\2\0\1\142\3\0\1\150\1\0\1\144"+
    "\1\145\2\0\1\146\61\0\1\141\6\0\1\150\67\0"+
    "\1\141\2\0\1\142\3\0\1\150\2\0\1\145\54\0"+
    "\1\132\1\133\3\127\3\0\1\127\1\130\4\131\17\0"+
    "\1\127\1\130\3\131\30\0\1\122\2\0\1\122\1\131"+
    "\5\127\3\0\1\127\1\130\4\131\17\0\1\127\1\130"+
    "\3\131\30\0\1\122\2\0\1\122\1\131\5\127\3\0"+
    "\1\151\1\152\4\153\17\0\1\151\1\152\3\153\30\0"+
    "\1\122\2\0\1\122\1\153\5\151\3\0\1\151\1\152"+
    "\4\153\17\0\1\151\1\152\3\153\30\0\1\122\2\0"+
    "\1\122\1\154\1\155\1\156\3\151\3\0\1\151\1\152"+
    "\4\153\17\0\1\151\1\152\3\153\34\0\6\153\3\0"+
    "\6\153\17\0\5\153\34\0\6\153\3\0\2\153\1\157"+
    "\3\154\17\0\2\153\1\157\2\154\34\0\6\154\3\0"+
    "\6\154\17\0\5\154\34\0\6\131\3\0\6\131\17\0"+
    "\5\131\34\0\6\131\3\0\6\153\17\0\5\153\65\0"+
    "\1\160\77\0\1\160\77\0\1\160\25\0\14\112\1\161"+
    "\62\112\73\0\1\162\63\0\1\163\72\0\1\164\110\0"+
    "\1\165\66\0\1\166\100\0\1\167\72\0\1\164\16\0"+
    "\1\170\76\0\1\170\15\0\1\171\2\0\1\171\1\153"+
    "\1\172\1\173\3\174\3\0\2\174\4\175\17\0\2\174"+
    "\3\175\30\0\1\171\2\0\1\171\1\153\1\172\1\173"+
    "\3\174\3\0\2\174\1\176\3\177\17\0\2\174\1\176"+
    "\2\177\30\0\1\171\2\0\1\171\1\154\1\200\1\201"+
    "\3\202\3\0\2\202\4\177\17\0\2\202\3\177\30\0"+
    "\1\171\2\0\1\171\1\0\1\203\1\204\3\205\3\0"+
    "\1\205\1\206\4\207\17\0\1\205\1\206\3\207\30\0"+
    "\1\171\2\0\1\171\1\131\1\210\1\211\3\212\3\0"+
    "\1\212\1\213\4\214\17\0\1\212\1\213\3\214\30\0"+
    "\1\171\2\0\1\171\1\131\1\210\1\211\3\212\3\0"+
    "\2\174\4\175\17\0\2\174\3\175\30\0\1\171\2\0"+
    "\1\171\1\154\1\200\1\201\1\202\2\205\3\0\1\205"+
    "\1\206\4\207\17\0\1\205\1\206\3\207\65\0\1\215"+
    "\1\216\1\217\25\0\14\112\1\161\36\112\1\220\23\112"+
    "\61\0\1\221\73\0\1\222\105\0\1\223\105\0\1\222"+
    "\74\0\1\224\73\0\1\225\72\0\1\226\32\0\1\203"+
    "\1\204\3\205\3\0\1\205\1\206\4\207\17\0\1\205"+
    "\1\206\3\207\30\0\1\171\2\0\1\171\1\177\5\202"+
    "\3\0\2\202\4\177\17\0\2\202\3\177\30\0\1\171"+
    "\2\0\1\171\1\177\5\202\3\0\2\227\4\230\17\0"+
    "\2\227\3\230\30\0\1\171\2\0\1\171\1\230\5\227"+
    "\3\0\2\227\4\230\17\0\2\227\3\230\30\0\1\171"+
    "\2\0\1\171\1\231\1\232\1\233\3\227\3\0\2\227"+
    "\4\230\17\0\2\227\3\230\30\0\1\171\2\0\1\171"+
    "\1\231\1\232\1\233\1\227\2\234\3\0\1\234\1\235"+
    "\4\236\17\0\1\234\1\235\3\236\30\0\1\171\2\0"+
    "\1\171\1\237\1\240\1\241\3\234\3\0\1\234\1\235"+
    "\4\236\17\0\1\234\1\235\3\236\30\0\1\171\2\0"+
    "\1\171\1\207\5\205\3\0\1\205\1\206\4\207\17\0"+
    "\1\205\1\206\3\207\30\0\1\171\2\0\1\171\1\207"+
    "\5\205\3\0\1\234\1\235\4\236\17\0\1\234\1\235"+
    "\3\236\30\0\1\171\2\0\1\171\1\236\5\234\3\0"+
    "\1\234\1\235\4\236\17\0\1\234\1\235\3\236\34\0"+
    "\6\207\3\0\6\207\17\0\5\207\34\0\6\207\3\0"+
    "\6\236\17\0\5\236\34\0\6\236\3\0\6\236\17\0"+
    "\5\236\34\0\6\236\3\0\2\236\1\242\3\237\17\0"+
    "\2\236\1\242\2\237\34\0\6\237\3\0\6\237\17\0"+
    "\5\237\34\0\6\177\3\0\6\177\17\0\5\177\34\0"+
    "\6\177\3\0\6\230\17\0\5\230\34\0\6\230\3\0"+
    "\6\230\17\0\5\230\34\0\6\230\3\0\2\230\1\243"+
    "\3\231\17\0\2\230\1\243\2\231\34\0\6\231\3\0"+
    "\6\231\17\0\5\231\65\0\1\244\77\0\1\244\77\0"+
    "\1\244\25\0\14\112\1\140\36\112\1\3\23\112\73\0"+
    "\1\245\63\0\1\246\111\0\1\247\71\0\1\250\102\0"+
    "\1\222\101\0\1\251\13\0\1\252\2\0\1\252\1\236"+
    "\1\253\1\254\3\255\3\0\1\255\1\256\4\257\17\0"+
    "\1\255\1\256\3\257\30\0\1\252\2\0\1\252\1\237"+
    "\1\260\1\261\3\255\3\0\1\255\1\256\4\257\17\0"+
    "\1\255\1\256\3\257\30\0\1\252\2\0\1\252\1\0"+
    "\1\262\1\263\3\264\3\0\1\264\1\265\4\266\17\0"+
    "\1\264\1\265\3\266\30\0\1\252\2\0\1\252\1\207"+
    "\1\267\1\270\3\264\3\0\1\264\1\265\4\266\17\0"+
    "\1\264\1\265\3\266\30\0\1\252\2\0\1\252\1\207"+
    "\1\267\1\270\3\264\3\0\1\255\1\256\4\257\17\0"+
    "\1\255\1\256\3\257\30\0\1\271\2\0\1\271\1\236"+
    "\1\272\1\273\3\274\3\0\2\274\4\257\17\0\2\274"+
    "\3\257\30\0\1\271\2\0\1\271\1\236\1\272\1\273"+
    "\3\274\3\0\2\274\1\275\3\276\17\0\2\274\1\275"+
    "\2\276\30\0\1\271\2\0\1\271\1\237\1\277\1\300"+
    "\3\301\3\0\2\301\4\276\17\0\2\301\3\276\30\0"+
    "\1\271\2\0\1\271\1\0\1\302\1\303\3\304\3\0"+
    "\1\304\1\305\4\306\17\0\1\304\1\305\3\306\30\0"+
    "\1\271\2\0\1\271\1\207\1\307\1\310\3\311\3\0"+
    "\1\311\1\312\4\266\17\0\1\311\1\312\3\266\30\0"+
    "\1\271\2\0\1\271\1\207\1\307\1\310\3\311\3\0"+
    "\2\274\4\257\17\0\2\274\3\257\30\0\1\271\2\0"+
    "\1\271\1\237\1\277\1\300\1\301\2\304\3\0\1\304"+
    "\1\305\4\306\17\0\1\304\1\305\3\306\30\0\1\252"+
    "\2\0\1\252\1\237\1\260\1\261\1\255\2\264\3\0"+
    "\1\264\1\265\4\266\17\0\1\264\1\265\3\266\65\0"+
    "\1\313\1\314\1\315\116\0\1\316\71\0\1\250\66\0"+
    "\1\317\77\0\1\320\36\0\1\321\100\0\1\262\1\263"+
    "\3\264\3\0\1\264\1\265\4\266\17\0\1\264\1\265"+
    "\3\266\30\0\1\271\2\0\1\271\1\257\5\274\3\0"+
    "\2\274\4\257\17\0\2\274\3\257\30\0\1\271\2\0"+
    "\1\271\1\257\5\274\3\0\2\322\4\323\17\0\2\322"+
    "\3\323\30\0\1\271\2\0\1\271\1\323\5\322\3\0"+
    "\2\322\4\323\17\0\2\322\3\323\30\0\1\271\2\0"+
    "\1\271\1\323\5\322\3\0\2\322\1\324\3\325\17\0"+
    "\2\322\1\324\2\325\30\0\1\271\2\0\1\271\1\326"+
    "\1\327\1\330\3\331\3\0\2\331\4\325\17\0\2\331"+
    "\3\325\30\0\1\271\2\0\1\271\1\266\5\311\3\0"+
    "\1\311\1\312\4\266\17\0\1\311\1\312\3\266\30\0"+
    "\1\271\2\0\1\271\1\266\5\311\3\0\2\322\4\323"+
    "\17\0\2\322\3\323\34\0\6\266\3\0\6\266\17\0"+
    "\5\266\34\0\6\266\3\0\6\323\17\0\5\323\34\0"+
    "\6\323\3\0\6\323\17\0\5\323\34\0\6\323\3\0"+
    "\2\323\1\332\3\326\17\0\2\323\1\332\2\326\34\0"+
    "\6\326\3\0\6\326\17\0\5\326\34\0\6\257\3\0"+
    "\6\257\17\0\5\257\34\0\6\257\3\0\6\323\17\0"+
    "\5\323\35\0\1\302\1\303\3\304\3\0\1\304\1\305"+
    "\4\306\17\0\1\304\1\305\3\306\30\0\1\271\2\0"+
    "\1\271\1\276\5\301\3\0\2\301\4\276\17\0\2\301"+
    "\3\276\30\0\1\271\2\0\1\271\1\276\5\301\3\0"+
    "\2\331\4\325\17\0\2\331\3\325\30\0\1\271\2\0"+
    "\1\271\1\325\5\331\3\0\2\331\4\325\17\0\2\331"+
    "\3\325\30\0\1\271\2\0\1\271\1\326\1\327\1\330"+
    "\1\331\2\333\3\0\1\333\1\334\4\335\17\0\1\333"+
    "\1\334\3\335\30\0\1\271\2\0\1\271\1\336\1\337"+
    "\1\340\3\333\3\0\1\333\1\334\4\335\17\0\1\333"+
    "\1\334\3\335\30\0\1\271\2\0\1\271\1\306\5\304"+
    "\3\0\1\304\1\305\4\306\17\0\1\304\1\305\3\306"+
    "\30\0\1\271\2\0\1\271\1\306\5\304\3\0\1\333"+
    "\1\334\4\335\17\0\1\333\1\334\3\335\30\0\1\271"+
    "\2\0\1\271\1\335\5\333\3\0\1\333\1\334\4\335"+
    "\17\0\1\333\1\334\3\335\34\0\6\306\3\0\6\306"+
    "\17\0\5\306\34\0\6\306\3\0\6\335\17\0\5\335"+
    "\34\0\6\335\3\0\6\335\17\0\5\335\34\0\6\335"+
    "\3\0\2\335\1\341\3\336\17\0\2\335\1\341\2\336"+
    "\34\0\6\336\3\0\6\336\17\0\5\336\34\0\6\276"+
    "\3\0\6\276\17\0\5\276\34\0\6\276\3\0\6\325"+
    "\17\0\5\325\34\0\6\325\3\0\6\325\17\0\5\325"+
    "\34\0\6\325\3\0\2\325\1\342\3\326\17\0\2\325"+
    "\1\342\2\326\65\0\1\343\77\0\1\343\77\0\1\343"+
    "\117\0\1\251\74\0\1\344\66\0\1\345\36\0\1\346"+
    "\70\0\1\347\2\0\1\347\1\325\1\350\1\351\3\352"+
    "\3\0\2\352\4\353\17\0\2\352\3\353\30\0\1\347"+
    "\2\0\1\347\1\326\1\354\1\355\3\352\3\0\2\352"+
    "\4\353\17\0\2\352\3\353\30\0\1\347\2\0\1\347"+
    "\1\326\1\354\1\355\1\352\2\356\3\0\1\356\1\357"+
    "\4\360\17\0\1\356\1\357\3\360\30\0\1\347\2\0"+
    "\1\347\1\336\1\361\1\362\3\356\3\0\1\356\1\357"+
    "\4\360\17\0\1\356\1\357\3\360\30\0\1\347\2\0"+
    "\1\347\1\0\1\363\1\364\3\365\3\0\1\365\1\366"+
    "\4\367\17\0\1\365\1\366\3\367\30\0\1\347\2\0"+
    "\1\347\1\306\1\370\1\371\3\365\3\0\1\365\1\366"+
    "\4\367\17\0\1\365\1\366\3\367\30\0\1\347\2\0"+
    "\1\347\1\306\1\370\1\371\3\365\3\0\1\356\1\357"+
    "\4\360\17\0\1\356\1\357\3\360\30\0\1\347\2\0"+
    "\1\347\1\335\1\372\1\373\3\356\3\0\1\356\1\357"+
    "\4\360\17\0\1\356\1\357\3\360\30\0\1\347\2\0"+
    "\1\347\1\326\1\354\1\355\1\352\2\365\3\0\1\365"+
    "\1\366\4\367\17\0\1\365\1\366\3\367\30\0\1\374"+
    "\2\0\1\374\1\335\1\375\1\376\3\377\3\0\2\377"+
    "\4\360\17\0\2\377\3\360\30\0\1\374\2\0\1\374"+
    "\1\335\1\375\1\376\3\377\3\0\2\377\1\u0100\3\u0101"+
    "\17\0\2\377\1\u0100\2\u0101\30\0\1\374\2\0\1\374"+
    "\1\336\1\u0102\1\u0103\3\u0104\3\0\2\u0104\4\u0101\17\0"+
    "\2\u0104\3\u0101\30\0\1\374\2\0\1\374\1\0\1\u0105"+
    "\1\u0106\3\u0107\3\0\1\u0107\1\u0108\4\u0109\17\0\1\u0107"+
    "\1\u0108\3\u0109\30\0\1\374\2\0\1\374\1\306\1\u010a"+
    "\1\u010b\3\u010c\3\0\1\u010c\1\u010d\4\367\17\0\1\u010c"+
    "\1\u010d\3\367\30\0\1\374\2\0\1\374\1\306\1\u010a"+
    "\1\u010b\3\u010c\3\0\2\377\4\360\17\0\2\377\3\360"+
    "\30\0\1\374\2\0\1\374\1\336\1\u0102\1\u0103\1\u0104"+
    "\2\u0107\3\0\1\u0107\1\u0108\4\u0109\17\0\1\u0107\1\u0108"+
    "\3\u0109\30\0\1\347\2\0\1\347\1\336\1\361\1\362"+
    "\1\356\2\365\3\0\1\365\1\366\4\367\17\0\1\365"+
    "\1\366\3\367\42\0\1\u010e\1\0\1\u010f\20\0\1\u0110"+
    "\1\u0111\1\u0112\122\0\1\u0113\71\0\1\251\24\0\1\u0114"+
    "\77\0\1\363\1\364\3\365\3\0\1\365\1\366\4\367"+
    "\17\0\1\365\1\366\3\367\30\0\1\347\2\0\1\347"+
    "\1\360\5\356\3\0\1\356\1\357\4\360\17\0\1\356"+
    "\1\357\3\360\30\0\1\347\2\0\1\347\1\360\5\356"+
    "\3\0\2\u0115\4\u0116\17\0\2\u0115\3\u0116\30\0\1\347"+
    "\2\0\1\347\1\u0116\5\u0115\3\0\2\u0115\4\u0116\17\0"+
    "\2\u0115\3\u0116\30\0\1\347\2\0\1\347\1\u0117\1\u0118"+
    "\1\u0119\3\u0115\3\0\2\u0115\4\u0116\17\0\2\u0115\3\u0116"+
    "\30\0\1\347\2\0\1\347\1\367\5\365\3\0\1\365"+
    "\1\366\4\367\17\0\1\365\1\366\3\367\30\0\1\347"+
    "\2\0\1\347\1\367\5\365\3\0\2\u0115\4\u0116\17\0"+
    "\2\u0115\3\u0116\30\0\1\374\2\0\1\374\1\u0116\5\u011a"+
    "\3\0\2\u011a\4\u0116\17\0\2\u011a\3\u0116\30\0\1\374"+
    "\2\0\1\374\1\u0116\5\u011a\3\0\2\u011a\1\u011b\3\u011c"+
    "\17\0\2\u011a\1\u011b\2\u011c\30\0\1\374\2\0\1\374"+
    "\1\u0117\1\u011d\1\u011e\3\u011f\3\0\2\u011f\4\u011c\17\0"+
    "\2\u011f\3\u011c\30\0\1\374\2\0\1\374\1\367\5\u010c"+
    "\3\0\1\u010c\1\u010d\4\367\17\0\1\u010c\1\u010d\3\367"+
    "\30\0\1\374\2\0\1\374\1\367\5\u010c\3\0\2\u011a"+
    "\4\u0116\17\0\2\u011a\3\u0116\34\0\6\367\3\0\6\367"+
    "\17\0\5\367\34\0\6\367\3\0\6\u0116\17\0\5\u0116"+
    "\34\0\6\u0116\3\0\6\u0116\17\0\5\u0116\34\0\6\u0116"+
    "\3\0\2\u0116\1\u0120\3\u0117\17\0\2\u0116\1\u0120\2\u0117"+
    "\34\0\6\u0117\3\0\6\u0117\17\0\5\u0117\34\0\6\360"+
    "\3\0\6\360\17\0\5\360\34\0\6\360\3\0\6\u0116"+
    "\17\0\5\u0116\30\0\1\374\2\0\1\374\1\360\5\377"+
    "\3\0\2\377\4\360\17\0\2\377\3\360\30\0\1\374"+
    "\2\0\1\374\1\360\5\377\3\0\2\u011a\4\u0116\17\0"+
    "\2\u011a\3\u0116\35\0\1\u0105\1\u0106\3\u0107\3\0\1\u0107"+
    "\1\u0108\4\u0109\17\0\1\u0107\1\u0108\3\u0109\30\0\1\374"+
    "\2\0\1\374\1\u0101\5\u0104\3\0\2\u0104\4\u0101\17\0"+
    "\2\u0104\3\u0101\30\0\1\374\2\0\1\374\1\u0101\5\u0104"+
    "\3\0\2\u011f\4\u011c\17\0\2\u011f\3\u011c\30\0\1\374"+
    "\2\0\1\374\1\u011c\5\u011f\3\0\2\u011f\4\u011c\17\0"+
    "\2\u011f\3\u011c\30\0\1\374\2\0\1\374\1\u0117\1\u011d"+
    "\1\u011e\1\u011f\2\u0121\3\0\1\u0121\1\u0122\4\u0123\17\0"+
    "\1\u0121\1\u0122\3\u0123\30\0\1\374\2\0\1\374\1\u0124"+
    "\1\u0125\1\u0126\3\u0121\3\0\1\u0121\1\u0122\4\u0123\17\0"+
    "\1\u0121\1\u0122\3\u0123\30\0\1\374\2\0\1\374\1\u0109"+
    "\5\u0107\3\0\1\u0107\1\u0108\4\u0109\17\0\1\u0107\1\u0108"+
    "\3\u0109\30\0\1\374\2\0\1\374\1\u0109\5\u0107\3\0"+
    "\1\u0121\1\u0122\4\u0123\17\0\1\u0121\1\u0122\3\u0123\30\0"+
    "\1\374\2\0\1\374\1\u0123\5\u0121\3\0\1\u0121\1\u0122"+
    "\4\u0123\17\0\1\u0121\1\u0122\3\u0123\34\0\6\u0109\3\0"+
    "\6\u0109\17\0\5\u0109\34\0\6\u0109\3\0\6\u0123\17\0"+
    "\5\u0123\34\0\6\u0123\3\0\6\u0123\17\0\5\u0123\34\0"+
    "\6\u0123\3\0\2\u0123\1\u0127\3\u0124\17\0\2\u0123\1\u0127"+
    "\2\u0124\34\0\6\u0124\3\0\6\u0124\17\0\5\u0124\34\0"+
    "\6\u0101\3\0\6\u0101\17\0\5\u0101\34\0\6\u0101\3\0"+
    "\6\u011c\17\0\5\u011c\34\0\6\u011c\3\0\6\u011c\17\0"+
    "\5\u011c\34\0\6\u011c\3\0\2\u011c\1\u0128\3\u0117\17\0"+
    "\2\u011c\1\u0128\2\u0117\44\0\1\u0129\117\0\1\u012a\77\0"+
    "\1\u012a\77\0\1\u012a\42\0\1\u012b\101\0\1\u012c\70\0"+
    "\1\u012d\2\0\1\u012d\1\u0116\5\u0115\1\u012e\2\0\2\u0115"+
    "\4\u0116\17\0\2\u0115\3\u0116\30\0\1\u012d\2\0\1\u012d"+
    "\1\u0117\1\u0118\1\u0119\3\u0115\1\u012e\2\0\2\u0115\4\u0116"+
    "\17\0\2\u0115\3\u0116\30\0\1\u012d\2\0\1\u012d\1\0"+
    "\1\363\1\364\3\365\1\u012e\2\0\1\365\1\366\4\367"+
    "\17\0\1\365\1\366\3\367\30\0\1\u012d\2\0\1\u012d"+
    "\1\367\5\365\1\u012e\2\0\1\365\1\366\4\367\17\0"+
    "\1\365\1\366\3\367\30\0\1\u012d\2\0\1\u012d\1\367"+
    "\5\365\1\u012e\2\0\2\u0115\4\u0116\17\0\2\u0115\3\u0116"+
    "\30\0\1\u012d\2\0\1\u012d\1\u011c\1\u012f\1\u0130\3\u0115"+
    "\1\u012e\2\0\2\u0115\4\u0116\17\0\2\u0115\3\u0116\30\0"+
    "\1\u012d\2\0\1\u012d\1\u0117\1\u0118\1\u0119\1\u0115\2\u0131"+
    "\1\u012e\2\0\1\u0131\1\u0132\4\u0133\17\0\1\u0131\1\u0132"+
    "\3\u0133\30\0\1\u012d\2\0\1\u012d\1\u0124\1\u0134\1\u0135"+
    "\3\u0131\1\u012e\2\0\1\u0131\1\u0132\4\u0133\17\0\1\u0131"+
    "\1\u0132\3\u0133\30\0\1\u012d\2\0\1\u012d\1\u0109\1\u0136"+
    "\1\u0137\3\365\1\u012e\2\0\1\365\1\366\4\367\17\0"+
    "\1\365\1\366\3\367\30\0\1\u012d\2\0\1\u012d\1\u0109"+
    "\1\u0136\1\u0137\3\365\1\u012e\2\0\1\u0131\1\u0132\4\u0133"+
    "\17\0\1\u0131\1\u0132\3\u0133\30\0\1\u012d\2\0\1\u012d"+
    "\1\u0123\1\u0138\1\u0139\3\u0131\1\u012e\2\0\1\u0131\1\u0132"+
    "\4\u0133\17\0\1\u0131\1\u0132\3\u0133\30\0\1\u012d\2\0"+
    "\1\u012d\1\u0117\1\u0118\1\u0119\1\u0115\2\365\1\u012e\2\0"+
    "\1\365\1\366\4\367\17\0\1\365\1\366\3\367\30\0"+
    "\1\u013a\2\0\1\u013a\1\u0123\1\u013b\1\u013c\3\u013d\1\u012e"+
    "\2\0\2\u013d\4\u0133\17\0\2\u013d\3\u0133\30\0\1\u013a"+
    "\2\0\1\u013a\1\u0123\1\u013b\1\u013c\3\u013d\1\u012e\2\0"+
    "\2\u013d\1\u013e\3\u013f\17\0\2\u013d\1\u013e\2\u013f\30\0"+
    "\1\u013a\2\0\1\u013a\1\u0124\1\u0140\1\u0141\3\u0142\1\u012e"+
    "\2\0\2\u0142\4\u013f\17\0\2\u0142\3\u013f\30\0\1\u013a"+
    "\2\0\1\u013a\1\0\1\302\1\303\3\304\1\u012e\2\0"+
    "\1\304\1\305\4\306\17\0\1\304\1\305\3\306\30\0"+
    "\1\u013a\2\0\1\u013a\1\u0109\1\u0143\1\u0144\3\u0145\1\u012e"+
    "\2\0\1\u0145\1\u0146\4\367\17\0\1\u0145\1\u0146\3\367"+
    "\30\0\1\u013a\2\0\1\u013a\1\u0109\1\u0143\1\u0144\3\u0145"+
    "\1\u012e\2\0\2\u013d\4\u0133\17\0\2\u013d\3\u0133\30\0"+
    "\1\u013a\2\0\1\u013a\1\u0124\1\u0140\1\u0141\1\u0142\2\304"+
    "\1\u012e\2\0\1\304\1\305\4\306\17\0\1\304\1\305"+
    "\3\306\30\0\1\u012d\2\0\1\u012d\1\u0124\1\u0134\1\u0135"+
    "\1\u0131\2\365\1\u012e\2\0\1\365\1\366\4\367\17\0"+
    "\1\365\1\366\3\367\44\0\1\u0147\74\0\1\u010e\1\0"+
    "\1\u010f\20\0\1\u0148\1\u0149\1\u014a\45\0\1\u014b\76\0"+
    "\1\u014c\75\0\1\363\1\364\3\365\1\u012e\2\0\1\365"+
    "\1\366\4\367\17\0\1\365\1\366\3\367\30\0\1\u012d"+
    "\2\0\1\u012d\1\u0133\5\u0131\1\u012e\2\0\1\u0131\1\u0132"+
    "\4\u0133\17\0\1\u0131\1\u0132\3\u0133\30\0\1\u012d\2\0"+
    "\1\u012d\1\u0133\5\u0131\1\u012e\2\0\2\u0115\4\u0116\17\0"+
    "\2\u0115\3\u0116\30\0\1\u013a\2\0\1\u013a\1\u0116\5\u014d"+
    "\1\u012e\2\0\2\u014d\4\u0116\17\0\2\u014d\3\u0116\30\0"+
    "\1\u013a\2\0\1\u013a\1\u0116\5\u014d\1\u012e\2\0\2\u014d"+
    "\1\u014e\3\u014f\17\0\2\u014d\1\u014e\2\u014f\30\0\1\u013a"+
    "\2\0\1\u013a\1\u0117\1\u0150\1\u0151\3\u0152\1\u012e\2\0"+
    "\2\u0152\4\u014f\17\0\2\u0152\3\u014f\30\0\1\u013a\2\0"+
    "\1\u013a\1\367\5\u0145\1\u012e\2\0\1\u0145\1\u0146\4\367"+
    "\17\0\1\u0145\1\u0146\3\367\30\0\1\u013a\2\0\1\u013a"+
    "\1\367\5\u0145\1\u012e\2\0\2\u014d\4\u0116\17\0\2\u014d"+
    "\3\u0116\34\0\6\u0133\3\0\6\u0133\17\0\5\u0133\34\0"+
    "\6\u0133\3\0\6\u0116\17\0\5\u0116\30\0\1\u013a\2\0"+
    "\1\u013a\1\u0133\5\u013d\1\u012e\2\0\2\u013d\4\u0133\17\0"+
    "\2\u013d\3\u0133\30\0\1\u013a\2\0\1\u013a\1\u0133\5\u013d"+
    "\1\u012e\2\0\2\u014d\4\u0116\17\0\2\u014d\3\u0116\35\0"+
    "\1\302\1\303\3\304\1\u012e\2\0\1\304\1\305\4\306"+
    "\17\0\1\304\1\305\3\306\30\0\1\u013a\2\0\1\u013a"+
    "\1\u013f\5\u0142\1\u012e\2\0\2\u0142\4\u013f\17\0\2\u0142"+
    "\3\u013f\30\0\1\u013a\2\0\1\u013a\1\u013f\5\u0142\1\u012e"+
    "\2\0\2\u0152\4\u014f\17\0\2\u0152\3\u014f\30\0\1\u013a"+
    "\2\0\1\u013a\1\u014f\5\u0152\1\u012e\2\0\2\u0152\4\u014f"+
    "\17\0\2\u0152\3\u014f\30\0\1\u013a\2\0\1\u013a\1\u0117"+
    "\1\u0150\1\u0151\1\u0152\2\333\1\u012e\2\0\1\333\1\334"+
    "\4\335\17\0\1\333\1\334\3\335\30\0\1\u013a\2\0"+
    "\1\u013a\1\336\1\337\1\340\3\333\1\u012e\2\0\1\333"+
    "\1\334\4\335\17\0\1\333\1\334\3\335\30\0\1\u013a"+
    "\2\0\1\u013a\1\306\5\304\1\u012e\2\0\1\304\1\305"+
    "\4\306\17\0\1\304\1\305\3\306\30\0\1\u013a\2\0"+
    "\1\u013a\1\306\5\304\1\u012e\2\0\1\333\1\334\4\335"+
    "\17\0\1\333\1\334\3\335\30\0\1\u013a\2\0\1\u013a"+
    "\1\335\5\333\1\u012e\2\0\1\333\1\334\4\335\17\0"+
    "\1\333\1\334\3\335\34\0\6\u013f\3\0\6\u013f\17\0"+
    "\5\u013f\34\0\6\u013f\3\0\6\u014f\17\0\5\u014f\34\0"+
    "\6\u014f\3\0\6\u014f\17\0\5\u014f\34\0\6\u014f\3\0"+
    "\2\u014f\1\u0153\3\u0117\17\0\2\u014f\1\u0153\2\u0117\44\0"+
    "\1\u0154\117\0\1\u0155\77\0\1\u0155\77\0\1\u0155\43\0"+
    "\1\u0156\74\0\1\u0157\7\0\1\u0158\64\0\1\u012d\2\0"+
    "\1\u012d\1\u014f\1\u0159\1\u015a\3\u0115\1\u012e\2\0\2\u0115"+
    "\4\u0116\17\0\2\u0115\3\u0116\30\0\1\u012d\2\0\1\u012d"+
    "\1\u0117\1\u0118\1\u0119\1\u0115\2\356\1\u012e\2\0\1\356"+
    "\1\357\4\360\17\0\1\356\1\357\3\360\30\0\1\u012d"+
    "\2\0\1\u012d\1\336\1\361\1\362\3\356\1\u012e\2\0"+
    "\1\356\1\357\4\360\17\0\1\356\1\357\3\360\30\0"+
    "\1\u012d\2\0\1\u012d\1\306\1\370\1\371\3\365\1\u012e"+
    "\2\0\1\365\1\366\4\367\17\0\1\365\1\366\3\367"+
    "\30\0\1\u012d\2\0\1\u012d\1\306\1\370\1\371\3\365"+
    "\1\u012e\2\0\1\356\1\357\4\360\17\0\1\356\1\357"+
    "\3\360\30\0\1\u012d\2\0\1\u012d\1\335\1\372\1\373"+
    "\3\356\1\u012e\2\0\1\356\1\357\4\360\17\0\1\356"+
    "\1\357\3\360\30\0\1\u012d\2\0\1\u012d\1\336\1\361"+
    "\1\362\1\356\2\365\1\u012e\2\0\1\365\1\366\4\367"+
    "\17\0\1\365\1\366\3\367\42\0\1\u010e\1\0\1\u0147"+
    "\74\0\1\u010e\1\0\1\u010f\20\0\1\u015b\1\u015c\1\u015d"+
    "\45\0\1\u015e\74\0\1\u015f\1\u0160\1\u0161\1\u0162\67\0"+
    "\1\u012d\2\0\1\u012d\1\360\5\356\1\u012e\2\0\1\356"+
    "\1\357\4\360\17\0\1\356\1\357\3\360\30\0\1\u012d"+
    "\2\0\1\u012d\1\360\5\356\1\u012e\2\0\2\u0115\4\u0116"+
    "\17\0\2\u0115\3\u0116\65\0\1\u0163\77\0\1\u0163\77\0"+
    "\1\u0163\46\0\1\u014c\74\0\3\u0164\2\u0165\71\0\1\u0166"+
    "\4\u0165\1\u0167\71\0\1\u0168\5\u0167\71\0\1\u0167\1\u0169"+
    "\103\0\1\u010e\1\0\1\u010f\20\0\1\u016a\1\u016b\1\u016c"+
    "\42\0\1\u016d\76\0\1\u016e\76\0\1\u016f\76\0\1\u0170"+
    "\76\0\1\u0171\76\0\1\u0172\130\0\1\u0173\77\0\1\u0173"+
    "\77\0\1\u0173\54\0\1\u0174\2\0\1\u0175\3\0\1\u0176"+
    "\1\0\1\u0177\1\u0178\2\0\1\u0179\61\0\1\u0174\2\0"+
    "\1\u0175\3\0\1\u017a\1\0\1\u0177\1\u0178\2\0\1\u0179"+
    "\61\0\1\u0174\6\0\1\u017a\67\0\1\u0174\2\0\1\u0175"+
    "\3\0\1\u017b\1\0\1\u0177\1\u0178\2\0\1\u0179\61\0"+
    "\1\u0174\6\0\1\u017b\67\0\1\u0174\2\0\1\u0175\3\0"+
    "\1\u017b\2\0\1\u0178\61\0\1\u010e\1\0\1\u010f\20\0"+
    "\1\u017c\1\u017d\1\u017e\120\0\1\u017f\63\0\1\u0180\72\0"+
    "\1\u0181\110\0\1\u0182\66\0\1\u0183\100\0\1\u0184\72\0"+
    "\1\u0181\16\0\1\u0185\76\0\1\u0185\52\0\1\u0186\77\0"+
    "\1\u0186\77\0\1\u0186\106\0\1\u0187\73\0\1\u0188\105\0"+
    "\1\u0189\105\0\1\u0188\74\0\1\u018a\73\0\1\u018b\72\0"+
    "\1\u018c\37\0\1\u010e\1\0\1\u010f\20\0\1\u018d\1\u018e"+
    "\1\u018f\120\0\1\u0190\63\0\1\u0191\111\0\1\u0192\71\0"+
    "\1\u0193\102\0\1\u0188\101\0\1\u0194\50\0\1\u0195\77\0"+
    "\1\u0195\77\0\1\u0195\116\0\1\u0196\71\0\1\u0193\66\0"+
    "\1\u0197\77\0\1\u0198\36\0\1\u0199\105\0\1\u010e\1\0"+
    "\1\u010f\20\0\1\u019a\1\u019b\1\u019c\117\0\1\u0194\74\0"+
    "\1\u019d\66\0\1\u019e\36\0\1\u019f\125\0\1\u01a0\77\0"+
    "\1\u01a0\77\0\1\u01a0\122\0\1\u01a1\71\0\1\u0194\24\0"+
    "\1\u01a2\104\0\1\u010e\1\0\1\u010f\20\0\1\u01a3\1\u01a4"+
    "\1\u01a5\42\0\1\u01a6\101\0\1\u01a7\125\0\1\u01a8\77\0"+
    "\1\u01a8\77\0\1\u01a8\45\0\1\u01a9\76\0\1\u01aa\102\0"+
    "\1\u010e\1\0\1\u010f\20\0\1\u01ab\1\u01ac\1\u01ad\43\0"+
    "\1\u01ae\104\0\1\u0158\121\0\1\u01af\77\0\1\u01af\77\0"+
    "\1\u01af\45\0\1\u01b0\102\0\1\u010e\1\0\1\u010f\20\0"+
    "\1\u01b1\1\u01b2\1\u01b3\46\0\1\u01aa\124\0\1\u01b4\77\0"+
    "\1\u01b4\77\0\1\u01b4\51\0\1\u010e\1\0\1\u010f\20\0"+
    "\1\u01b5\1\u01b6\1\u01b7\74\0\1\u01b8\77\0\1\u01b8\77\0"+
    "\1\u01b8\51\0\1\u010e\1\0\1\u010f\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[26334];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\1\11\1\1\5\11\14\1\1\11"+
    "\1\0\1\11\3\0\1\1\1\0\2\11\1\0\1\11"+
    "\5\0\1\11\21\0\1\11\6\0\1\11\6\0\1\11"+
    "\7\0\1\11\12\0\1\11\261\0\1\11\37\0\1\11"+
    "\51\0\1\11\140\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[440];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Unrecognized character: " + yytext());
            }
            // fall through
          case 26: break;
          case 2:
            { ;
            }
            // fall through
          case 27: break;
          case 3:
            { return new Symbol(sym.NOT);
            }
            // fall through
          case 28: break;
          case 4:
            { return new Symbol(sym.AND);
            }
            // fall through
          case 29: break;
          case 5:
            { return new Symbol(sym.TA);
            }
            // fall through
          case 30: break;
          case 6:
            { return new Symbol(sym.TC);
            }
            // fall through
          case 31: break;
          case 7:
            { return new Symbol(sym.V);
            }
            // fall through
          case 32: break;
          case 8:
            { return new Symbol(sym.PV);
            }
            // fall through
          case 33: break;
          case 9:
            { return new Symbol(sym.EQ);
            }
            // fall through
          case 34: break;
          case 10:
            { return new Symbol(sym.VAR, new String(yytext()));
            }
            // fall through
          case 35: break;
          case 11:
            { return new Symbol(sym.OR);
            }
            // fall through
          case 36: break;
          case 12:
            { return new Symbol(sym.STR, new String(yytext()));
            }
            // fall through
          case 37: break;
          case 13:
            { return new Symbol(sym.DO);
            }
            // fall through
          case 38: break;
          case 14:
            { return new Symbol(sym.FI);
            }
            // fall through
          case 39: break;
          case 15:
            { return new Symbol(sym.IF);
            }
            // fall through
          case 40: break;
          case 16:
            { return new Symbol(sym.ORS);
            }
            // fall through
          case 41: break;
          case 17:
            { return new Symbol(sym.ANDS);
            }
            // fall through
          case 42: break;
          case 18:
            { return new Symbol(sym.SEP);
            }
            // fall through
          case 43: break;
          case 19:
            { return new Symbol(sym.DONE);
            }
            // fall through
          case 44: break;
          case 20:
            { return new Symbol(sym.T);
            }
            // fall through
          case 45: break;
          case 21:
            { return new Symbol(sym.F);
            }
            // fall through
          case 46: break;
          case 22:
            { return new Symbol(sym.PRINT);
            }
            // fall through
          case 47: break;
          case 23:
            { return new Symbol(sym.TOK2);
            }
            // fall through
          case 48: break;
          case 24:
            { return new Symbol(sym.TOK3);
            }
            // fall through
          case 49: break;
          case 25:
            { return new Symbol(sym.TOK1);
            }
            // fall through
          case 50: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
