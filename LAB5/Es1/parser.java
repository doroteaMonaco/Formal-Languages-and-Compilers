
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java.runtime.*;
import java.util.HashMap;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\040\000\002\002\004\000\002\002\004\000\002\003" +
    "\005\000\002\003\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\006\003\000" +
    "\002\005\003\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\011\003\000\002\013\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\013\005\000\002\010\006\000\002\007\006\000\002\012" +
    "\003\000\002\012\003\000\002\014\003\000\002\014\007" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\014\004\005\005\012\006\020\010\004\021" +
    "\023\001\002\000\014\004\005\005\024\006\026\010\004" +
    "\021\023\001\002\000\026\007\uffe4\010\uffe4\011\uffe4\012" +
    "\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\020\uffe4\022\uffe4" +
    "\001\002\000\006\015\ufffb\017\ufffb\001\002\000\026\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\017\ufff0\020\ufff0\022\ufff0\001\002\000\006\015\ufffc\017" +
    "\ufffc\001\002\000\026\007\uffe9\010\uffe9\011\uffe9\012\uffe9" +
    "\014\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\022\uffe9\001" +
    "\002\000\022\007\uffe5\010\uffe5\011\uffe5\012\uffe5\013\073" +
    "\015\uffe5\016\uffe5\017\uffe5\001\002\000\006\015\070\017" +
    "\071\001\002\000\020\007\040\010\042\011\041\012\044" +
    "\015\ufff9\016\043\017\ufff9\001\002\000\006\015\ufffa\017" +
    "\ufffa\001\002\000\004\002\067\001\002\000\006\015\ufffd" +
    "\017\ufffd\001\002\000\022\007\uffe3\010\uffe3\011\uffe3\012" +
    "\uffe3\013\064\014\uffe3\015\uffe3\017\uffe3\001\002\000\006" +
    "\015\ufffe\017\ufffe\001\002\000\020\007\030\010\032\011" +
    "\031\012\034\014\035\015\ufff8\017\ufff8\001\002\000\014" +
    "\004\005\005\024\006\026\010\004\021\023\001\002\000" +
    "\026\007\uffe5\010\uffe5\011\uffe5\012\uffe5\014\uffe5\015\uffe5" +
    "\016\uffe5\017\uffe5\020\uffe5\022\uffe5\001\002\000\016\007" +
    "\040\010\042\011\041\012\044\016\043\020\061\001\002" +
    "\000\026\007\uffe3\010\uffe3\011\uffe3\012\uffe3\014\uffe3\015" +
    "\uffe3\016\uffe3\017\uffe3\020\uffe3\022\uffe3\001\002\000\016" +
    "\007\030\010\032\011\031\012\034\014\035\022\033\001" +
    "\002\000\014\004\005\005\024\006\026\010\004\021\023" +
    "\001\002\000\014\004\005\005\024\006\026\010\004\021" +
    "\023\001\002\000\014\004\005\005\024\006\026\010\004" +
    "\021\023\001\002\000\026\007\uffe8\010\uffe8\011\uffe8\012" +
    "\uffe8\014\uffe8\015\uffe8\016\uffe8\017\uffe8\020\uffe8\022\uffe8" +
    "\001\002\000\014\004\005\005\024\006\026\010\004\021" +
    "\023\001\002\000\014\004\005\005\024\006\026\010\004" +
    "\021\023\001\002\000\014\007\040\010\042\011\041\012" +
    "\044\016\043\001\002\000\026\007\ufff2\010\ufff2\011\031" +
    "\012\034\014\ufff2\015\ufff2\016\ufff2\017\ufff2\020\ufff2\022" +
    "\ufff2\001\002\000\014\004\005\005\024\006\026\010\004" +
    "\021\023\001\002\000\014\004\005\005\024\006\026\010" +
    "\004\021\023\001\002\000\014\004\005\005\024\006\026" +
    "\010\004\021\023\001\002\000\014\004\005\005\024\006" +
    "\026\010\004\021\023\001\002\000\014\004\005\005\024" +
    "\006\026\010\004\021\023\001\002\000\026\007\ufff4\010" +
    "\ufff4\011\ufff4\012\ufff4\014\ufff4\015\ufff4\016\043\017\ufff4" +
    "\020\ufff4\022\ufff4\001\002\000\026\007\uffea\010\uffea\011" +
    "\uffea\012\uffea\014\uffea\015\uffea\016\uffea\017\uffea\020\uffea" +
    "\022\uffea\001\002\000\026\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\014\ufff3\015\ufff3\016\ufff3\017\ufff3\020\ufff3\022\ufff3" +
    "\001\002\000\014\007\030\010\032\011\031\012\034\014" +
    "\035\001\002\000\026\007\ufff6\010\ufff6\011\041\012\044" +
    "\014\ufff6\015\ufff6\016\043\017\ufff6\020\ufff6\022\ufff6\001" +
    "\002\000\026\007\ufff5\010\ufff5\011\ufff5\012\ufff5\014\ufff5" +
    "\015\ufff5\016\043\017\ufff5\020\ufff5\022\ufff5\001\002\000" +
    "\026\007\uffed\010\uffed\011\uffed\012\uffed\014\uffed\015\uffed" +
    "\016\uffed\017\uffed\020\uffed\022\uffed\001\002\000\026\007" +
    "\ufff7\010\ufff7\011\041\012\044\014\ufff7\015\ufff7\016\043" +
    "\017\ufff7\020\ufff7\022\ufff7\001\002\000\026\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\014\uffeb\015\uffeb\016\043\017\uffeb" +
    "\020\uffeb\022\uffeb\001\002\000\026\007\uffee\010\uffee\011" +
    "\031\012\034\014\035\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\022\uffee\001\002\000\026\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\014\uffec\015\uffec\016\043\017\uffec\020\uffec\022\uffec" +
    "\001\002\000\026\007\uffef\010\uffef\011\031\012\034\014" +
    "\035\015\uffef\016\uffef\017\uffef\020\uffef\022\uffef\001\002" +
    "\000\014\004\005\005\024\006\026\010\004\021\023\001" +
    "\002\000\016\007\040\010\042\011\041\012\044\016\043" +
    "\022\063\001\002\000\026\007\uffe2\010\uffe2\011\uffe2\012" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\017\uffe2\020\uffe2\022\uffe2" +
    "\001\002\000\014\004\005\005\024\006\026\010\004\021" +
    "\023\001\002\000\016\007\030\010\032\011\031\012\034" +
    "\014\035\015\066\001\002\000\006\015\uffe6\017\uffe6\001" +
    "\002\000\004\002\001\001\002\000\014\004\005\005\012" +
    "\006\020\010\004\021\023\001\002\000\004\002\000\001" +
    "\002\000\006\015\uffff\017\uffff\001\002\000\014\004\005" +
    "\005\024\006\026\010\004\021\023\001\002\000\016\007" +
    "\040\010\042\011\041\012\044\015\075\016\043\001\002" +
    "\000\006\015\uffe7\017\uffe7\001\002\000\026\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\014\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\022\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\074\000\030\002\015\003\012\004\020\005\014\006" +
    "\005\007\007\010\016\011\013\012\006\013\021\014\010" +
    "\001\001\000\012\011\075\012\006\013\047\014\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\024\012\006\013\026" +
    "\014\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\011\035\012\006" +
    "\013\057\014\010\001\001\000\012\011\056\012\006\013" +
    "\047\014\010\001\001\000\012\011\035\012\006\013\055" +
    "\014\010\001\001\000\002\001\001\000\012\011\054\012" +
    "\006\013\047\014\010\001\001\000\012\011\035\012\006" +
    "\013\036\014\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\053\012\006\013\047\014\010\001\001" +
    "\000\012\011\051\012\006\013\052\014\010\001\001\000" +
    "\012\011\050\012\006\013\047\014\010\001\001\000\012" +
    "\011\046\012\006\013\047\014\010\001\001\000\012\011" +
    "\044\012\006\013\045\014\010\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\011\061\012\006\013\047" +
    "\014\010\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\011\035\012\006\013\064\014\010\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\071\005\014\006\005\007\007\010\016\011\013\012\006" +
    "\013\021\014\010\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\073\012\006\013\047\014\010\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    symbolTable = new HashMap();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public HashMap symbolTable;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (line "+line+", column "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= expr_list END 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;
		
    System.out.println("End of program");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // expr_list ::= expr_list SEMICOLON expr 
            { parser.Tree.reduce(3,"expr_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // expr_list ::= expr 
            { parser.Tree.reduce(1,"expr_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // expr ::= scalar_assign 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // expr ::= vect_assign 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // expr ::= scalar_print 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // expr ::= vect_print 
            { parser.Tree.reduce(1,"expr",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scalar_print ::= scalar_expr 
            { parser.Tree.reduce(1,"scalar_print",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("scalar: "+a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_print",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // vect_print ::= vect_expr 
            { parser.Tree.reduce(1,"vect_print",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    System.out.println("vect: ["+a[0]+", "+a[1]+"]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_print",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // scalar_expr ::= scalar_expr PLUS scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(a + b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // scalar_expr ::= scalar_expr MINUS scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(a - b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // scalar_expr ::= scalar_expr MUL scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(a * b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // scalar_expr ::= scalar_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(a / b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // scalar_expr ::= scalar_expr EXP scalar_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(Math.pow(a, b));

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // scalar_expr ::= vect_expr MULVEC vect_expr 
            { parser.Tree.reduce(3,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(a[0]*b[0]+a[1]*b[1]);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // scalar_expr ::= MINUS scalar_expr 
            { parser.Tree.reduce(2,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(-a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // scalar_expr ::= scalar 
            { parser.Tree.reduce(1,"scalar_expr",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_expr",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // vect_expr ::= vect_expr PLUS vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double[2];
    RESULT[0] = a[0] + b[0];
    RESULT[1] = a[1] + b[1];

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // vect_expr ::= vect_expr MINUS vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double[2];
    RESULT[0] = a[0] - b[0];
    RESULT[1] = a[1] - b[1];

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // vect_expr ::= scalar_expr MUL vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double[2];
    RESULT[0] = a * b[0];
    RESULT[1] = a * b[1];

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // vect_expr ::= vect_expr MUL scalar_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double[2];
    RESULT[0] = a[0] * b;
    RESULT[1] = a[1] * b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // vect_expr ::= vect_expr DIV scalar_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double[2];
    RESULT[0] = a[0] / b;
    RESULT[1] = a[1] / b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // vect_expr ::= scalar_expr DIV vect_expr 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double[2];
    RESULT[0] = a / b[0];
    RESULT[1] = a / b[1];

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // vect_expr ::= vector 
            { parser.Tree.reduce(1,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // vect_expr ::= QA vect_expr QC 
            { parser.Tree.reduce(3,"vect_expr",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] a = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = a;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_expr",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // scalar_assign ::= SCAVAR EQ scalar_expr SEMICOLON 
            { parser.Tree.reduce(4,"scalar_assign",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.symbolTable.put(a, b);
    System.out.println("assignment:"+a+"="+b);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar_assign",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // vect_assign ::= VECVAR EQ vect_expr SEMICOLON 
            { parser.Tree.reduce(4,"vect_assign",0);
              Object RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double[] b = (Double[])((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.symbolTable.put(a, b);
    System.out.println("assignment:"+a+"="+"["+b[0]+","+b[1]+"]");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vect_assign",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // scalar ::= SCAVAR 
            { parser.Tree.reduce(1,"scalar",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = parser.symbolTable.get(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // scalar ::= SCALAR 
            { parser.Tree.reduce(1,"scalar",0);
              Double RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = new Double(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("scalar",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // vector ::= VECVAR 
            { parser.Tree.reduce(1,"vector",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Character a = (Character)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = (Double[]) parser.symbolTable.get(a);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // vector ::= QA scalar_expr CM scalar_expr QC 
            { parser.Tree.reduce(5,"vector",0);
              Double[] RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double a = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = new Double[2];
    RESULT[0] = a;
    RESULT[1] = b;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("vector",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
