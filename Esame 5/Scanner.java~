// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\11\0"+
    "\1\5\1\6\1\7\1\10\1\0\1\11\1\12\1\13"+
    "\1\14\1\15\2\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\0\1\25\1\26\2\0\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\2\0\1\47\1\50"+
    "\1\51\5\0\1\52\1\0\1\53\1\0\1\54\1\0"+
    "\1\55\3\56\1\57\1\60\24\61\12\0\1\3\u01a2\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\1\1\3\2\4\1\5\1\6"+
    "\1\7\11\1\1\10\1\11\35\0\1\12\1\0\1\13"+
    "\2\0\1\14\1\15\1\16\1\0\1\17\35\0\1\20"+
    "\1\0\1\21\17\0\1\22\47\0\1\23\171\0\1\24"+
    "\107\0\1\25\41\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\62\0\144\0\226\0\62\0\62\0\310"+
    "\0\62\0\372\0\62\0\u012c\0\u015e\0\u0190\0\u01c2\0\u01f4"+
    "\0\u0226\0\u0258\0\u028a\0\u02bc\0\62\0\62\0\u02ee\0\u0320"+
    "\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e\0\u04b0"+
    "\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05dc\0\u060e\0\u0640"+
    "\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0"+
    "\0\u0802\0\u0834\0\u0866\0\62\0\u0898\0\62\0\u08ca\0\u08fc"+
    "\0\62\0\62\0\62\0\u092e\0\62\0\u0960\0\u0992\0\u09c4"+
    "\0\u09f6\0\u0a28\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22\0\u0b54"+
    "\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80\0\u0cb2\0\u0ce4"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u0dde\0\u0e10\0\u0e42\0\u0e74"+
    "\0\u0ea6\0\u0ed8\0\62\0\u0f0a\0\62\0\u0f3c\0\u0f6e\0\u0fa0"+
    "\0\u0fd2\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\62\0\u122a\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e"+
    "\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce"+
    "\0\u1900\0\u1932\0\u1964\0\u1996\0\62\0\u19c8\0\u19fa\0\u1a2c"+
    "\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a\0\u1bbc"+
    "\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a\0\u1d4c"+
    "\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa\0\u1edc"+
    "\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a\0\u206c"+
    "\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca\0\u21fc"+
    "\0\u222e\0\u2260\0\u2292\0\u22c4\0\u22f6\0\u2328\0\u235a\0\u238c"+
    "\0\u23be\0\u23f0\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea\0\u251c"+
    "\0\u254e\0\u2580\0\u25b2\0\u25e4\0\u2616\0\u2648\0\u267a\0\u26ac"+
    "\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u27d8\0\u280a\0\u283c"+
    "\0\u286e\0\u28a0\0\u28d2\0\u2904\0\u2936\0\u2968\0\u299a\0\u29cc"+
    "\0\u29fe\0\u2a30\0\u2a62\0\u2a94\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c"+
    "\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24\0\u2c56\0\u2c88\0\u2cba\0\u2cec"+
    "\0\u2d1e\0\u2d50\0\u2d82\0\u2db4\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c"+
    "\0\u2eae\0\u2ee0\0\u2f12\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c"+
    "\0\u303e\0\u3070\0\u30a2\0\u30d4\0\u3106\0\u3138\0\62\0\u316a"+
    "\0\u319c\0\u31ce\0\u3200\0\u3232\0\u3264\0\u3296\0\u32c8\0\u32fa"+
    "\0\u332c\0\u335e\0\u3390\0\u33c2\0\u33f4\0\u3426\0\u3458\0\u348a"+
    "\0\u34bc\0\u34ee\0\u3520\0\u3552\0\u3584\0\u35b6\0\u35e8\0\u361a"+
    "\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa"+
    "\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a"+
    "\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca"+
    "\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a"+
    "\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea"+
    "\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u3f16\0\62\0\u3f48"+
    "\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8"+
    "\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u4236\0\u4268"+
    "\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394\0\u43c6\0\u43f8"+
    "\0\u442a\0\u445c\0\u448e\0\u44c0\0\u44f2\0\u4524\0\u4556\0\u4588";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\2\2"+
    "\1\7\10\10\1\2\1\11\1\12\1\13\2\2\1\14"+
    "\1\15\3\2\1\16\1\17\1\20\1\21\1\2\1\22"+
    "\3\2\1\23\1\2\1\24\1\25\1\26\6\2\64\0"+
    "\1\3\67\0\1\27\63\0\11\10\64\0\1\30\101\0"+
    "\1\31\61\0\1\32\47\0\1\33\72\0\1\34\7\0"+
    "\1\35\61\0\1\36\61\0\1\37\56\0\1\40\56\0"+
    "\1\41\2\0\1\42\56\0\1\43\23\0\1\44\76\0"+
    "\1\45\100\0\1\46\61\0\1\47\54\0\1\50\61\0"+
    "\1\51\34\0\1\52\1\53\1\54\1\55\57\0\2\56"+
    "\1\57\5\60\4\0\1\61\5\62\20\0\1\61\3\62"+
    "\56\0\5\63\42\0\1\64\52\0\1\65\71\0\1\66"+
    "\50\0\1\67\27\0\10\44\1\70\51\44\25\0\1\71"+
    "\66\0\1\72\62\0\1\73\63\0\1\74\74\0\1\75"+
    "\24\0\2\76\2\77\4\100\51\0\11\100\51\0\10\100"+
    "\1\101\51\0\1\101\1\102\60\0\11\62\4\0\6\62"+
    "\20\0\4\62\13\0\11\62\4\0\1\62\5\103\20\0"+
    "\1\62\3\103\13\0\11\103\4\0\6\103\20\0\4\103"+
    "\13\0\11\103\4\0\4\103\1\104\1\105\20\0\2\103"+
    "\1\104\1\105\13\0\11\105\4\0\6\105\20\0\4\105"+
    "\56\0\5\106\33\0\1\107\55\0\1\110\32\0\10\44"+
    "\1\111\51\44\36\0\1\112\34\0\1\113\61\0\1\114"+
    "\61\0\1\115\61\0\1\116\61\0\1\117\55\0\2\120"+
    "\1\0\1\120\1\0\1\105\2\121\1\122\5\123\4\0"+
    "\1\123\5\124\20\0\1\123\3\124\6\0\2\120\1\0"+
    "\1\120\1\0\1\105\2\121\1\122\5\125\4\0\1\126"+
    "\5\127\20\0\1\126\3\127\6\0\2\120\1\0\1\120"+
    "\2\0\2\130\1\131\5\125\4\0\1\126\5\127\20\0"+
    "\1\126\3\127\56\0\5\132\32\0\1\133\77\0\1\134"+
    "\11\0\6\44\1\3\1\44\1\111\51\44\50\0\1\135"+
    "\23\0\1\136\1\137\60\0\1\140\1\137\60\0\1\141"+
    "\1\137\60\0\1\142\1\137\60\0\1\143\1\144\61\0"+
    "\2\130\1\131\5\125\4\0\1\126\5\127\20\0\1\126"+
    "\3\127\6\0\2\120\1\0\1\120\1\0\1\127\10\125"+
    "\4\0\1\126\5\127\20\0\1\126\3\127\6\0\2\120"+
    "\1\0\1\120\1\0\1\127\10\125\4\0\1\126\5\145"+
    "\20\0\1\126\3\145\6\0\2\120\1\0\1\120\1\0"+
    "\1\145\10\146\4\0\1\147\5\145\20\0\1\147\3\145"+
    "\6\0\2\120\1\0\1\120\1\0\1\150\2\151\1\152"+
    "\5\146\4\0\1\147\5\145\20\0\1\147\3\145\13\0"+
    "\11\145\4\0\6\145\20\0\4\145\13\0\11\145\4\0"+
    "\4\145\1\153\1\150\20\0\2\145\1\153\1\150\13\0"+
    "\11\150\4\0\6\150\20\0\4\150\13\0\11\127\4\0"+
    "\6\127\20\0\4\127\13\0\11\127\4\0\1\127\5\145"+
    "\20\0\1\127\3\145\56\0\5\154\33\0\1\155\41\0"+
    "\3\156\56\0\3\157\60\0\3\156\4\0\1\157\52\0"+
    "\2\156\5\0\1\157\52\0\1\156\6\0\1\157\52\0"+
    "\1\156\60\0\1\157\1\0\1\157\52\0\2\160\1\0"+
    "\1\160\1\0\1\150\2\161\1\162\5\163\4\0\1\163"+
    "\5\164\20\0\1\163\3\164\6\0\2\160\1\0\1\160"+
    "\1\0\1\145\2\165\1\166\5\167\4\0\1\167\5\170"+
    "\20\0\1\167\3\170\6\0\2\160\1\0\1\160\1\0"+
    "\1\145\2\165\1\166\5\167\4\0\1\167\3\170\1\171"+
    "\1\164\20\0\1\167\1\170\1\171\1\164\6\0\2\160"+
    "\1\0\1\160\2\0\2\172\1\173\5\174\4\0\1\175"+
    "\5\176\20\0\1\175\3\176\6\0\2\160\1\0\1\160"+
    "\1\0\1\127\2\177\1\200\5\201\4\0\1\202\5\203"+
    "\20\0\1\202\3\203\6\0\2\160\1\0\1\160\1\0"+
    "\1\127\2\177\1\200\5\201\4\0\1\202\5\170\20\0"+
    "\1\202\3\170\6\0\2\160\1\0\1\160\1\0\1\150"+
    "\2\161\1\162\5\174\4\0\1\175\5\176\20\0\1\175"+
    "\3\176\56\0\5\204\11\0\1\205\61\0\1\206\63\0"+
    "\2\172\1\173\5\174\4\0\1\175\5\176\20\0\1\175"+
    "\3\176\6\0\2\160\1\0\1\160\1\0\1\176\10\174"+
    "\4\0\1\175\5\176\20\0\1\175\3\176\6\0\2\160"+
    "\1\0\1\160\1\0\1\176\10\174\4\0\1\175\5\207"+
    "\20\0\1\175\3\207\6\0\2\160\1\0\1\160\1\0"+
    "\1\207\10\210\4\0\1\211\5\207\20\0\1\211\3\207"+
    "\6\0\2\160\1\0\1\160\1\0\1\212\2\213\1\214"+
    "\5\210\4\0\1\211\5\207\20\0\1\211\3\207\6\0"+
    "\2\160\1\0\1\160\1\0\1\164\10\163\4\0\1\163"+
    "\5\164\20\0\1\163\3\164\6\0\2\160\1\0\1\160"+
    "\1\0\1\164\10\163\4\0\1\163\5\215\20\0\1\163"+
    "\3\215\6\0\2\160\1\0\1\160\1\0\1\215\10\216"+
    "\4\0\1\216\5\215\20\0\1\216\3\215\6\0\2\160"+
    "\1\0\1\160\1\0\1\217\2\220\1\221\5\216\4\0"+
    "\1\216\5\215\20\0\1\216\3\215\6\0\2\160\1\0"+
    "\1\160\1\0\1\217\2\220\1\221\5\210\4\0\1\211"+
    "\5\207\20\0\1\211\3\207\13\0\11\176\4\0\6\176"+
    "\20\0\4\176\13\0\11\176\4\0\1\176\5\207\20\0"+
    "\1\176\3\207\13\0\11\207\4\0\6\207\20\0\4\207"+
    "\13\0\11\207\4\0\4\207\1\222\1\212\20\0\2\207"+
    "\1\222\1\212\13\0\11\212\4\0\6\212\20\0\4\212"+
    "\13\0\11\164\4\0\6\164\20\0\4\164\13\0\11\164"+
    "\4\0\1\164\5\215\20\0\1\164\3\215\13\0\11\215"+
    "\4\0\6\215\20\0\4\215\13\0\11\215\4\0\4\215"+
    "\1\223\1\217\20\0\2\215\1\223\1\217\13\0\11\217"+
    "\4\0\6\217\20\0\4\217\13\0\2\224\10\0\1\225"+
    "\30\0\5\154\14\0\1\226\61\0\1\227\52\0\2\230"+
    "\1\0\1\230\1\0\1\212\2\231\1\232\5\233\4\0"+
    "\1\233\5\234\20\0\1\233\3\234\6\0\2\230\1\0"+
    "\1\230\1\0\1\207\2\235\1\236\5\237\4\0\1\237"+
    "\5\240\20\0\1\237\3\240\6\0\2\230\1\0\1\230"+
    "\1\0\1\207\2\235\1\236\5\237\4\0\1\237\3\240"+
    "\1\241\1\234\20\0\1\237\1\240\1\241\1\234\6\0"+
    "\2\230\1\0\1\230\2\0\2\242\1\243\5\244\4\0"+
    "\1\245\5\246\20\0\1\245\3\246\6\0\2\230\1\0"+
    "\1\230\1\0\1\176\2\247\1\250\5\251\4\0\1\252"+
    "\5\253\20\0\1\252\3\253\6\0\2\230\1\0\1\230"+
    "\1\0\1\176\2\247\1\250\5\251\4\0\1\252\5\240"+
    "\20\0\1\252\3\240\6\0\2\254\1\0\1\254\1\0"+
    "\1\212\2\255\1\256\5\257\4\0\1\260\5\240\20\0"+
    "\1\260\3\240\6\0\2\254\1\0\1\254\1\0\1\207"+
    "\2\261\1\262\5\257\4\0\1\260\5\240\20\0\1\260"+
    "\3\240\6\0\2\254\1\0\1\254\2\0\2\263\1\264"+
    "\5\265\4\0\1\266\5\253\20\0\1\266\3\253\6\0"+
    "\2\254\1\0\1\254\1\0\1\176\2\267\1\270\5\265"+
    "\4\0\1\266\5\253\20\0\1\266\3\253\6\0\2\254"+
    "\1\0\1\254\1\0\1\176\2\267\1\270\5\265\4\0"+
    "\1\266\5\240\20\0\1\266\3\240\6\0\2\230\1\0"+
    "\1\230\1\0\1\212\2\231\1\232\5\244\4\0\1\245"+
    "\5\246\20\0\1\245\3\246\6\0\2\254\1\0\1\254"+
    "\1\0\1\212\2\255\1\256\5\265\4\0\1\266\5\253"+
    "\20\0\1\266\3\253\13\0\2\271\60\0\1\272\61\0"+
    "\1\273\62\0\2\242\1\243\5\244\4\0\1\245\5\246"+
    "\20\0\1\245\3\246\6\0\2\230\1\0\1\230\1\0"+
    "\1\246\10\244\4\0\1\245\5\246\20\0\1\245\3\246"+
    "\6\0\2\230\1\0\1\230\1\0\1\246\10\244\4\0"+
    "\1\245\5\274\20\0\1\245\3\274\6\0\2\230\1\0"+
    "\1\230\1\0\1\274\10\275\4\0\1\276\5\274\20\0"+
    "\1\276\3\274\6\0\2\230\1\0\1\230\1\0\1\277"+
    "\2\300\1\301\5\275\4\0\1\276\5\274\20\0\1\276"+
    "\3\274\6\0\2\230\1\0\1\230\1\0\1\234\10\233"+
    "\4\0\1\233\5\234\20\0\1\233\3\234\6\0\2\230"+
    "\1\0\1\230\1\0\1\234\10\233\4\0\1\233\5\302"+
    "\20\0\1\233\3\302\6\0\2\230\1\0\1\230\1\0"+
    "\1\302\10\303\4\0\1\303\5\302\20\0\1\303\3\302"+
    "\6\0\2\230\1\0\1\230\1\0\1\304\2\305\1\306"+
    "\5\303\4\0\1\303\5\302\20\0\1\303\3\302\6\0"+
    "\2\230\1\0\1\230\1\0\1\304\2\305\1\306\5\275"+
    "\4\0\1\276\5\274\20\0\1\276\3\274\13\0\11\246"+
    "\4\0\6\246\20\0\4\246\13\0\11\246\4\0\1\246"+
    "\5\274\20\0\1\246\3\274\13\0\11\274\4\0\6\274"+
    "\20\0\4\274\13\0\11\274\4\0\4\274\1\307\1\277"+
    "\20\0\2\274\1\307\1\277\13\0\11\277\4\0\6\277"+
    "\20\0\4\277\13\0\11\234\4\0\6\234\20\0\4\234"+
    "\13\0\11\234\4\0\1\234\5\302\20\0\1\234\3\302"+
    "\13\0\11\302\4\0\6\302\20\0\4\302\13\0\11\302"+
    "\4\0\4\302\1\310\1\304\20\0\2\302\1\310\1\304"+
    "\13\0\11\304\4\0\6\304\20\0\4\304\14\0\2\263"+
    "\1\264\5\265\4\0\1\266\5\253\20\0\1\266\3\253"+
    "\6\0\2\230\1\0\1\230\1\0\1\253\10\251\4\0"+
    "\1\252\5\253\20\0\1\252\3\253\6\0\2\230\1\0"+
    "\1\230\1\0\1\253\10\251\4\0\1\252\5\311\20\0"+
    "\1\252\3\311\6\0\2\230\1\0\1\230\1\0\1\311"+
    "\10\312\4\0\1\312\5\311\20\0\1\312\3\311\6\0"+
    "\2\230\1\0\1\230\1\0\1\311\10\312\4\0\1\312"+
    "\3\311\1\313\1\302\20\0\1\312\1\311\1\313\1\302"+
    "\6\0\2\230\1\0\1\230\1\0\1\240\10\237\4\0"+
    "\1\237\5\240\20\0\1\237\3\240\6\0\2\230\1\0"+
    "\1\230\1\0\1\240\10\237\4\0\1\237\5\311\20\0"+
    "\1\237\3\311\13\0\11\253\4\0\6\253\20\0\4\253"+
    "\13\0\11\253\4\0\1\253\5\311\20\0\1\253\3\311"+
    "\13\0\11\311\4\0\6\311\20\0\4\311\13\0\11\311"+
    "\4\0\4\311\1\314\1\304\20\0\2\311\1\314\1\304"+
    "\13\0\11\240\4\0\6\240\20\0\4\240\13\0\11\240"+
    "\4\0\1\240\5\311\20\0\1\240\3\311\13\0\2\315"+
    "\62\0\1\316\61\0\1\317\52\0\2\320\1\0\1\320"+
    "\1\0\1\277\2\321\1\322\5\323\4\0\1\323\5\324"+
    "\20\0\1\323\3\324\6\0\2\320\1\0\1\320\1\0"+
    "\1\274\2\325\1\326\5\327\4\0\1\327\5\330\20\0"+
    "\1\327\3\330\6\0\2\320\1\0\1\320\1\0\1\274"+
    "\2\325\1\326\5\327\4\0\1\327\3\330\1\331\1\324"+
    "\20\0\1\327\1\330\1\331\1\324\6\0\2\320\1\0"+
    "\1\320\2\0\2\332\1\333\5\334\4\0\1\335\5\336"+
    "\20\0\1\335\3\336\6\0\2\320\1\0\1\320\1\0"+
    "\1\246\2\337\1\340\5\341\4\0\1\342\5\343\20\0"+
    "\1\342\3\343\6\0\2\320\1\0\1\320\1\0\1\246"+
    "\2\337\1\340\5\341\4\0\1\342\5\330\20\0\1\342"+
    "\3\330\6\0\2\344\1\0\1\344\1\0\1\277\2\345"+
    "\1\346\5\347\4\0\1\350\5\330\20\0\1\350\3\330"+
    "\6\0\2\344\1\0\1\344\1\0\1\274\2\351\1\352"+
    "\5\347\4\0\1\350\5\330\20\0\1\350\3\330\6\0"+
    "\2\344\1\0\1\344\2\0\2\353\1\354\5\355\4\0"+
    "\1\356\5\343\20\0\1\356\3\343\6\0\2\344\1\0"+
    "\1\344\1\0\1\246\2\357\1\360\5\355\4\0\1\356"+
    "\5\343\20\0\1\356\3\343\6\0\2\344\1\0\1\344"+
    "\1\0\1\246\2\357\1\360\5\355\4\0\1\356\5\330"+
    "\20\0\1\356\3\330\6\0\2\320\1\0\1\320\1\0"+
    "\1\277\2\321\1\322\5\334\4\0\1\335\5\336\20\0"+
    "\1\335\3\336\6\0\2\344\1\0\1\344\1\0\1\277"+
    "\2\345\1\346\5\355\4\0\1\356\5\343\20\0\1\356"+
    "\3\343\6\0\2\344\1\0\1\344\1\0\1\304\2\361"+
    "\1\362\5\363\4\0\1\363\5\364\20\0\1\363\3\364"+
    "\6\0\2\344\1\0\1\344\1\0\1\302\2\365\1\366"+
    "\5\363\4\0\1\363\5\364\20\0\1\363\3\364\6\0"+
    "\2\344\1\0\1\344\1\0\1\304\2\361\1\362\5\347"+
    "\4\0\1\350\5\330\20\0\1\350\3\330\6\0\2\344"+
    "\1\0\1\344\1\0\1\304\2\361\1\362\5\355\4\0"+
    "\1\356\5\343\20\0\1\356\3\343\13\0\2\367\62\0"+
    "\1\370\60\0\1\370\61\0\2\332\1\333\5\334\4\0"+
    "\1\335\5\336\20\0\1\335\3\336\6\0\2\320\1\0"+
    "\1\320\1\0\1\336\10\334\4\0\1\335\5\336\20\0"+
    "\1\335\3\336\6\0\2\320\1\0\1\320\1\0\1\336"+
    "\10\334\4\0\1\335\5\371\20\0\1\335\3\371\6\0"+
    "\2\320\1\0\1\320\1\0\1\371\10\372\4\0\1\373"+
    "\5\371\20\0\1\373\3\371\6\0\2\320\1\0\1\320"+
    "\1\0\1\374\2\375\1\376\5\372\4\0\1\373\5\371"+
    "\20\0\1\373\3\371\6\0\2\320\1\0\1\320\1\0"+
    "\1\324\10\323\4\0\1\323\5\324\20\0\1\323\3\324"+
    "\6\0\2\320\1\0\1\320\1\0\1\324\10\323\4\0"+
    "\1\323\5\377\20\0\1\323\3\377\6\0\2\320\1\0"+
    "\1\320\1\0\1\377\10\u0100\4\0\1\u0100\5\377\20\0"+
    "\1\u0100\3\377\6\0\2\320\1\0\1\320\1\0\1\u0101"+
    "\2\u0102\1\u0103\5\u0100\4\0\1\u0100\5\377\20\0\1\u0100"+
    "\3\377\6\0\2\320\1\0\1\320\1\0\1\u0101\2\u0102"+
    "\1\u0103\5\372\4\0\1\373\5\371\20\0\1\373\3\371"+
    "\13\0\11\336\4\0\6\336\20\0\4\336\13\0\11\336"+
    "\4\0\1\336\5\371\20\0\1\336\3\371\13\0\11\371"+
    "\4\0\6\371\20\0\4\371\13\0\11\371\4\0\4\371"+
    "\1\u0104\1\374\20\0\2\371\1\u0104\1\374\13\0\11\374"+
    "\4\0\6\374\20\0\4\374\13\0\11\324\4\0\6\324"+
    "\20\0\4\324\13\0\11\324\4\0\1\324\5\377\20\0"+
    "\1\324\3\377\13\0\11\377\4\0\6\377\20\0\4\377"+
    "\13\0\11\377\4\0\4\377\1\u0105\1\u0101\20\0\2\377"+
    "\1\u0105\1\u0101\13\0\11\u0101\4\0\6\u0101\20\0\4\u0101"+
    "\14\0\2\353\1\354\5\355\4\0\1\356\5\343\20\0"+
    "\1\356\3\343\6\0\2\320\1\0\1\320\1\0\1\343"+
    "\10\341\4\0\1\342\5\343\20\0\1\342\3\343\6\0"+
    "\2\320\1\0\1\320\1\0\1\343\10\341\4\0\1\342"+
    "\5\u0106\20\0\1\342\3\u0106\6\0\2\320\1\0\1\320"+
    "\1\0\1\u0106\10\u0107\4\0\1\u0107\5\u0106\20\0\1\u0107"+
    "\3\u0106\6\0\2\320\1\0\1\320\1\0\1\u0106\10\u0107"+
    "\4\0\1\u0107\3\u0106\1\u0108\1\377\20\0\1\u0107\1\u0106"+
    "\1\u0108\1\377\6\0\2\320\1\0\1\320\1\0\1\330"+
    "\10\327\4\0\1\327\5\330\20\0\1\327\3\330\6\0"+
    "\2\320\1\0\1\320\1\0\1\330\10\327\4\0\1\327"+
    "\5\u0106\20\0\1\327\3\u0106\13\0\11\343\4\0\6\343"+
    "\20\0\4\343\13\0\11\343\4\0\1\343\5\u0106\20\0"+
    "\1\343\3\u0106\13\0\11\u0106\4\0\6\u0106\20\0\4\u0106"+
    "\13\0\11\u0106\4\0\4\u0106\1\u0109\1\u0101\20\0\2\u0106"+
    "\1\u0109\1\u0101\13\0\11\330\4\0\6\330\20\0\4\330"+
    "\13\0\11\330\4\0\1\330\5\u0106\20\0\1\330\3\u0106"+
    "\6\0\2\344\1\0\1\344\1\0\1\343\10\355\4\0"+
    "\1\356\5\343\20\0\1\356\3\343\6\0\2\344\1\0"+
    "\1\344\1\0\1\343\10\355\4\0\1\356\5\u0106\20\0"+
    "\1\356\3\u0106\6\0\2\344\1\0\1\344\1\0\1\u0106"+
    "\10\u010a\4\0\1\u010a\5\u0106\20\0\1\u010a\3\u0106\6\0"+
    "\2\344\1\0\1\344\1\0\1\u0101\2\u010b\1\u010c\5\u010a"+
    "\4\0\1\u010a\5\u0106\20\0\1\u010a\3\u0106\6\0\2\344"+
    "\1\0\1\344\1\0\1\330\10\347\4\0\1\350\5\330"+
    "\20\0\1\350\3\330\6\0\2\344\1\0\1\344\1\0"+
    "\1\330\10\347\4\0\1\350\5\u0106\20\0\1\350\3\u0106"+
    "\13\0\2\u010d\71\0\1\u010e\1\u010f\42\0\2\u0110\1\0"+
    "\1\u0110\1\0\1\374\2\u0111\1\u0112\5\u0113\4\0\1\u0113"+
    "\5\u0114\20\0\1\u0113\3\u0114\6\0\2\u0110\1\0\1\u0110"+
    "\1\0\1\371\2\u0115\1\u0116\5\u0117\4\0\1\u0117\5\u0118"+
    "\20\0\1\u0117\3\u0118\6\0\2\u0110\1\0\1\u0110\1\0"+
    "\1\371\2\u0115\1\u0116\5\u0117\4\0\1\u0117\3\u0118\1\u0119"+
    "\1\u0114\20\0\1\u0117\1\u0118\1\u0119\1\u0114\6\0\2\u0110"+
    "\1\0\1\u0110\2\0\2\u011a\1\u011b\5\u011c\4\0\1\u011d"+
    "\5\u011e\20\0\1\u011d\3\u011e\6\0\2\u0110\1\0\1\u0110"+
    "\1\0\1\336\2\u011f\1\u0120\5\u0121\4\0\1\u0122\5\u0123"+
    "\20\0\1\u0122\3\u0123\6\0\2\u0110\1\0\1\u0110\1\0"+
    "\1\336\2\u011f\1\u0120\5\u0121\4\0\1\u0122\5\u0118\20\0"+
    "\1\u0122\3\u0118\6\0\2\u0124\1\0\1\u0124\1\0\1\374"+
    "\2\u0125\1\u0126\5\u0127\4\0\1\u0128\5\u0118\20\0\1\u0128"+
    "\3\u0118\6\0\2\u0124\1\0\1\u0124\1\0\1\371\2\u0129"+
    "\1\u012a\5\u0127\4\0\1\u0128\5\u0118\20\0\1\u0128\3\u0118"+
    "\6\0\2\u0124\1\0\1\u0124\2\0\2\u012b\1\u012c\5\u012d"+
    "\4\0\1\u012e\5\u0123\20\0\1\u012e\3\u0123\6\0\2\u0124"+
    "\1\0\1\u0124\1\0\1\336\2\u012f\1\u0130\5\u012d\4\0"+
    "\1\u012e\5\u0123\20\0\1\u012e\3\u0123\6\0\2\u0124\1\0"+
    "\1\u0124\1\0\1\336\2\u012f\1\u0130\5\u012d\4\0\1\u012e"+
    "\5\u0118\20\0\1\u012e\3\u0118\6\0\2\u0110\1\0\1\u0110"+
    "\1\0\1\374\2\u0111\1\u0112\5\u011c\4\0\1\u011d\5\u011e"+
    "\20\0\1\u011d\3\u011e\6\0\2\u0124\1\0\1\u0124\1\0"+
    "\1\374\2\u0125\1\u0126\5\u012d\4\0\1\u012e\5\u0123\20\0"+
    "\1\u012e\3\u0123\6\0\2\u0124\1\0\1\u0124\1\0\1\u0101"+
    "\2\u0131\1\u0132\5\u0133\4\0\1\u0133\5\u0134\20\0\1\u0133"+
    "\3\u0134\6\0\2\u0124\1\0\1\u0124\1\0\1\377\2\u0135"+
    "\1\u0136\5\u0133\4\0\1\u0133\5\u0134\20\0\1\u0133\3\u0134"+
    "\6\0\2\u0124\1\0\1\u0124\1\0\1\u0101\2\u0131\1\u0132"+
    "\5\u0127\4\0\1\u0128\5\u0118\20\0\1\u0128\3\u0118\6\0"+
    "\2\u0124\1\0\1\u0124\1\0\1\u0101\2\u0131\1\u0132\5\u012d"+
    "\4\0\1\u012e\5\u0123\20\0\1\u012e\3\u0123\6\0\2\u0124"+
    "\1\0\1\u0124\1\0\1\u0106\2\u0137\1\u0138\5\u0133\4\0"+
    "\1\u0133\5\u0134\20\0\1\u0133\3\u0134\6\0\2\u0124\1\0"+
    "\1\u0124\1\0\1\343\2\u0139\1\u013a\5\u012d\4\0\1\u012e"+
    "\5\u0123\20\0\1\u012e\3\u0123\6\0\2\u0124\1\0\1\u0124"+
    "\1\0\1\343\2\u0139\1\u013a\5\u012d\4\0\1\u012e\5\u0134"+
    "\20\0\1\u012e\3\u0134\13\0\2\u013b\60\0\1\u013c\5\u013d"+
    "\55\0\2\u011a\1\u011b\5\u011c\4\0\1\u011d\5\u011e\20\0"+
    "\1\u011d\3\u011e\6\0\2\u0110\1\0\1\u0110\1\0\1\u011e"+
    "\10\u011c\4\0\1\u011d\5\u011e\20\0\1\u011d\3\u011e\6\0"+
    "\2\u0110\1\0\1\u0110\1\0\1\u011e\10\u011c\4\0\1\u011d"+
    "\5\u013e\20\0\1\u011d\3\u013e\6\0\2\u0110\1\0\1\u0110"+
    "\1\0\1\u013e\10\u013f\4\0\1\u0140\5\u013e\20\0\1\u0140"+
    "\3\u013e\6\0\2\u0110\1\0\1\u0110\1\0\1\u0141\2\u0142"+
    "\1\u0143\5\u013f\4\0\1\u0140\5\u013e\20\0\1\u0140\3\u013e"+
    "\6\0\2\u0110\1\0\1\u0110\1\0\1\u0114\10\u0113\4\0"+
    "\1\u0113\5\u0114\20\0\1\u0113\3\u0114\6\0\2\u0110\1\0"+
    "\1\u0110\1\0\1\u0114\10\u0113\4\0\1\u0113\5\u0144\20\0"+
    "\1\u0113\3\u0144\6\0\2\u0110\1\0\1\u0110\1\0\1\u0144"+
    "\10\u0145\4\0\1\u0145\5\u0144\20\0\1\u0145\3\u0144\6\0"+
    "\2\u0110\1\0\1\u0110\1\0\1\u0146\2\u0147\1\u0148\5\u0145"+
    "\4\0\1\u0145\5\u0144\20\0\1\u0145\3\u0144\6\0\2\u0110"+
    "\1\0\1\u0110\1\0\1\u0146\2\u0147\1\u0148\5\u013f\4\0"+
    "\1\u0140\5\u013e\20\0\1\u0140\3\u013e\13\0\11\u011e\4\0"+
    "\6\u011e\20\0\4\u011e\13\0\11\u011e\4\0\1\u011e\5\u013e"+
    "\20\0\1\u011e\3\u013e\13\0\11\u013e\4\0\6\u013e\20\0"+
    "\4\u013e\13\0\11\u013e\4\0\4\u013e\1\u0149\1\u0141\20\0"+
    "\2\u013e\1\u0149\1\u0141\13\0\11\u0141\4\0\6\u0141\20\0"+
    "\4\u0141\13\0\11\u0114\4\0\6\u0114\20\0\4\u0114\13\0"+
    "\11\u0114\4\0\1\u0114\5\u0144\20\0\1\u0114\3\u0144\13\0"+
    "\11\u0144\4\0\6\u0144\20\0\4\u0144\13\0\11\u0144\4\0"+
    "\4\u0144\1\u014a\1\u0146\20\0\2\u0144\1\u014a\1\u0146\13\0"+
    "\11\u0146\4\0\6\u0146\20\0\4\u0146\14\0\2\u012b\1\u012c"+
    "\5\u012d\4\0\1\u012e\5\u0123\20\0\1\u012e\3\u0123\6\0"+
    "\2\u0110\1\0\1\u0110\1\0\1\u0123\10\u0121\4\0\1\u0122"+
    "\5\u0123\20\0\1\u0122\3\u0123\6\0\2\u0110\1\0\1\u0110"+
    "\1\0\1\u0123\10\u0121\4\0\1\u0122\5\u014b\20\0\1\u0122"+
    "\3\u014b\6\0\2\u0110\1\0\1\u0110\1\0\1\u014b\10\u014c"+
    "\4\0\1\u014c\5\u014b\20\0\1\u014c\3\u014b\6\0\2\u0110"+
    "\1\0\1\u0110\1\0\1\u014b\10\u014c\4\0\1\u014c\3\u014b"+
    "\1\u014d\1\u0144\20\0\1\u014c\1\u014b\1\u014d\1\u0144\6\0"+
    "\2\u0110\1\0\1\u0110\1\0\1\u0118\10\u0117\4\0\1\u0117"+
    "\5\u0118\20\0\1\u0117\3\u0118\6\0\2\u0110\1\0\1\u0110"+
    "\1\0\1\u0118\10\u0117\4\0\1\u0117\5\u014b\20\0\1\u0117"+
    "\3\u014b\13\0\11\u0123\4\0\6\u0123\20\0\4\u0123\13\0"+
    "\11\u0123\4\0\1\u0123\5\u014b\20\0\1\u0123\3\u014b\13\0"+
    "\11\u014b\4\0\6\u014b\20\0\4\u014b\13\0\11\u014b\4\0"+
    "\4\u014b\1\u014e\1\u0146\20\0\2\u014b\1\u014e\1\u0146\13\0"+
    "\11\u0118\4\0\6\u0118\20\0\4\u0118\13\0\11\u0118\4\0"+
    "\1\u0118\5\u014b\20\0\1\u0118\3\u014b\6\0\2\u0124\1\0"+
    "\1\u0124\1\0\1\u0123\10\u012d\4\0\1\u012e\5\u0123\20\0"+
    "\1\u012e\3\u0123\6\0\2\u0124\1\0\1\u0124\1\0\1\u0123"+
    "\10\u012d\4\0\1\u012e\5\u014b\20\0\1\u012e\3\u014b\6\0"+
    "\2\u0124\1\0\1\u0124\1\0\1\u014b\10\u014f\4\0\1\u014f"+
    "\5\u014b\20\0\1\u014f\3\u014b\6\0\2\u0124\1\0\1\u0124"+
    "\1\0\1\u0146\2\u0150\1\u0151\5\u014f\4\0\1\u014f\5\u014b"+
    "\20\0\1\u014f\3\u014b\6\0\2\u0124\1\0\1\u0124\1\0"+
    "\1\u0118\10\u0127\4\0\1\u0128\5\u0118\20\0\1\u0128\3\u0118"+
    "\6\0\2\u0124\1\0\1\u0124\1\0\1\u0118\10\u0127\4\0"+
    "\1\u0128\5\u014b\20\0\1\u0128\3\u014b\6\0\2\u0124\1\0"+
    "\1\u0124\1\0\1\u0134\10\u0133\4\0\1\u0133\5\u0134\20\0"+
    "\1\u0133\3\u0134\6\0\2\u0124\1\0\1\u0124\1\0\1\u0134"+
    "\10\u0133\4\0\1\u0133\5\u014b\20\0\1\u0133\3\u014b\13\0"+
    "\11\u0134\4\0\6\u0134\20\0\4\u0134\13\0\11\u0134\4\0"+
    "\1\u0134\5\u014b\20\0\1\u0134\3\u014b\13\0\2\315\10\0"+
    "\1\225\56\0\2\u0152\51\0\11\u0152\44\0\2\u0153\1\0"+
    "\1\u0153\1\0\1\u0141\2\u0154\1\u0155\5\u0156\1\0\1\u0157"+
    "\2\0\1\u0156\5\u0158\20\0\1\u0156\3\u0158\6\0\2\u0153"+
    "\1\0\1\u0153\1\0\1\u013e\2\u0159\1\u015a\5\u015b\1\0"+
    "\1\u0157\2\0\1\u015b\5\u015c\20\0\1\u015b\3\u015c\6\0"+
    "\2\u0153\1\0\1\u0153\1\0\1\u013e\2\u0159\1\u015a\5\u015b"+
    "\1\0\1\u0157\2\0\1\u015b\3\u015c\1\u015d\1\u0158\20\0"+
    "\1\u015b\1\u015c\1\u015d\1\u0158\6\0\2\u0153\1\0\1\u0153"+
    "\2\0\2\332\1\333\5\334\1\0\1\u0157\2\0\1\335"+
    "\5\336\20\0\1\335\3\336\6\0\2\u0153\1\0\1\u0153"+
    "\1\0\1\u011e\2\u015e\1\u015f\5\u0160\1\0\1\u0157\2\0"+
    "\1\u0161\5\u0123\20\0\1\u0161\3\u0123\6\0\2\u0153\1\0"+
    "\1\u0153\1\0\1\u011e\2\u015e\1\u015f\5\u0160\1\0\1\u0157"+
    "\2\0\1\u0161\5\u015c\20\0\1\u0161\3\u015c\6\0\2\u0162"+
    "\1\0\1\u0162\1\0\1\u0141\2\u0163\1\u0164\5\u0165\1\0"+
    "\1\u0157\2\0\1\u0166\5\u015c\20\0\1\u0166\3\u015c\6\0"+
    "\2\u0162\1\0\1\u0162\1\0\1\u013e\2\u0167\1\u0168\5\u0165"+
    "\1\0\1\u0157\2\0\1\u0166\5\u015c\20\0\1\u0166\3\u015c"+
    "\6\0\2\u0162\1\0\1\u0162\2\0\2\u012b\1\u012c\5\u012d"+
    "\1\0\1\u0157\2\0\1\u012e\5\u0123\20\0\1\u012e\3\u0123"+
    "\6\0\2\u0162\1\0\1\u0162\1\0\1\u011e\2\u0169\1\u016a"+
    "\5\u012d\1\0\1\u0157\2\0\1\u012e\5\u0123\20\0\1\u012e"+
    "\3\u0123\6\0\2\u0162\1\0\1\u0162\1\0\1\u011e\2\u0169"+
    "\1\u016a\5\u012d\1\0\1\u0157\2\0\1\u012e\5\u015c\20\0"+
    "\1\u012e\3\u015c\6\0\2\u0153\1\0\1\u0153\1\0\1\u0141"+
    "\2\u0154\1\u0155\5\334\1\0\1\u0157\2\0\1\335\5\336"+
    "\20\0\1\335\3\336\6\0\2\u0162\1\0\1\u0162\1\0"+
    "\1\u0141\2\u0163\1\u0164\5\u012d\1\0\1\u0157\2\0\1\u012e"+
    "\5\u0123\20\0\1\u012e\3\u0123\6\0\2\u0162\1\0\1\u0162"+
    "\1\0\1\u0146\2\u0150\1\u0151\5\u014f\1\0\1\u0157\2\0"+
    "\1\u014f\5\u014b\20\0\1\u014f\3\u014b\6\0\2\u0162\1\0"+
    "\1\u0162\1\0\1\u0144\2\u016b\1\u016c\5\u014f\1\0\1\u0157"+
    "\2\0\1\u014f\5\u014b\20\0\1\u014f\3\u014b\6\0\2\u0162"+
    "\1\0\1\u0162\1\0\1\u0146\2\u0150\1\u0151\5\u0165\1\0"+
    "\1\u0157\2\0\1\u0166\5\u015c\20\0\1\u0166\3\u015c\6\0"+
    "\2\u0162\1\0\1\u0162\1\0\1\u0146\2\u0150\1\u0151\5\u012d"+
    "\1\0\1\u0157\2\0\1\u012e\5\u0123\20\0\1\u012e\3\u0123"+
    "\6\0\2\u0162\1\0\1\u0162\1\0\1\u014b\10\u014f\1\0"+
    "\1\u0157\2\0\1\u014f\5\u014b\20\0\1\u014f\3\u014b\6\0"+
    "\2\u0162\1\0\1\u0162\1\0\1\u0123\10\u012d\1\0\1\u0157"+
    "\2\0\1\u012e\5\u0123\20\0\1\u012e\3\u0123\6\0\2\u0162"+
    "\1\0\1\u0162\1\0\1\u0123\10\u012d\1\0\1\u0157\2\0"+
    "\1\u012e\5\u014b\20\0\1\u012e\3\u014b\24\0\1\u016d\51\0"+
    "\2\332\1\333\5\334\1\0\1\u0157\2\0\1\335\5\336"+
    "\20\0\1\335\3\336\6\0\2\u0153\1\0\1\u0153\1\0"+
    "\1\336\10\334\1\0\1\u0157\2\0\1\335\5\336\20\0"+
    "\1\335\3\336\6\0\2\u0153\1\0\1\u0153\1\0\1\336"+
    "\10\334\1\0\1\u0157\2\0\1\335\5\371\20\0\1\335"+
    "\3\371\6\0\2\u0153\1\0\1\u0153\1\0\1\371\10\372"+
    "\1\0\1\u0157\2\0\1\373\5\371\20\0\1\373\3\371"+
    "\6\0\2\u0153\1\0\1\u0153\1\0\1\374\2\375\1\376"+
    "\5\372\1\0\1\u0157\2\0\1\373\5\371\20\0\1\373"+
    "\3\371\6\0\2\u0153\1\0\1\u0153\1\0\1\u0158\10\u0156"+
    "\1\0\1\u0157\2\0\1\u0156\5\u0158\20\0\1\u0156\3\u0158"+
    "\6\0\2\u0153\1\0\1\u0153\1\0\1\u0158\10\u0156\1\0"+
    "\1\u0157\2\0\1\u0156\5\u016e\20\0\1\u0156\3\u016e\6\0"+
    "\2\u0153\1\0\1\u0153\1\0\1\u016e\10\u016f\1\0\1\u0157"+
    "\2\0\1\u016f\5\u016e\20\0\1\u016f\3\u016e\6\0\2\u0153"+
    "\1\0\1\u0153\1\0\1\u0146\2\u0170\1\u0171\5\u016f\1\0"+
    "\1\u0157\2\0\1\u016f\5\u016e\20\0\1\u016f\3\u016e\6\0"+
    "\2\u0153\1\0\1\u0153\1\0\1\u0146\2\u0170\1\u0171\5\372"+
    "\1\0\1\u0157\2\0\1\373\5\371\20\0\1\373\3\371"+
    "\13\0\11\u0158\4\0\6\u0158\20\0\4\u0158\13\0\11\u0158"+
    "\4\0\1\u0158\5\u016e\20\0\1\u0158\3\u016e\13\0\11\u016e"+
    "\4\0\6\u016e\20\0\4\u016e\13\0\11\u016e\4\0\4\u016e"+
    "\1\u0172\1\u0146\20\0\2\u016e\1\u0172\1\u0146\14\0\2\u012b"+
    "\1\u012c\5\u012d\1\0\1\u0157\2\0\1\u012e\5\u0123\20\0"+
    "\1\u012e\3\u0123\6\0\2\u0153\1\0\1\u0153\1\0\1\u0123"+
    "\10\u0160\1\0\1\u0157\2\0\1\u0161\5\u0123\20\0\1\u0161"+
    "\3\u0123\6\0\2\u0153\1\0\1\u0153\1\0\1\u0123\10\u0160"+
    "\1\0\1\u0157\2\0\1\u0161\5\u014b\20\0\1\u0161\3\u014b"+
    "\6\0\2\u0153\1\0\1\u0153\1\0\1\u014b\10\u0173\1\0"+
    "\1\u0157\2\0\1\u0173\5\u014b\20\0\1\u0173\3\u014b\6\0"+
    "\2\u0153\1\0\1\u0153\1\0\1\u014b\10\u0173\1\0\1\u0157"+
    "\2\0\1\u0173\3\u014b\1\u0174\1\u016e\20\0\1\u0173\1\u014b"+
    "\1\u0174\1\u016e\6\0\2\u0153\1\0\1\u0153\1\0\1\u015c"+
    "\10\u015b\1\0\1\u0157\2\0\1\u015b\5\u015c\20\0\1\u015b"+
    "\3\u015c\6\0\2\u0153\1\0\1\u0153\1\0\1\u015c\10\u015b"+
    "\1\0\1\u0157\2\0\1\u015b\5\u014b\20\0\1\u015b\3\u014b"+
    "\13\0\11\u015c\4\0\6\u015c\20\0\4\u015c\13\0\11\u015c"+
    "\4\0\1\u015c\5\u014b\20\0\1\u015c\3\u014b\6\0\2\u0162"+
    "\1\0\1\u0162\1\0\1\u015c\10\u0165\1\0\1\u0157\2\0"+
    "\1\u0166\5\u015c\20\0\1\u0166\3\u015c\6\0\2\u0162\1\0"+
    "\1\u0162\1\0\1\u015c\10\u0165\1\0\1\u0157\2\0\1\u0166"+
    "\5\u014b\20\0\1\u0166\3\u014b\13\0\5\u0175\50\0\2\u0162"+
    "\1\0\1\u0162\1\0\1\374\2\u0125\1\u0126\5\u0127\1\0"+
    "\1\u0157\2\0\1\u0128\5\u0118\20\0\1\u0128\3\u0118\6\0"+
    "\2\u0162\1\0\1\u0162\1\0\1\371\2\u0129\1\u012a\5\u0127"+
    "\1\0\1\u0157\2\0\1\u0128\5\u0118\20\0\1\u0128\3\u0118"+
    "\6\0\2\u0162\1\0\1\u0162\1\0\1\336\2\u012f\1\u0130"+
    "\5\u012d\1\0\1\u0157\2\0\1\u012e\5\u0123\20\0\1\u012e"+
    "\3\u0123\6\0\2\u0162\1\0\1\u0162\1\0\1\336\2\u012f"+
    "\1\u0130\5\u012d\1\0\1\u0157\2\0\1\u012e\5\u0118\20\0"+
    "\1\u012e\3\u0118\6\0\2\u0162\1\0\1\u0162\1\0\1\374"+
    "\2\u0125\1\u0126\5\u012d\1\0\1\u0157\2\0\1\u012e\5\u0123"+
    "\20\0\1\u012e\3\u0123\6\0\2\u0162\1\0\1\u0162\1\0"+
    "\1\u016e\2\u0176\1\u0177\5\u014f\1\0\1\u0157\2\0\1\u014f"+
    "\5\u014b\20\0\1\u014f\3\u014b\6\0\2\u0162\1\0\1\u0162"+
    "\1\0\1\u0146\2\u0150\1\u0151\5\u0127\1\0\1\u0157\2\0"+
    "\1\u0128\5\u0118\20\0\1\u0128\3\u0118\13\0\11\u0178\44\0"+
    "\2\u0162\1\0\1\u0162\1\0\1\u0118\10\u0127\1\0\1\u0157"+
    "\2\0\1\u0128\5\u0118\20\0\1\u0128\3\u0118\6\0\2\u0162"+
    "\1\0\1\u0162\1\0\1\u0118\10\u0127\1\0\1\u0157\2\0"+
    "\1\u0128\5\u014b\20\0\1\u0128\3\u014b\25\0\1\u010f\35\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17850];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\2\1\2\11\1\1\1\11\1\1\1\11"+
    "\11\1\2\11\35\0\1\11\1\0\1\11\2\0\3\11"+
    "\1\0\1\11\35\0\1\11\1\0\1\11\17\0\1\11"+
    "\47\0\1\11\171\0\1\11\107\0\1\11\41\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[376];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Unrecognized character: " + yytext());
            }
            // fall through
          case 22: break;
          case 2:
            { ;
            }
            // fall through
          case 23: break;
          case 3:
            { return new Symbol(sym.V);
            }
            // fall through
          case 24: break;
          case 4:
            { return new Symbol(sym.INT, Integer.parseInt(yytext()));
            }
            // fall through
          case 25: break;
          case 5:
            { return new Symbol(sym.PV);
            }
            // fall through
          case 26: break;
          case 6:
            { return new Symbol(sym.EQ);
            }
            // fall through
          case 27: break;
          case 7:
            { return new Symbol(sym.MAX);
            }
            // fall through
          case 28: break;
          case 8:
            { return new Symbol(sym.QA);
            }
            // fall through
          case 29: break;
          case 9:
            { return new Symbol(sym.QC);
            }
            // fall through
          case 30: break;
          case 10:
            { return new Symbol(sym.MUL);
            }
            // fall through
          case 31: break;
          case 11:
            { return new Symbol(sym.SUM);
            }
            // fall through
          case 32: break;
          case 12:
            { return new Symbol(sym.SEP);
            }
            // fall through
          case 33: break;
          case 13:
            { return new Symbol(sym.COND);
            }
            // fall through
          case 34: break;
          case 14:
            { return new Symbol(sym.DONE);
            }
            // fall through
          case 35: break;
          case 15:
            { return new Symbol(sym.IN);
            }
            // fall through
          case 36: break;
          case 16:
            { return new Symbol(sym.S);
            }
            // fall through
          case 37: break;
          case 17:
            { return new Symbol(sym.H);
            }
            // fall through
          case 38: break;
          case 18:
            { return new Symbol(sym.UPDATE);
            }
            // fall through
          case 39: break;
          case 19:
            { return new Symbol(sym.TOK3);
            }
            // fall through
          case 40: break;
          case 20:
            { return new Symbol(sym.TOK1);
            }
            // fall through
          case 41: break;
          case 21:
            { return new Symbol(sym.TOK2);
            }
            // fall through
          case 42: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
