
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\002\004\000\002\002\007\000\002\012" +
    "\005\000\002\012\006\000\002\012\007\000\002\012\006" +
    "\000\002\012\006\000\002\012\005\000\002\012\005\000" +
    "\002\011\004\000\002\011\003\000\002\007\003\000\002" +
    "\010\004\000\002\010\005\000\002\006\010\000\002\016" +
    "\005\000\002\016\003\000\002\015\004\000\002\005\003" +
    "\000\002\004\005\000\002\004\004\000\002\003\014\000" +
    "\002\014\005\000\002\014\003\000\002\013\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\006\010\005\011\004\001\002\000\006\010" +
    "\005\011\075\001\002\000\010\010\ufff7\011\ufff7\015\ufff7" +
    "\001\002\000\006\010\067\011\066\001\002\000\004\002" +
    "\065\001\002\000\004\015\011\001\002\000\004\021\012" +
    "\001\002\000\004\014\053\001\002\000\004\015\021\001" +
    "\002\000\006\015\ufff6\021\012\001\002\000\004\021\012" +
    "\001\002\000\004\021\012\001\002\000\006\015\ufff4\021" +
    "\ufff4\001\002\000\006\015\ufff5\021\ufff5\001\002\000\004" +
    "\012\024\001\002\000\006\002\uffef\012\024\001\002\000" +
    "\004\002\000\001\002\000\004\016\027\001\002\000\004" +
    "\012\024\001\002\000\006\002\uffed\012\uffed\001\002\000" +
    "\004\006\030\001\002\000\004\017\031\001\002\000\004" +
    "\006\032\001\002\000\004\016\033\001\002\000\004\013" +
    "\034\001\002\000\004\007\035\001\002\000\004\020\040" +
    "\001\002\000\006\004\047\005\046\001\002\000\006\004" +
    "\uffea\005\uffea\001\002\000\004\006\041\001\002\000\004" +
    "\016\042\001\002\000\004\006\043\001\002\000\004\021" +
    "\044\001\002\000\004\014\045\001\002\000\006\004\uffe9" +
    "\005\uffe9\001\002\000\004\020\040\001\002\000\006\002" +
    "\uffec\012\uffec\001\002\000\006\004\uffeb\005\uffeb\001\002" +
    "\000\004\012\024\001\002\000\006\002\uffee\012\uffee\001" +
    "\002\000\004\014\054\001\002\000\004\006\055\001\002" +
    "\000\004\020\060\001\002\000\006\004\063\005\062\001" +
    "\002\000\006\004\ufff1\005\ufff1\001\002\000\004\021\061" +
    "\001\002\000\006\004\ufff0\005\ufff0\001\002\000\004\020" +
    "\060\001\002\000\006\015\ufff3\021\ufff3\001\002\000\006" +
    "\004\ufff2\005\ufff2\001\002\000\004\002\001\001\002\000" +
    "\006\010\005\011\070\001\002\000\010\010\ufff8\011\ufff8" +
    "\015\ufff8\001\002\000\006\010\005\015\uffff\001\002\000" +
    "\006\010\067\011\072\001\002\000\006\010\005\015\ufffe" +
    "\001\002\000\006\010\067\015\ufffd\001\002\000\006\010" +
    "\067\015\ufffc\001\002\000\004\010\005\001\002\000\006" +
    "\010\067\011\077\001\002\000\006\010\005\015\ufff9\001" +
    "\002\000\006\010\067\015\ufffb\001\002\000\006\010\067" +
    "\015\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\077\000\010\002\006\011\005\012\007\001\001\000" +
    "\004\011\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\006\014\007" +
    "\012\010\013\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\006\017\001\001\000\004\006\015\001\001\000" +
    "\004\006\016\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\003\024\004\021\005\022\001\001\000\004\003" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\003\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\036\014\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\047\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\003\051\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\056\016\055\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\070\001\001\000\002\001\001" +
    "\000\004\011\073\001\001\000\002\001\001\000\004\011" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\011\100\001\001\000\002\001\001\000\004\011\077\001" +
    "\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, Double>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, Double> map = new HashMap();

    public class Adv {
        private String user;
        private Integer time;
        private Double off;

        Adv(String user, Integer time, Double off) {
            this.user = user;
            this.time = time;
            this.off = off;
        }

        public String getUser() {
            return this.user;
        }

        public Integer getTime() {
            return this.time;
        }

        public Double getOff() {
            return this.off;
        }
    }

    public class User {
        private String user;
        private Double money;

        User(String user, Double money) {
            this.user = user;
            this.money = money;
        }

        public String getUser() {
            return this.user;
        }

        public Double getMoney() {
            return this.money;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP currency_sec SEP auction_sec 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok1s TOK2 TOK2 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok1s TOK2 tok1s TOK2 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tok1s TOK2 tok1s TOK2 tok1s 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= tok1s TOK2 TOK2 tok1s 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= TOK2 tok1s TOK2 tok1s 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= TOK2 TOK2 tok1s 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= TOK2 tok1s TOK2 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // currency_sec ::= curr_list 
            { parser.Tree.reduce(1,"currency_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("currency_sec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // curr_list ::= curr_list curr 
            { parser.Tree.reduce(2,"curr_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("curr_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // curr_list ::= curr curr curr 
            { parser.Tree.reduce(3,"curr_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("curr_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // curr ::= DOUBLE STRINGS STRINGS DP user_list PV 
            { parser.Tree.reduce(6,"curr",0);
              Object RESULT =null;
		int rateleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int rateright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double rate = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<User> list = (ArrayList<User>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double res = 0.0;
    for(User us: list){
        res = rate * us.getMoney();
        parser.map.put(us.getUser(), res);
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("curr",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // user_list ::= user_list V user 
            { parser.Tree.reduce(3,"user_list",0);
              ArrayList<User> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<User> list = (ArrayList<User>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		User us = (User)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(us);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // user_list ::= user 
            { parser.Tree.reduce(1,"user_list",0);
              ArrayList<User> RESULT =null;
		int usleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int usright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		User us = (User)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<User> list = new ArrayList();
    list.add(us);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // user ::= USER DOUBLE 
            { parser.Tree.reduce(2,"user",0);
              User RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int moneyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int moneyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double money = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    User us = new User(code, money);
    RESULT = us;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("user",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // auction_sec ::= auction_list 
            { parser.Tree.reduce(1,"auction_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auction_sec",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // auction_list ::= auction_list auc auc 
            { parser.Tree.reduce(3,"auction_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auction_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // auction_list ::= auc auc 
            { parser.Tree.reduce(2,"auction_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auction_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // auc ::= AUC INT DP STR DP INT MIN ARROW advance_list PV 
            { parser.Tree.reduce(10,"auc",1);
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer time = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Adv> list = (ArrayList<Adv>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println("Auction "+num);
    Double auc = 0.0;
    Double max = 0.0;
    String usermax = new String();
    for(Adv adv: list){
        Double money = parser.map.get(adv.getUser());
        if(adv.getOff() > auc){
            auc = adv.getOff();
            if (auc > max) {
                max = auc;
                usermax = adv.getUser();
            }
            System.out.println(adv.getUser()+": New auction price "+auc+" euro");
        }
        else {
            System.out.println(adv.getUser()+": Error, advance less than the current auction value");
            if(adv.getTime() > time){
                System.out.println(adv.getUser()+": Error, advance out of time");
            }
        
            if(money < auc) {
                System.out.println(adv.getUser()+": Error, available only "+money+" euro");
            }
        }
    }
    System.out.println("Winner is "+usermax+" price "+max+" euro");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("auc",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // advance_list ::= advance_list V advance 
            { parser.Tree.reduce(3,"advance_list",0);
              ArrayList<Adv> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Adv> list = (ArrayList<Adv>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int advleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int advright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Adv adv = (Adv)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(adv);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("advance_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // advance_list ::= advance 
            { parser.Tree.reduce(1,"advance_list",0);
              ArrayList<Adv> RESULT =null;
		int advleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int advright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Adv adv = (Adv)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Adv> list = new ArrayList();
    list.add(adv);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("advance_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // advance ::= USER DP INT DP DOUBLE STRINGS 
            { parser.Tree.reduce(6,"advance",0);
              Adv RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer time = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int offleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int offright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double off = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Adv adv = new Adv(code, time, off);
    RESULT = adv;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("advance",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
