// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\7\0\1\6\1\7\1\10\1\11\1\12\1\0"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\2\0\1\27\2\0\1\30"+
    "\26\31\2\32\1\31\6\0\1\33\1\31\1\34\1\35"+
    "\1\36\3\31\1\37\2\31\1\40\1\41\1\42\1\43"+
    "\2\31\1\44\1\45\1\46\1\47\5\31\12\0\1\3"+
    "\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\2\1\7\4\1\5"+
    "\1\6\7\1\1\0\1\7\4\0\1\10\1\11\7\0"+
    "\20\4\14\0\1\12\5\0\1\4\2\0\4\4\5\0"+
    "\1\13\17\0\1\4\11\0\1\14\1\0\1\15\27\0"+
    "\1\16\21\0\1\17\1\14\4\0\3\20";

  private static int [] zzUnpackAction() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\50\0\50\0\120\0\170\0\240\0\310\0\50"+
    "\0\360\0\u0118\0\u0140\0\u0168\0\u0190\0\u01b8\0\u01e0\0\u0208"+
    "\0\u0230\0\50\0\50\0\u0258\0\u0280\0\u02a8\0\u02d0\0\u02f8"+
    "\0\u0320\0\u0348\0\170\0\50\0\u0370\0\u0398\0\u03c0\0\u03e8"+
    "\0\50\0\u0118\0\u0410\0\u0438\0\u0460\0\u0488\0\u04b0\0\u04d8"+
    "\0\u0500\0\u0528\0\u0550\0\u0578\0\u05a0\0\u05c8\0\u05f0\0\u0618"+
    "\0\u0640\0\u0668\0\u0690\0\u06b8\0\u06e0\0\u0708\0\u0730\0\u0758"+
    "\0\u0780\0\u07a8\0\u07d0\0\u07f8\0\u0820\0\u0848\0\u0870\0\u0898"+
    "\0\u08c0\0\u08e8\0\u0910\0\u0938\0\u0960\0\50\0\u0988\0\u09b0"+
    "\0\u09d8\0\u0a00\0\u0a28\0\u0a50\0\u0a78\0\u0aa0\0\u0ac8\0\u0af0"+
    "\0\u0b18\0\u0b40\0\u0b68\0\u0b90\0\u0bb8\0\u0be0\0\u0c08\0\u0b68"+
    "\0\u0c30\0\u0c58\0\u0c80\0\u0ca8\0\u0cd0\0\u0cf8\0\u0d20\0\u0d48"+
    "\0\u0d70\0\u0d98\0\u0dc0\0\u0de8\0\u0e10\0\u0e38\0\u0e60\0\u0e88"+
    "\0\u0eb0\0\u0ed8\0\u0f00\0\u0f28\0\u0f50\0\u0f78\0\u0fa0\0\u0fc8"+
    "\0\u0ff0\0\u07a8\0\u1018\0\50\0\u1040\0\u1068\0\u1090\0\u10b8"+
    "\0\u10e0\0\u1108\0\u1130\0\u1158\0\u1180\0\u11a8\0\u11d0\0\u11f8"+
    "\0\u1220\0\u1248\0\u1270\0\u1298\0\u12c0\0\u12e8\0\u1310\0\u1338"+
    "\0\u1360\0\u1388\0\u13b0\0\50\0\u13d8\0\u1400\0\u1428\0\u1450"+
    "\0\u1478\0\u14a0\0\u14c8\0\u14f0\0\u1518\0\u1540\0\u1568\0\u1590"+
    "\0\u15b8\0\u15e0\0\u1608\0\u1630\0\u1658\0\u0b68\0\u0b68\0\u1680"+
    "\0\u16a8\0\u16d0\0\u16f8\0\u16f8\0\u1720\0\50";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\16"+
    "\1\17\1\16\1\20\1\21\1\22\1\23\1\2\1\24"+
    "\1\25\1\26\2\25\1\27\1\30\2\25\1\31\3\25"+
    "\1\32\2\25\52\0\1\3\45\0\5\33\1\34\42\33"+
    "\6\0\1\35\55\0\11\36\37\0\1\37\10\40\2\0"+
    "\1\41\33\0\12\42\34\0\1\43\1\42\1\44\1\45"+
    "\1\46\1\45\1\46\1\45\1\46\1\45\1\47\1\50"+
    "\5\0\1\51\27\0\1\42\1\52\1\53\1\52\1\53"+
    "\1\52\1\53\1\52\1\53\1\52\1\53\34\0\1\43"+
    "\1\42\1\54\1\55\1\56\1\57\1\60\1\61\1\60"+
    "\1\61\1\60\1\62\5\0\1\51\27\0\1\42\1\63"+
    "\1\21\1\63\1\21\1\63\1\21\1\63\1\21\1\63"+
    "\1\21\34\0\1\43\1\42\1\60\1\61\1\60\1\61"+
    "\1\60\1\61\1\60\1\61\1\60\1\62\5\0\1\51"+
    "\26\0\1\43\1\42\1\60\1\61\1\64\1\65\1\66"+
    "\1\65\1\66\1\65\1\66\1\67\5\0\1\51\27\0"+
    "\1\42\1\70\1\71\1\70\1\71\1\70\1\71\1\70"+
    "\1\71\1\70\1\71\53\0\17\72\1\73\30\0\20\72"+
    "\30\0\2\72\1\74\15\72\30\0\13\72\1\75\4\72"+
    "\30\0\17\72\1\76\30\0\7\72\1\77\10\72\30\0"+
    "\16\72\1\100\1\72\6\0\1\101\53\0\1\42\12\36"+
    "\35\0\1\42\1\102\1\36\1\102\1\40\1\103\1\40"+
    "\1\103\1\40\1\103\1\40\35\0\1\42\1\102\1\36"+
    "\1\102\1\36\1\102\1\36\1\102\1\36\1\102\1\36"+
    "\37\0\1\104\10\105\51\0\1\106\34\0\1\107\1\105"+
    "\1\107\1\105\1\107\1\105\1\107\1\105\1\107\1\105"+
    "\36\0\1\107\1\105\1\107\1\105\1\107\1\105\1\107"+
    "\1\105\1\107\1\105\1\0\1\106\34\0\1\107\1\105"+
    "\1\110\1\0\1\44\1\0\1\44\1\0\1\44\1\0"+
    "\1\111\1\106\34\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\1\112\54\0\1\113"+
    "\26\0\1\43\1\42\1\114\1\65\1\66\1\65\1\66"+
    "\1\65\1\66\1\65\1\66\1\67\1\112\4\0\1\51"+
    "\27\0\1\42\1\70\1\71\1\70\1\71\1\70\1\71"+
    "\1\70\1\71\1\70\1\71\1\112\33\0\1\43\1\42"+
    "\1\114\1\65\1\66\1\65\1\66\1\65\1\66\1\65"+
    "\1\66\1\67\1\112\1\106\3\0\1\51\27\0\1\42"+
    "\1\114\1\67\1\114\1\67\1\114\1\67\1\114\1\67"+
    "\1\114\1\67\1\115\33\0\1\43\1\42\1\114\1\65"+
    "\1\66\1\65\1\66\1\65\1\66\1\65\1\66\1\67"+
    "\1\115\1\106\3\0\1\51\27\0\1\42\1\114\1\67"+
    "\1\114\1\67\1\114\1\67\1\114\1\67\1\114\1\67"+
    "\1\116\33\0\1\43\1\42\1\114\1\65\1\66\1\65"+
    "\1\66\1\65\1\66\1\65\1\66\1\67\1\0\1\106"+
    "\3\0\1\51\27\0\1\42\1\114\1\67\1\114\1\67"+
    "\1\114\1\67\1\114\1\67\1\114\1\67\35\0\1\42"+
    "\1\114\1\71\1\114\1\71\1\114\1\71\1\114\1\71"+
    "\1\114\1\71\34\0\1\43\1\42\1\114\1\65\1\66"+
    "\1\65\1\66\1\65\1\66\1\65\1\66\1\67\5\0"+
    "\1\51\26\0\1\43\1\42\1\114\1\65\1\66\1\65"+
    "\1\66\1\65\1\117\1\65\1\120\1\67\1\0\1\106"+
    "\3\0\1\51\27\0\1\42\1\121\1\67\1\121\1\67"+
    "\1\121\1\67\1\121\1\67\1\121\1\67\34\0\1\43"+
    "\1\42\1\121\1\65\1\117\1\65\1\117\1\65\1\117"+
    "\1\65\1\120\1\67\1\0\1\106\3\0\1\51\27\0"+
    "\1\42\1\122\1\71\1\122\1\71\1\122\1\71\1\122"+
    "\1\71\1\122\1\71\34\0\1\43\1\42\1\122\1\65"+
    "\1\117\1\65\1\117\1\65\1\117\1\65\1\120\1\67"+
    "\5\0\1\51\27\0\1\42\12\71\53\0\20\123\30\0"+
    "\4\123\1\124\13\123\30\0\2\123\1\125\15\123\30\0"+
    "\10\123\1\126\7\123\30\0\14\123\1\127\3\123\30\0"+
    "\12\123\1\130\5\123\30\0\6\123\1\131\11\123\6\0"+
    "\1\132\52\0\1\43\1\42\1\133\1\134\1\135\1\134"+
    "\1\135\1\134\1\135\1\134\1\136\1\137\5\0\1\51"+
    "\26\0\1\43\1\42\1\140\1\134\1\141\1\134\1\141"+
    "\1\134\1\141\1\134\1\141\1\137\5\0\1\51\30\0"+
    "\1\44\1\0\1\44\1\105\1\107\1\105\1\107\1\105"+
    "\1\107\1\105\36\0\1\44\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\37\0\1\44\1\0\1\44"+
    "\1\0\1\44\1\0\1\44\1\0\1\44\2\0\1\106"+
    "\34\0\1\44\1\0\1\44\1\0\1\44\6\0\1\106"+
    "\37\0\1\142\2\143\42\0\6\143\61\0\1\144\26\0"+
    "\1\43\1\42\1\122\1\65\1\117\1\65\1\117\1\65"+
    "\1\117\1\65\1\120\1\67\1\0\1\106\3\0\1\51"+
    "\30\0\2\143\1\145\3\146\42\0\2\143\1\147\44\0"+
    "\1\42\1\121\1\67\1\121\1\67\1\121\1\67\1\121"+
    "\1\67\1\121\1\67\1\0\1\106\33\0\1\42\1\121"+
    "\1\67\1\150\1\71\1\122\1\71\1\122\1\71\1\122"+
    "\1\71\1\0\1\106\33\0\1\42\1\122\1\71\1\122"+
    "\1\71\1\122\1\71\1\122\1\71\1\122\1\71\1\0"+
    "\1\106\33\0\1\42\12\71\1\0\1\106\33\0\1\151"+
    "\15\0\20\72\12\0\1\151\15\0\16\72\1\152\1\72"+
    "\11\0\1\153\1\151\1\154\1\155\1\156\1\155\1\156"+
    "\1\155\1\156\1\155\1\157\1\160\3\0\2\72\1\74"+
    "\15\72\12\0\1\151\15\0\10\72\1\161\7\72\12\0"+
    "\1\151\15\0\13\72\1\162\4\72\12\0\1\151\15\0"+
    "\14\72\1\163\3\72\6\0\1\164\53\0\1\42\12\36"+
    "\1\0\1\106\33\0\1\42\1\165\1\137\1\165\1\137"+
    "\1\165\1\137\1\165\1\137\1\165\1\137\35\0\1\42"+
    "\1\165\1\137\1\165\1\137\1\165\1\137\1\165\1\137"+
    "\1\165\1\137\1\0\1\106\33\0\1\42\1\165\1\137"+
    "\1\166\1\36\1\133\1\36\1\133\1\36\1\133\1\36"+
    "\1\0\1\106\33\0\1\42\1\133\1\36\1\133\1\36"+
    "\1\133\1\36\1\133\1\36\1\133\1\36\34\0\1\43"+
    "\1\42\1\133\1\134\1\135\1\134\1\135\1\134\1\135"+
    "\1\134\1\136\1\137\1\0\1\106\3\0\1\51\26\0"+
    "\1\43\1\42\1\165\1\134\1\135\1\134\1\135\1\134"+
    "\1\135\1\134\1\136\1\137\1\0\1\106\3\0\1\51"+
    "\31\0\1\167\10\170\36\0\12\170\34\0\1\43\1\0"+
    "\1\44\1\45\1\46\1\45\1\46\1\45\1\46\1\45"+
    "\1\171\1\105\5\0\1\113\30\0\2\170\10\172\36\0"+
    "\12\172\36\0\1\170\1\173\45\0\1\42\1\122\1\71"+
    "\1\122\1\71\1\122\5\71\1\0\1\106\35\0\1\174"+
    "\10\175\53\0\7\123\1\176\10\123\14\0\1\177\10\160"+
    "\34\0\1\43\1\0\1\44\1\45\1\46\1\45\1\46"+
    "\1\45\1\46\1\45\1\171\1\105\5\0\1\51\30\0"+
    "\1\200\1\160\1\200\1\160\1\200\1\160\1\200\1\160"+
    "\1\200\1\160\34\0\1\43\1\0\1\201\1\202\1\201"+
    "\1\202\1\201\1\202\1\201\1\202\1\201\1\203\5\0"+
    "\1\51\26\0\1\43\1\0\1\201\1\202\1\204\1\45"+
    "\1\205\1\45\1\205\1\45\1\205\1\105\5\0\1\51"+
    "\30\0\1\154\1\0\1\154\1\0\1\154\1\0\1\154"+
    "\1\0\1\154\54\0\3\123\1\206\14\123\30\0\10\123"+
    "\1\207\7\123\12\0\1\42\1\133\1\36\1\133\1\36"+
    "\1\133\1\36\1\133\1\36\1\133\1\36\1\0\1\106"+
    "\33\0\1\42\1\133\1\36\1\133\1\36\1\133\5\36"+
    "\1\0\1\106\34\0\1\210\1\211\1\212\7\0\1\213"+
    "\1\214\34\0\1\210\1\211\1\212\7\0\1\215\1\214"+
    "\34\0\1\107\1\105\1\110\1\0\1\44\1\0\1\44"+
    "\1\0\1\44\2\0\1\106\46\0\1\215\35\0\1\210"+
    "\1\211\1\212\7\0\1\216\1\214\34\0\2\175\1\217"+
    "\1\220\6\221\36\0\12\221\35\0\1\151\15\0\13\72"+
    "\1\222\4\72\13\0\1\154\1\0\1\154\1\160\1\200"+
    "\1\160\1\200\1\160\1\200\1\160\34\0\1\43\1\0"+
    "\1\223\1\45\1\205\1\45\1\205\1\45\1\205\1\45"+
    "\1\205\1\105\5\0\1\51\26\0\1\43\1\0\1\223"+
    "\1\45\1\205\1\45\1\205\1\45\1\205\1\45\1\205"+
    "\1\105\1\0\1\106\3\0\1\51\30\0\1\223\1\105"+
    "\1\223\1\105\1\223\1\105\1\223\1\105\1\223\1\105"+
    "\36\0\1\223\1\0\1\223\1\0\1\223\1\0\1\223"+
    "\1\0\1\223\35\0\1\43\1\0\1\223\1\45\1\205"+
    "\1\45\1\205\1\45\1\46\1\45\1\171\1\105\1\0"+
    "\1\106\3\0\1\51\26\0\1\43\1\0\1\107\1\45"+
    "\1\46\1\45\1\46\1\45\1\46\1\45\1\171\1\105"+
    "\1\0\1\106\3\0\1\51\27\0\1\151\15\0\14\72"+
    "\1\224\3\72\12\0\1\151\15\0\7\72\1\225\10\72"+
    "\23\0\1\226\1\227\36\0\12\227\36\0\1\227\2\230"+
    "\1\231\45\0\1\232\4\233\42\0\6\233\42\0\1\233"+
    "\1\234\45\0\1\235\12\221\35\0\1\235\3\221\44\0"+
    "\1\235\65\0\12\123\1\236\5\123\11\0\1\43\1\0"+
    "\1\44\1\45\1\46\1\45\1\46\1\45\1\46\1\45"+
    "\1\171\1\105\1\0\1\106\3\0\1\51\45\0\7\123"+
    "\1\237\10\123\30\0\12\123\1\240\5\123\25\0\1\111"+
    "\47\0\1\112\47\0\1\115\47\0\1\116\37\0\10\241"+
    "\36\0\12\241\36\0\1\241\50\0\1\242\10\243\35\0"+
    "\1\151\15\0\6\72\1\162\11\72\13\0\1\210\1\211"+
    "\1\212\10\0\1\214\34\0\2\243\1\244\1\245\6\246"+
    "\36\0\12\246\36\0\3\246\32\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[5960];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\4\1\1\11\11\1\2\11\7\1\1\0"+
    "\1\11\4\0\1\11\1\1\7\0\20\1\14\0\1\11"+
    "\5\0\1\1\2\0\4\1\5\0\1\1\17\0\1\1"+
    "\11\0\1\1\1\0\1\11\27\0\1\11\21\0\2\1"+
    "\4\0\2\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Unrecognized character: " + yytext());
            }
            // fall through
          case 17: break;
          case 2:
            { ;
            }
            // fall through
          case 18: break;
          case 3:
            { return new Symbol(sym.V);
            }
            // fall through
          case 19: break;
          case 4:
            { return new Symbol(sym.INT, Integer.parseInt(yytext()));
            }
            // fall through
          case 20: break;
          case 5:
            { return new Symbol(sym.DP);
            }
            // fall through
          case 21: break;
          case 6:
            { return new Symbol(sym.PV);
            }
            // fall through
          case 22: break;
          case 7:
            { return new Symbol(sym.STR, new String(yytext()));
            }
            // fall through
          case 23: break;
          case 8:
            { return new Symbol(sym.ARROW);
            }
            // fall through
          case 24: break;
          case 9:
            { return new Symbol(sym.DOUBLE, Double.parseDouble(yytext()));
            }
            // fall through
          case 25: break;
          case 10:
            { return new Symbol(sym.TOK2);
            }
            // fall through
          case 26: break;
          case 11:
            { return new Symbol(sym.MIN);
            }
            // fall through
          case 27: break;
          case 12:
            { return new Symbol(sym.STRINGS);
            }
            // fall through
          case 28: break;
          case 13:
            { return new Symbol(sym.SEP);
            }
            // fall through
          case 29: break;
          case 14:
            { return new Symbol(sym.TOK1);
            }
            // fall through
          case 30: break;
          case 15:
            { return new Symbol(sym.AUC);
            }
            // fall through
          case 31: break;
          case 16:
            { return new Symbol(sym.USER, new String(yytext()));
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
