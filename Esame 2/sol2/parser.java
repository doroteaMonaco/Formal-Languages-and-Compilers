
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\005\000\002\012" +
    "\010\000\002\012\010\000\002\012\010\000\002\012\011" +
    "\000\002\012\011\000\002\012\011\000\002\011\004\000" +
    "\002\011\003\000\002\010\003\000\002\010\002\000\002" +
    "\007\004\000\002\007\003\000\002\006\005\000\002\006" +
    "\005\000\002\005\006\000\002\022\005\000\002\022\003" +
    "\000\002\021\005\000\002\003\005\000\002\003\003\000" +
    "\002\004\012\000\002\004\012\000\002\004\014\000\002" +
    "\020\005\000\002\020\003\000\002\017\006\000\002\016" +
    "\005\000\002\016\003\000\002\015\006\000\002\015\006" +
    "\000\002\015\004\000\002\014\005\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\010\012\006\013\005\014\004\001\002\000" +
    "\012\012\ufff8\013\ufff8\014\ufff8\027\ufff8\001\002\000\006" +
    "\012\ufff6\014\004\001\002\000\010\012\ufff6\013\ufff6\014" +
    "\004\001\002\000\004\002\131\001\002\000\010\012\111" +
    "\013\110\014\107\001\002\000\004\027\012\001\002\000" +
    "\004\031\014\001\002\000\004\002\000\001\002\000\004" +
    "\011\076\001\002\000\004\031\014\001\002\000\010\002" +
    "\ufff4\016\020\031\014\001\002\000\006\002\ufff5\016\020" +
    "\001\002\000\004\031\024\001\002\000\006\002\uffec\016" +
    "\uffec\001\002\000\004\031\014\001\002\000\010\002\ufff3" +
    "\016\ufff3\031\ufff3\001\002\000\004\017\025\001\002\000" +
    "\004\031\026\001\002\000\006\020\030\022\027\001\002" +
    "\000\006\007\044\026\043\001\002\000\004\007\031\001" +
    "\002\000\004\030\034\001\002\000\006\004\uffe7\005\uffe7" +
    "\001\002\000\006\004\041\005\040\001\002\000\004\010" +
    "\035\001\002\000\004\030\036\001\002\000\004\021\037" +
    "\001\002\000\006\004\uffe6\005\uffe6\001\002\000\004\030" +
    "\034\001\002\000\006\002\uffeb\016\uffeb\001\002\000\006" +
    "\004\uffe8\005\uffe8\001\002\000\004\032\066\001\002\000" +
    "\004\031\047\001\002\000\006\004\064\005\063\001\002" +
    "\000\006\004\uffe4\005\uffe4\001\002\000\006\024\052\032" +
    "\050\001\002\000\004\023\062\001\002\000\004\006\060" +
    "\001\002\000\004\032\056\001\002\000\010\004\uffe1\005" +
    "\uffe1\006\054\001\002\000\004\024\052\001\002\000\006" +
    "\004\uffe3\005\uffe3\001\002\000\004\025\057\001\002\000" +
    "\010\004\uffe0\005\uffe0\006\uffe0\001\002\000\004\032\050" +
    "\001\002\000\006\004\uffe2\005\uffe2\001\002\000\010\004" +
    "\uffdf\005\uffdf\006\uffdf\001\002\000\004\031\047\001\002" +
    "\000\006\002\uffea\016\uffea\001\002\000\006\004\uffe5\005" +
    "\uffe5\001\002\000\004\007\067\001\002\000\004\031\047" +
    "\001\002\000\006\004\071\005\063\001\002\000\006\002" +
    "\uffe9\016\uffe9\001\002\000\004\016\020\001\002\000\006" +
    "\002\uffed\016\uffed\001\002\000\004\031\014\001\002\000" +
    "\010\002\ufff2\016\ufff2\031\ufff2\001\002\000\004\031\100" +
    "\001\002\000\006\004\uffef\005\uffef\001\002\000\004\032" +
    "\105\001\002\000\006\004\103\005\102\001\002\000\004" +
    "\031\100\001\002\000\010\002\ufff1\016\ufff1\031\ufff1\001" +
    "\002\000\006\004\ufff0\005\ufff0\001\002\000\004\015\106" +
    "\001\002\000\006\004\uffee\005\uffee\001\002\000\012\012" +
    "\ufff9\013\ufff9\014\ufff9\027\ufff9\001\002\000\006\012\ufff6" +
    "\014\004\001\002\000\010\012\ufff6\013\ufff6\014\004\001" +
    "\002\000\006\012\115\013\114\001\002\000\012\012\ufff7" +
    "\013\ufff7\014\107\027\ufff7\001\002\000\006\012\ufff6\014" +
    "\004\001\002\000\006\013\ufff6\014\004\001\002\000\004" +
    "\013\117\001\002\000\006\014\004\027\ufff6\001\002\000" +
    "\004\027\ufffa\001\002\000\004\012\122\001\002\000\006" +
    "\014\004\027\ufff6\001\002\000\004\027\ufffb\001\002\000" +
    "\004\012\125\001\002\000\006\012\ufff6\014\004\001\002" +
    "\000\004\012\127\001\002\000\006\014\004\027\ufff6\001" +
    "\002\000\004\027\ufffc\001\002\000\004\002\001\001\002" +
    "\000\006\012\134\013\133\001\002\000\006\012\ufff6\014" +
    "\004\001\002\000\006\013\ufff6\014\004\001\002\000\004" +
    "\013\136\001\002\000\006\014\004\027\ufff6\001\002\000" +
    "\004\027\ufffd\001\002\000\004\012\141\001\002\000\006" +
    "\014\004\027\ufff6\001\002\000\004\027\ufffe\001\002\000" +
    "\004\012\144\001\002\000\006\012\ufff6\014\004\001\002" +
    "\000\004\012\146\001\002\000\006\014\004\027\ufff6\001" +
    "\002\000\004\027\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\145\000\010\002\006\011\007\012\010\001\001\000" +
    "\002\001\001\000\006\010\142\011\112\001\001\000\006" +
    "\010\131\011\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\005\014\006\015\007\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\005" +
    "\073\001\001\000\010\003\016\004\020\005\021\001\001" +
    "\000\004\004\071\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\022\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\017\031\020\032\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\041\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\045\016\044\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\052\014\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\014\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\045\016\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\004\072\001\001\000\002" +
    "\001\001\000\004\005\074\001\001\000\002\001\001\000" +
    "\006\021\076\022\100\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\103\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\010\123\011\112\001" +
    "\001\000\006\010\111\011\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\120\011\112\001\001\000" +
    "\006\010\115\011\112\001\001\000\002\001\001\000\006" +
    "\010\117\011\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\122\011\112\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\125\011\112\001\001\000" +
    "\002\001\001\000\006\010\127\011\112\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\137\011\112\001\001\000\006\010\134\011\112\001\001" +
    "\000\002\001\001\000\006\010\136\011\112\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\141\011\112" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\144\011\112\001\001\000\002\001\001\000\006\010\146" +
    "\011\112\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Dest>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Dest>> map = new HashMap<String, ArrayList<Dest>>();

    public class Dest {
        private String dest;
        private Double dist;

        Dest(String dest, Double dist) {
            this.dest = dest;
            this.dist = dist;
        }

        public String getDest() {
            return this.dest;
        }

        public Double getDist() {
            return this.dist;
        }
    }

    public class Time {
        private Integer perc;
        private Integer speed;

        Time(Integer perc, Integer speed) {
            this.perc = perc;
            this.speed = speed;
        }

        public Integer getPerc() {
            return this.perc;
        }

        public Integer getSpeed() {
            return this.speed;
        }
    }

    public class Exp {
        private String code;
        private Double exp;
        private Double disc;

        Exp(String code, Double exp, Double disc) {
            this.code = code;
            this.exp = exp;
            this.disc = disc;
        }

        public String getCode() {
            return this.code;
        }

        public Double getDisc() {
            return this.disc;
        }

        public Double getEx() {
            return this.exp;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP command_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK2 tok3e TOK1 tok3e TOK1 tok3e 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TOK1 tok3e TOK2 tok3e TOK1 tok3e 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= TOK1 tok3e TOK1 tok3e TOK2 tok3e 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= tok3s TOK2 tok3e TOK1 tok3e TOK1 tok3e 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= tok3s TOK1 tok3e TOK2 tok3e TOK1 tok3e 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= tok3s TOK1 tok3e TOK1 tok3e TOK2 tok3e 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok3s ::= tok3s TOK3 
            { parser.Tree.reduce(2,"tok3s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok3s ::= TOK3 
            { parser.Tree.reduce(1,"tok3s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok3e ::= tok3s 
            { parser.Tree.reduce(1,"tok3e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3e",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok3e ::= 
            { parser.Tree.reduce(0,"tok3e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3e",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // command_section ::= distance_list compute_list 
            { parser.Tree.reduce(2,"command_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // command_section ::= distance_list 
            { parser.Tree.reduce(1,"command_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // distance_list ::= distance_list distance distance 
            { parser.Tree.reduce(3,"distance_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // distance_list ::= distance distance distance 
            { parser.Tree.reduce(3,"distance_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // distance ::= STR ARROW dest_list PV 
            { parser.Tree.reduce(4,"distance",0);
              Object RESULT =null;
		int parleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int parright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String par = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Dest> list = (ArrayList<Dest>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(par, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // dest_list ::= dest_list V dest 
            { parser.Tree.reduce(3,"dest_list",0);
              ArrayList<Dest> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dest> list = (ArrayList<Dest>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dest dt = (Dest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(dt);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dest_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // dest_list ::= dest 
            { parser.Tree.reduce(1,"dest_list",0);
              ArrayList<Dest> RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dest dt = (Dest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Dest> list = new ArrayList();
    list.add(dt);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dest_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // dest ::= STR DOUBLE KM 
            { parser.Tree.reduce(3,"dest",0);
              Dest RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int distleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dist = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Dest dt = new Dest(d, dist);
    RESULT = dt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("dest",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // compute_list ::= compute_list compute compute 
            { parser.Tree.reduce(3,"compute_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // compute_list ::= compute 
            { parser.Tree.reduce(1,"compute_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // compute ::= COMPUTE STR TO STR TIME DP time_list PV 
            { parser.Tree.reduce(8,"compute",0);
              Object RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String part = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dest = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Time> list = (ArrayList<Time>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Dest> dlist = parser.map.get(part);
    Double dist = 0.0;
    for(Dest dt: dlist) {
        if(dt.getDest().equals(dest)){
            dist = dt.getDist();
        }
    }

    Integer i = 0;
    Double tot = 0.0;
    for(Time ti: list) {
        Double res = dist * (ti.getPerc()/100.0) / ti.getSpeed();
        tot += res;
        System.out.println(i+" "+res);
        i += 1;
    }
    System.out.println("TOT: "+tot);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // compute ::= COMPUTE STR TO STR EXPENSE DP expense_list PV 
            { parser.Tree.reduce(8,"compute",0);
              Object RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String part = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String dest = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Dest> dlist = parser.map.get(part);
    Double dist = 0.0;
    for(Dest dt: dlist) {
        if(dt.getDest().equals(dest)){
            dist = dt.getDist();
        }
    }

    Exp first = list.get(0);
    Double min = (dist * first.getEx()) - first.getDisc();
    for(Exp ex: list) {
        Double res = (dist * ex.getEx()) - ex.getDisc();
        System.out.println(ex.getCode()+" "+res);
        if (res < min) {
            min = res;
        }
    }
    System.out.println("MIN: "+min);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // compute ::= COMPUTE STR TO STR EXPENSE EXTRA DOUBLE DP expense_list PV 
            { parser.Tree.reduce(10,"compute",0);
              Object RESULT =null;
		int partleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int partright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String part = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int destleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int destright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String dest = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double cost = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    ArrayList<Dest> dlist = parser.map.get(part);
    Double dist = 0.0;
    for(Dest dt: dlist) {
        if(dt.getDest().equals(dest)){
            dist = dt.getDist();
        }
    }

    Exp first = list.get(0);
    Double min = (dist * first.getEx()) - first.getDisc() - cost;
    for(Exp ex: list) {
        Double res = (dist * ex.getEx()) - ex.getDisc() - cost;
        System.out.println(ex.getCode()+" "+res);
        if (res < min) {
            min = res;
        }
    }
    System.out.println("MIN: "+min);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // time_list ::= time_list V time 
            { parser.Tree.reduce(3,"time_list",0);
              ArrayList<Time> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Time> list = (ArrayList<Time>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Time ti = (Time)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ti);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // time_list ::= time 
            { parser.Tree.reduce(1,"time_list",0);
              ArrayList<Time> RESULT =null;
		int tileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int tiright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Time ti = (Time)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Time> list = new ArrayList();
    list.add(ti);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // time ::= INT PERC INT KMH 
            { parser.Tree.reduce(4,"time",0);
              Time RESULT =null;
		int percleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int percright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer perc = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int speedleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int speedright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer speed = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Time ti = new Time(perc, speed);
    RESULT = ti;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expense_list ::= expense_list V expense 
            { parser.Tree.reduce(3,"expense_list",0);
              ArrayList<Exp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expense_list ::= expense 
            { parser.Tree.reduce(1,"expense_list",0);
              ArrayList<Exp> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp ex = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Exp> list = new ArrayList();
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expense ::= STR exp MINUS disc 
            { parser.Tree.reduce(4,"expense",0);
              Exp RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double di = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Exp exp = new Exp(code, ex, di);
    RESULT = exp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expense ::= STR disc MINUS exp 
            { parser.Tree.reduce(4,"expense",0);
              Exp RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int diright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double di = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Exp exp = new Exp(code, ex, di);
    RESULT = exp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expense ::= STR exp 
            { parser.Tree.reduce(2,"expense",0);
              Exp RESULT =null;
		int codeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int coderight = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String code = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Exp exp = new Exp(code, ex, 0.0);
    RESULT = exp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // disc ::= DISC DOUBLE EURO 
            { parser.Tree.reduce(3,"disc",0);
              Double RESULT =null;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = price;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("disc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= DOUBLE EUROKM 
            { parser.Tree.reduce(2,"exp",0);
              Double RESULT =null;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = price;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
