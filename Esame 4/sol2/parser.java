
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\007\000\002\002" +
    "\005\000\002\014\003\000\002\014\003\000\002\013\004" +
    "\000\002\011\005\000\002\011\006\000\002\012\005\000" +
    "\002\012\013\000\002\012\016\000\002\010\004\000\002" +
    "\010\005\000\002\010\006\000\002\010\005\000\002\010" +
    "\005\000\002\010\010\000\002\010\007\000\002\010\007" +
    "\000\002\010\007\000\002\010\006\000\002\010\006\000" +
    "\002\007\004\000\002\007\003\000\002\006\005\000\002" +
    "\006\004\000\002\005\007\000\002\022\005\000\002\022" +
    "\003\000\002\021\005\000\002\004\004\000\002\004\003" +
    "\000\002\003\010\000\002\020\005\000\002\020\003\000" +
    "\002\017\006\000\002\016\005\000\002\016\003\000\002" +
    "\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\006\011\005\012\004\001\002\000\006\011" +
    "\107\012\106\001\002\000\004\011\103\001\002\000\006" +
    "\011\066\012\065\001\002\000\004\002\063\001\002\000" +
    "\004\016\ufffd\001\002\000\004\016\013\001\002\000\004" +
    "\016\ufffe\001\002\000\004\007\015\001\002\000\004\007" +
    "\015\001\002\000\004\020\051\001\002\000\010\002\uffff" +
    "\007\015\016\017\001\002\000\004\021\023\001\002\000" +
    "\004\007\015\001\002\000\010\002\uffe9\007\uffe9\016\uffe9" +
    "\001\002\000\006\002\000\021\023\001\002\000\004\014" +
    "\025\001\002\000\006\002\uffe2\021\uffe2\001\002\000\004" +
    "\020\026\001\002\000\004\006\027\001\002\000\004\020" +
    "\032\001\002\000\006\004\045\005\044\001\002\000\006" +
    "\004\uffdf\005\uffdf\001\002\000\004\007\033\001\002\000" +
    "\004\020\035\001\002\000\006\005\uffdc\010\uffdc\001\002" +
    "\000\004\017\042\001\002\000\006\005\037\010\040\001" +
    "\002\000\004\020\035\001\002\000\006\004\uffde\005\uffde" +
    "\001\002\000\006\005\uffdd\010\uffdd\001\002\000\004\015" +
    "\043\001\002\000\006\005\uffdb\010\uffdb\001\002\000\004" +
    "\020\032\001\002\000\006\002\uffe1\021\uffe1\001\002\000" +
    "\006\004\uffe0\005\uffe0\001\002\000\006\002\uffe3\021\uffe3" +
    "\001\002\000\006\005\uffe5\010\uffe5\001\002\000\004\021" +
    "\060\001\002\000\006\005\053\010\054\001\002\000\004" +
    "\020\051\001\002\000\004\020\055\001\002\000\004\004" +
    "\056\001\002\000\010\002\uffe7\007\uffe7\016\uffe7\001\002" +
    "\000\006\005\uffe6\010\uffe6\001\002\000\004\013\061\001" +
    "\002\000\006\005\uffe4\010\uffe4\001\002\000\010\002\uffe8" +
    "\007\uffe8\016\uffe8\001\002\000\004\002\001\001\002\000" +
    "\004\016\ufffc\001\002\000\004\012\070\001\002\000\004" +
    "\011\067\001\002\000\006\011\ufffb\012\ufffb\001\002\000" +
    "\004\012\071\001\002\000\006\012\072\016\ufff9\001\002" +
    "\000\004\012\073\001\002\000\004\012\074\001\002\000" +
    "\004\012\075\001\002\000\004\012\076\001\002\000\004" +
    "\012\077\001\002\000\006\012\100\016\ufff8\001\002\000" +
    "\004\012\101\001\002\000\004\012\102\001\002\000\004" +
    "\016\ufff7\001\002\000\004\011\104\001\002\000\004\011" +
    "\105\001\002\000\006\011\ufffa\012\ufffa\001\002\000\010" +
    "\011\107\012\120\016\ufff6\001\002\000\010\011\uffea\012" +
    "\uffea\016\uffea\001\002\000\006\011\112\012\111\001\002" +
    "\000\010\011\107\012\113\016\ufff3\001\002\000\010\011" +
    "\uffeb\012\uffeb\016\uffeb\001\002\000\006\011\107\016\uffec" +
    "\001\002\000\010\011\112\012\115\016\ufff4\001\002\000" +
    "\006\011\107\016\ufff0\001\002\000\006\011\112\016\ufff1" +
    "\001\002\000\006\011\112\016\uffee\001\002\000\004\016" +
    "\ufff5\001\002\000\010\011\112\012\122\016\ufff2\001\002" +
    "\000\006\011\107\016\uffed\001\002\000\006\011\112\016" +
    "\uffef\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\014\002\006\010\007\011\005\013\011\014" +
    "\010\001\001\000\004\007\107\001\001\000\002\001\001" +
    "\000\004\012\063\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\013" +
    "\006\015\001\001\000\004\005\061\001\001\000\006\021" +
    "\047\022\051\001\001\000\004\005\017\001\001\000\006" +
    "\003\023\004\021\001\001\000\004\005\020\001\001\000" +
    "\002\001\001\000\004\003\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\030\020\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\033\016\035\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\040\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\007\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\007\113\001\001" +
    "\000\002\001\001\000\004\007\116\001\001\000\002\001" +
    "\001\000\004\007\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\122\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Material>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Material>> map = new HashMap();

    public class Material {
        private String name;
        private Double cost;

        Material(String name, Double cost) {
            this.name = name;
            this.cost =  cost;
        }

        public String getName() {
            return this.name;
        }

        public Double getCost() {
            return this.cost;
        }
    }

    public class Comp {
        private String name;
        private Integer quan;

        Comp(String name, Integer quan) {
            this.name = name;
            this.quan = quan;
        }

        public String getName() {
            return this.name;
        }

        public Integer getQuan() {
            return this.quan;
        }
    }

    public class Elem {
        private String name;
        private ArrayList<Comp> list;

        Elem(String name, ArrayList<Comp> list) {
            this.name = name;
            this.list = list;
        }

        public String getName() {
            return this.name;
        }

        public ArrayList<Comp> getList() {
            return this.list;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {



  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP material_type_list SEP product_list 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // prog ::= header SEP material_type_list 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= seq1 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= seq2 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seq1 ::= tok11 tok12 
            { parser.Tree.reduce(2,"seq1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq1",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok11 ::= tok11 TOK1 TOK1 
            { parser.Tree.reduce(3,"tok11",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok11",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok11 ::= TOK1 TOK1 TOK1 TOK1 
            { parser.Tree.reduce(4,"tok11",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok11",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok12 ::= TOK2 TOK2 TOK2 
            { parser.Tree.reduce(3,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok12 ::= TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 
            { parser.Tree.reduce(9,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok12 ::= TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 
            { parser.Tree.reduce(12,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seq2 ::= TOK2 TOK2 
            { parser.Tree.reduce(2,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seq2 ::= TOK2 TOK2 TOK2 
            { parser.Tree.reduce(3,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // seq2 ::= TOK2 tok1s TOK2 tok1s 
            { parser.Tree.reduce(4,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // seq2 ::= TOK2 tok1s TOK2 
            { parser.Tree.reduce(3,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // seq2 ::= TOK2 TOK2 tok1s 
            { parser.Tree.reduce(3,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // seq2 ::= TOK2 tok1s TOK2 tok1s TOK2 tok1s 
            { parser.Tree.reduce(6,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // seq2 ::= TOK2 tok1s TOK2 tok1s TOK2 
            { parser.Tree.reduce(5,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // seq2 ::= TOK2 TOK2 tok1s TOK2 tok1s 
            { parser.Tree.reduce(5,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // seq2 ::= TOK2 tok1s TOK2 TOK2 tok1s 
            { parser.Tree.reduce(5,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // seq2 ::= TOK2 TOK2 tok1s TOK2 
            { parser.Tree.reduce(4,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // seq2 ::= TOK2 tok1s TOK2 TOK2 
            { parser.Tree.reduce(4,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // material_type_list ::= material_type_list material_type material_type 
            { parser.Tree.reduce(3,"material_type_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_type_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // material_type_list ::= material_type material_type 
            { parser.Tree.reduce(2,"material_type_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_type_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // material_type ::= GA material_list GC STR PV 
            { parser.Tree.reduce(5,"material_type",0);
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Material> list = (ArrayList<Material>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(name, list);
    String less = new String();
    String more = new String();
    Double min = list.get(0).getCost();
    Double max = 0.0;
    for(Material mat: list) {
        if(mat.getCost() < min) {
            min = mat.getCost();
            less = mat.getName();
        }
        if(mat.getCost() > max) {
            max = mat.getCost();
            more = mat.getName();
        }
    }
    System.out.println(name+": less: "+less+", more: "+more);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_type",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // material_list ::= material_list V material 
            { parser.Tree.reduce(3,"material_list",0);
              ArrayList<Material> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Material> list = (ArrayList<Material>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int matleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Material mat = (Material)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(mat);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // material_list ::= material 
            { parser.Tree.reduce(1,"material_list",0);
              ArrayList<Material> RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Material mat = (Material)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Material> list = new ArrayList();
    list.add(mat);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // material ::= STR DOUBLE EUROKG 
            { parser.Tree.reduce(3,"material",0);
              Material RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int costright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double cost = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Material mat = new Material(name, cost);
    RESULT = mat;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // product_list ::= product_list product 
            { parser.Tree.reduce(2,"product_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // product_list ::= product 
            { parser.Tree.reduce(1,"product_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // product ::= DOUBLE EURO STR DP element_list PV 
            { parser.Tree.reduce(6,"product",1);
              Object RESULT =null;
		int taxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int taxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double tax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Elem> list = (ArrayList<Elem>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(type);
    for(Elem el: list) {
        ArrayList<Material> matL = parser.map.get(el.getName());
        for(Comp cmp: el.getList()) {
            Double cost = 0.0;
            for(Material mat: matL) {
                if(cmp.getName().equals(mat.getName())) {
                    cost = mat.getCost();
                    break;
                }
            }
            Double res = tax + (cost * cmp.getQuan());
            System.out.println(cmp.getName()+" "+res+" euro");
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // element_list ::= element_list V element 
            { parser.Tree.reduce(3,"element_list",0);
              ArrayList<Elem> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Elem> list = (ArrayList<Elem>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elem el = (Elem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(el);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // element_list ::= element 
            { parser.Tree.reduce(1,"element_list",0);
              ArrayList<Elem> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elem el = (Elem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Elem> list = new ArrayList();
    list.add(el);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // element ::= STR GA component_list GC 
            { parser.Tree.reduce(4,"element",0);
              Elem RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Comp> list = (ArrayList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Elem el = new Elem(name, list);
    RESULT = el;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // component_list ::= component_list V comp 
            { parser.Tree.reduce(3,"component_list",0);
              ArrayList<Comp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Comp> list = (ArrayList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp cmp = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(cmp);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // component_list ::= comp 
            { parser.Tree.reduce(1,"component_list",0);
              ArrayList<Comp> RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp cmp = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Comp> list = new ArrayList();
    list.add(cmp);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp ::= STR INT KG 
            { parser.Tree.reduce(3,"comp",0);
              Comp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int quanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int quanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer quan = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Comp cmp = new Comp(name, quan);
    RESULT = cmp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
