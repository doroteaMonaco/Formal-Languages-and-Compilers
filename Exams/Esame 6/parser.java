
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\005\000\002\016" +
    "\003\000\002\016\003\000\002\015\005\000\002\015\006" +
    "\000\002\015\014\000\002\013\003\000\002\013\003\000" +
    "\002\014\005\000\002\014\005\000\002\012\010\000\002" +
    "\011\003\000\002\011\002\000\002\010\004\000\002\010" +
    "\004\000\002\010\003\000\002\010\003\000\002\007\003" +
    "\000\002\006\005\000\002\006\007\000\002\005\003\000" +
    "\002\005\003\000\002\004\006\000\002\003\006\000\002" +
    "\023\004\000\002\023\003\000\002\022\007\000\002\022" +
    "\007\000\002\021\005\000\002\020\005\000\002\020\005" +
    "\000\002\020\004\000\002\020\007\000\002\020\007\000" +
    "\002\020\006\000\002\020\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\006\015\005\016\004\001\002\000\010\014" +
    "\126\015\124\016\ufff4\001\002\000\004\015\121\001\002" +
    "\000\010\014\107\015\106\016\105\001\002\000\004\002" +
    "\103\001\002\000\004\030\ufffe\001\002\000\004\030\013" +
    "\001\002\000\004\030\uffff\001\002\000\006\023\022\032" +
    "\014\001\002\000\004\006\100\001\002\000\010\002\uffec" +
    "\023\uffec\032\uffec\001\002\000\010\002\uffef\023\022\032" +
    "\014\001\002\000\004\002\000\001\002\000\010\002\uffeb" +
    "\023\uffeb\032\uffeb\001\002\000\006\023\022\032\014\001" +
    "\002\000\014\011\026\012\027\021\030\022\031\032\023" +
    "\001\002\000\020\004\uffda\007\uffda\010\uffda\013\uffda\017" +
    "\uffda\020\uffda\026\uffda\001\002\000\012\007\036\010\037" +
    "\017\053\020\052\001\002\000\020\004\uffdd\007\uffdd\010" +
    "\uffdd\013\uffdd\017\uffdd\020\uffdd\026\uffdd\001\002\000\014" +
    "\011\026\012\027\021\030\022\031\032\023\001\002\000" +
    "\014\011\033\012\027\021\030\022\031\032\023\001\002" +
    "\000\020\004\uffdc\007\uffdc\010\uffdc\013\uffdc\017\uffdc\020" +
    "\uffdc\026\uffdc\001\002\000\020\004\uffdb\007\uffdb\010\uffdb" +
    "\013\uffdb\017\uffdb\020\uffdb\026\uffdb\001\002\000\006\007" +
    "\042\010\043\001\002\000\014\011\026\012\027\021\030" +
    "\022\031\032\023\001\002\000\010\007\uffe1\010\uffe1\013" +
    "\035\001\002\000\020\004\uffde\007\uffde\010\uffde\013\uffde" +
    "\017\uffde\020\uffde\026\uffde\001\002\000\014\011\026\012" +
    "\027\021\030\022\031\032\023\001\002\000\014\011\026" +
    "\012\027\021\030\022\031\032\023\001\002\000\020\004" +
    "\uffe2\007\uffe2\010\uffe2\013\uffe2\017\uffe2\020\uffe2\026\uffe2" +
    "\001\002\000\020\004\uffe3\007\uffe3\010\uffe3\013\uffe3\017" +
    "\uffe3\020\uffe3\026\uffe3\001\002\000\014\011\026\012\027" +
    "\021\030\022\031\032\023\001\002\000\014\011\026\012" +
    "\027\021\030\022\031\032\023\001\002\000\010\007\uffe2" +
    "\010\uffe2\013\045\001\002\000\020\004\uffdf\007\uffdf\010" +
    "\uffdf\013\uffdf\017\uffdf\020\uffdf\026\uffdf\001\002\000\010" +
    "\007\uffe3\010\uffe3\013\047\001\002\000\020\004\uffe0\007" +
    "\uffe0\010\uffe0\013\uffe0\017\uffe0\020\uffe0\026\uffe0\001\002" +
    "\000\020\004\uffe1\007\uffe1\010\uffe1\013\uffe1\017\uffe1\020" +
    "\uffe1\026\uffe1\001\002\000\010\017\uffe7\020\uffe7\024\uffe7" +
    "\001\002\000\014\011\026\012\027\021\030\022\031\032" +
    "\023\001\002\000\014\011\026\012\027\021\030\022\031" +
    "\032\023\001\002\000\010\017\053\020\052\024\055\001" +
    "\002\000\010\002\uffe9\023\uffe9\032\uffe9\001\002\000\010" +
    "\017\uffe8\020\uffe8\024\uffe8\001\002\000\010\007\036\010" +
    "\037\026\060\001\002\000\004\025\062\001\002\000\004" +
    "\027\065\001\002\000\004\031\063\001\002\000\004\004" +
    "\064\001\002\000\004\027\uffe4\001\002\000\010\017\uffe5" +
    "\020\uffe5\024\uffe5\001\002\000\010\007\036\010\037\026" +
    "\067\001\002\000\004\025\062\001\002\000\004\027\071" +
    "\001\002\000\010\017\uffe6\020\uffe6\024\uffe6\001\002\000" +
    "\006\023\022\032\014\001\002\000\006\023\022\032\014" +
    "\001\002\000\006\023\022\032\014\001\002\000\010\002" +
    "\uffed\023\uffed\032\uffed\001\002\000\006\023\022\032\014" +
    "\001\002\000\010\002\uffee\023\uffee\032\uffee\001\002\000" +
    "\014\011\026\012\027\021\030\022\031\032\023\001\002" +
    "\000\010\004\102\007\036\010\037\001\002\000\010\002" +
    "\uffea\023\uffea\032\uffea\001\002\000\004\002\001\001\002" +
    "\000\006\014\107\016\105\001\002\000\010\014\ufff9\016" +
    "\ufff9\030\ufff9\001\002\000\004\015\110\001\002\000\010" +
    "\014\ufffa\016\ufffa\030\ufffa\001\002\000\010\014\ufff8\015" +
    "\ufff8\016\ufff8\001\002\000\010\014\107\016\105\030\ufffd" +
    "\001\002\000\010\014\107\016\105\030\ufffc\001\002\000" +
    "\006\014\107\016\105\001\002\000\006\014\107\016\105" +
    "\001\002\000\006\014\107\016\105\001\002\000\006\014" +
    "\107\016\105\001\002\000\006\014\107\016\105\001\002" +
    "\000\004\030\ufffb\001\002\000\004\015\122\001\002\000" +
    "\010\014\ufff7\015\ufff7\016\ufff7\001\002\000\004\016\131" +
    "\001\002\000\012\014\ufff0\015\ufff0\016\ufff0\030\ufff0\001" +
    "\002\000\012\014\130\015\127\016\ufff5\030\ufff5\001\002" +
    "\000\012\014\ufff1\015\ufff1\016\ufff1\030\ufff1\001\002\000" +
    "\012\014\ufff2\015\ufff2\016\ufff2\030\ufff2\001\002\000\012" +
    "\014\ufff3\015\ufff3\016\ufff3\030\ufff3\001\002\000\010\014" +
    "\126\015\124\016\ufff4\001\002\000\004\016\133\001\002" +
    "\000\010\014\126\015\124\030\ufff4\001\002\000\004\030" +
    "\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\132\000\014\002\006\012\007\014\005\015\011\016" +
    "\010\001\001\000\006\010\124\011\122\001\001\000\002" +
    "\001\001\000\004\013\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\003\017\004\014\005\020\006\015\007\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\003\017\004\014" +
    "\005\075\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\017\004\014\005\071\001\001\000\006\017\024" +
    "\020\023\001\001\000\002\001\001\000\006\022\050\023" +
    "\053\001\001\000\002\001\001\000\006\017\024\020\047" +
    "\001\001\000\006\017\024\020\031\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\024" +
    "\020\033\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\017\024\020\040\001\001\000\006\017\024\020\037" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\017" +
    "\024\020\045\001\001\000\006\017\024\020\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\017\024\020\065\001\001\000\006\017\024\020\056\001" +
    "\001\000\004\022\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\067\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\003\017\004\014\005\072\001\001\000\010\003\017\004" +
    "\014\005\073\001\001\000\010\003\017\004\014\005\074" +
    "\001\001\000\002\001\001\000\010\003\017\004\014\005" +
    "\076\001\001\000\002\001\001\000\006\017\024\020\100" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\110\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\111\001\001\000\004\013\112\001\001\000\004\013\113" +
    "\001\001\000\004\013\114\001\001\000\004\013\115\001" +
    "\001\000\004\013\116\001\001\000\004\013\117\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\124\011\131\001\001\000\002\001\001\000\006\010\124" +
    "\011\133\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, Boolean> map = new HashMap<String, Boolean>();

    public Boolean computeExp(Boolean ex1, Comp com) {
        Boolean res = true;
        if (com.getOp().equals("AND")){
            res = ex1 && (com.getBool());
        }
        else {
            res = ex1 || (com.getBool());
        }

        return res;
    }

    public class Comp {
        private Boolean bool;
        private String str;
        private String op;

        Comp(Boolean bool, String str, String op) {
            this.bool = bool;
            this.str = str;
            this.op = op;
        }

        public Boolean getBool() {
            return this.bool;
        }

        public String getStr() {
            return this.str;
        }

        public String getOp() {
            return this.op;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP execution_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= seq1 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= seq2 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seq1 ::= tok2s tok13 tok13 
            { parser.Tree.reduce(3,"seq1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // seq1 ::= tok2s tok13 tok13 tok13 
            { parser.Tree.reduce(4,"seq1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // seq1 ::= tok2s tok13 tok13 tok13 tok13 tok13 tok13 tok13 tok13 tok13 
            { parser.Tree.reduce(10,"seq1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq1",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok13 ::= TOK1 
            { parser.Tree.reduce(1,"tok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok13 ::= TOK3 
            { parser.Tree.reduce(1,"tok13",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok13",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok2s ::= tok2s TOK2 TOK2 
            { parser.Tree.reduce(3,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok2s ::= TOK2 TOK2 TOK2 
            { parser.Tree.reduce(3,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seq2 ::= TOK3 tok12e TOK3 tok12e TOK3 tok12e 
            { parser.Tree.reduce(6,"seq2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("seq2",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tok12e ::= tok12 
            { parser.Tree.reduce(1,"tok12e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12e",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tok12e ::= 
            { parser.Tree.reduce(0,"tok12e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12e",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tok12 ::= tok12 TOK1 
            { parser.Tree.reduce(2,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tok12 ::= tok12 TOK2 
            { parser.Tree.reduce(2,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tok12 ::= TOK1 
            { parser.Tree.reduce(1,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tok12 ::= TOK2 
            { parser.Tree.reduce(1,"tok12",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok12",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // execution_section ::= command_list 
            { parser.Tree.reduce(1,"execution_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("execution_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command_list ::= command command command command command 
            { parser.Tree.reduce(5,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // command ::= ass 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command ::= if 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ass ::= VAR EQ bool_exp PV 
            { parser.Tree.reduce(4,"ass",0);
              Object RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(val, ex);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // if ::= IF bool_exp list_comp FI 
            { parser.Tree.reduce(4,"if",1);
              Object RESULT =null;
		int ex1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int ex1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean ex1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Comp> list = (ArrayList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    for(Comp com: list){
        Boolean res = computeExp(ex1, com);
        if(res == true){
            System.out.println(com.getStr());
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("if",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // list_comp ::= list_comp comp 
            { parser.Tree.reduce(2,"list_comp",0);
              ArrayList<Comp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Comp> list = (ArrayList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp com = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(com);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // list_comp ::= comp 
            { parser.Tree.reduce(1,"list_comp",0);
              ArrayList<Comp> RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp com = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Comp> list = new ArrayList();
    list.add(com);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comp",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // comp ::= ORS bool_exp DO print DONE 
            { parser.Tree.reduce(5,"comp",0);
              Comp RESULT =null;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean ex2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Comp comp = new Comp(ex2, str, "OR");
    RESULT = comp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // comp ::= ANDS bool_exp DO print DONE 
            { parser.Tree.reduce(5,"comp",0);
              Comp RESULT =null;
		int ex2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int ex2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean ex2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Comp comp = new Comp(ex2, str, "AND");
    RESULT = comp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // print ::= PRINT STR PV 
            { parser.Tree.reduce(3,"print",0);
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = str;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bool_exp ::= bool_exp AND bool_exp 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean op1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean op2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = op1&&op2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_exp ::= bool_exp OR bool_exp 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean op1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean op2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = op1||op2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_exp ::= NOT bool_exp 
            { parser.Tree.reduce(2,"bool_exp",0);
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = !op;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_exp ::= TA bool_exp AND bool_exp TC 
            { parser.Tree.reduce(5,"bool_exp",0);
              Boolean RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean op1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean op2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = op1&&op2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // bool_exp ::= TA bool_exp OR bool_exp TC 
            { parser.Tree.reduce(5,"bool_exp",0);
              Boolean RESULT =null;
		int op1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int op1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean op1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int op2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int op2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean op2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = op1||op2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // bool_exp ::= TA NOT bool_exp TC 
            { parser.Tree.reduce(4,"bool_exp",0);
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = !op;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // bool_exp ::= operand 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean op = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = op;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // operand ::= T 
            { parser.Tree.reduce(1,"operand",0);
              Boolean RESULT =null;
		
    RESULT = (Boolean) true;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // operand ::= F 
            { parser.Tree.reduce(1,"operand",0);
              Boolean RESULT =null;
		
    RESULT = (Boolean) false;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // operand ::= VAR 
            { parser.Tree.reduce(1,"operand",0);
              Boolean RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean val = parser.map.get(var);
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
