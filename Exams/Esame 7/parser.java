
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\043\000\002\002\004\000\002\002\005\000\002\007" +
    "\007\000\002\007\011\000\002\007\002\000\002\006\003" +
    "\000\002\006\002\000\002\005\004\000\002\005\003\000" +
    "\002\004\004\000\002\022\007\000\002\022\007\000\002" +
    "\022\005\000\002\022\005\000\002\022\002\000\002\013" +
    "\005\000\002\014\005\000\002\003\005\000\002\003\006" +
    "\000\002\021\003\000\002\021\003\000\002\020\006\000" +
    "\002\020\006\000\002\017\010\000\002\017\010\000\002" +
    "\016\004\000\002\016\003\000\002\015\007\000\002\012" +
    "\005\000\002\012\005\000\002\012\003\000\002\012\003" +
    "\000\002\011\006\000\002\010\005\000\002\010\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\012\005\013\ufffb\032\ufffd\001\002\000" +
    "\010\012\123\013\ufffc\032\ufffc\001\002\000\010\012\ufff9" +
    "\013\ufff9\032\ufff9\001\002\000\004\002\122\001\002\000" +
    "\004\013\114\001\002\000\004\032\011\001\002\000\010" +
    "\014\013\024\ufff3\025\ufff3\001\002\000\006\024\052\025" +
    "\057\001\002\000\006\015\020\017\016\001\002\000\004" +
    "\002\000\001\002\000\006\004\047\007\046\001\002\000" +
    "\006\023\023\033\022\001\002\000\006\004\041\007\040" +
    "\001\002\000\006\023\023\033\022\001\002\000\024\004" +
    "\uffe3\005\uffe3\011\uffe3\016\uffe3\020\uffe3\021\uffe3\022\uffe3" +
    "\030\uffe3\031\uffe3\001\002\000\024\004\uffe2\005\uffe2\011" +
    "\uffe2\016\uffe2\020\uffe2\021\uffe2\022\uffe2\030\uffe2\031\uffe2" +
    "\001\002\000\004\010\032\001\002\000\010\016\027\021" +
    "\026\022\025\001\002\000\006\023\023\033\022\001\002" +
    "\000\006\023\023\033\022\001\002\000\006\004\ufff2\007" +
    "\ufff2\001\002\000\024\004\uffe5\005\uffe5\011\uffe5\016\uffe5" +
    "\020\uffe5\021\uffe5\022\uffe5\030\uffe5\031\uffe5\001\002\000" +
    "\024\004\uffe4\005\uffe4\011\uffe4\016\uffe4\020\uffe4\021\uffe4" +
    "\022\uffe4\030\uffe4\031\uffe4\001\002\000\006\023\023\033" +
    "\022\001\002\000\012\005\uffdf\011\uffdf\021\026\022\025" +
    "\001\002\000\006\005\035\011\036\001\002\000\006\023" +
    "\023\033\022\001\002\000\024\004\uffe1\005\uffe1\011\uffe1" +
    "\016\uffe1\020\uffe1\021\uffe1\022\uffe1\030\uffe1\031\uffe1\001" +
    "\002\000\012\005\uffe0\011\uffe0\021\026\022\025\001\002" +
    "\000\004\015\020\001\002\000\006\024\ufff4\025\ufff4\001" +
    "\002\000\004\004\043\001\002\000\006\024\ufff6\025\ufff6" +
    "\001\002\000\010\020\045\021\026\022\025\001\002\000" +
    "\006\004\ufff1\007\ufff1\001\002\000\004\017\016\001\002" +
    "\000\006\024\ufff5\025\ufff5\001\002\000\004\004\051\001" +
    "\002\000\006\024\ufff7\025\ufff7\001\002\000\006\015\107" +
    "\017\106\001\002\000\010\002\uffed\024\uffed\025\uffed\001" +
    "\002\000\010\002\uffee\024\uffee\025\uffee\001\002\000\010" +
    "\002\ufff8\024\052\025\057\001\002\000\006\024\052\025" +
    "\057\001\002\000\006\015\061\017\060\001\002\000\004" +
    "\026\075\001\002\000\004\026\062\001\002\000\006\023" +
    "\023\033\022\001\002\000\010\023\uffe7\027\uffe7\033\uffe7" +
    "\001\002\000\010\023\023\027\073\033\022\001\002\000" +
    "\010\021\026\022\025\030\066\001\002\000\006\023\023" +
    "\033\022\001\002\000\010\021\026\022\025\031\070\001" +
    "\002\000\004\004\071\001\002\000\010\023\uffe6\027\uffe6" +
    "\033\uffe6\001\002\000\010\023\uffe8\027\uffe8\033\uffe8\001" +
    "\002\000\004\004\074\001\002\000\010\002\uffea\024\uffea" +
    "\025\uffea\001\002\000\006\023\023\033\022\001\002\000" +
    "\010\023\023\027\077\033\022\001\002\000\004\004\100" +
    "\001\002\000\010\002\uffe9\024\uffe9\025\uffe9\001\002\000" +
    "\006\024\052\025\057\001\002\000\006\024\052\025\057" +
    "\001\002\000\010\002\uffef\024\uffef\025\uffef\001\002\000" +
    "\006\024\052\025\057\001\002\000\010\002\ufff0\024\ufff0" +
    "\025\ufff0\001\002\000\006\023\023\033\022\001\002\000" +
    "\006\023\023\033\022\001\002\000\010\004\111\021\026" +
    "\022\025\001\002\000\010\002\uffec\024\uffec\025\uffec\001" +
    "\002\000\010\004\113\021\026\022\025\001\002\000\010" +
    "\002\uffeb\024\uffeb\025\uffeb\001\002\000\006\012\005\013" +
    "\ufffb\001\002\000\004\013\116\001\002\000\010\012\005" +
    "\013\ufffb\032\ufffb\001\002\000\006\013\120\032\uffff\001" +
    "\002\000\006\012\005\032\ufffb\001\002\000\004\032\ufffe" +
    "\001\002\000\004\002\001\001\002\000\010\012\ufffa\013" +
    "\ufffa\032\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\012\002\005\005\003\006\006\007\007\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\004\013\022" +
    "\011\001\001\000\012\003\054\017\052\020\053\021\055" +
    "\001\001\000\006\013\014\014\016\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\011\020\012\043\001\001" +
    "\000\002\001\001\000\006\011\020\012\023\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\020\012\030\001\001\000\006\011" +
    "\020\012\027\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\033\011\020\012\032\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\011\020" +
    "\012\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\041\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\052\020\053\021\103\001\001" +
    "\000\010\017\052\020\053\021\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\011\020" +
    "\012\064\015\062\016\063\001\001\000\002\001\001\000" +
    "\010\011\020\012\064\015\071\001\001\000\002\001\001" +
    "\000\006\011\020\012\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\011\020\012\064\015" +
    "\062\016\075\001\001\000\010\011\020\012\064\015\071" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\052\020\053\021\101\001\001\000\010\017\052\020\053" +
    "\021\102\001\001\000\002\001\001\000\010\017\052\020" +
    "\053\021\104\001\001\000\002\001\001\000\006\011\020" +
    "\012\111\001\001\000\006\011\020\012\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\005\003\006\114\001\001\000\002\001" +
    "\001\000\006\005\003\006\116\001\001\000\002\001\001" +
    "\000\006\005\003\006\120\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    
    public Double searchForMax(ArrayList<Double> list) {
        Double max = 0.0;
        for (Double val: list) {
            if(val > max) {
                max = val;
            }
        }
        return max;
    }

    public class Cons {
        private Double first, second;

        Cons(Double first, Double second) {
            this.first = first;
            this.second = second;
        }

        public Double getFirst() {
            return this.first;
        }

        public Double getSecond() {
            return this.second;
        }
    }

    public class Comm {
        private Integer op;
        private String type;
        private ArrayList<Cons> list;
        private Double ex;

        Comm(Integer op, String type, ArrayList<Cons> list, Double ex) {
            this.op = op;
            this.type = type;
            this.list = list;
            this.ex = ex;
        }

        public Integer getOp() {
            return this.op;
        }

        public String getType() {
            return this.type;
        }

        public ArrayList<Cons> getList() {
            return this.list;
        }

        public Double getVal() {
            return this.ex;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP run_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= tok1e TOK2 tok1e TOK2 tok1e 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok1e TOK2 tok1e TOK2 tok1e TOK2 tok1e 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= 
            { parser.Tree.reduce(0,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1e ::= tok1s 
            { parser.Tree.reduce(1,"tok1e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok1e ::= 
            { parser.Tree.reduce(0,"tok1e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // run_section ::= st command_list 
            { parser.Tree.reduce(2,"run_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("run_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // st ::= ST battery_ass MINUS fuel_ass PV 
            { parser.Tree.reduce(5,"st",0);
              Double[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] val = new Double[2];
    val[0] = b;
    val[1] = f;
    System.out.println("battery="+b+" fuel="+f);
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // st ::= ST fuel_ass MINUS battery_ass PV 
            { parser.Tree.reduce(5,"st",0);
              Double[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] val = new Double[2];
    val[0] = b;
    val[1] = f;
    System.out.println("battery="+b+" fuel="+f);
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // st ::= ST battery_ass PV 
            { parser.Tree.reduce(3,"st",0);
              Double[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] val = new Double[2];
    val[0] = b;
    val[1] = 100.0;
    System.out.println("battery="+b+" fuel= 100.0");
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // st ::= ST fuel_ass PV 
            { parser.Tree.reduce(3,"st",0);
              Double[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] val = new Double[2];
    val[0] = 100.0;
    val[1] = f;
    System.out.println("battery= 100.0"+" fuel="+f);
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // st ::= 
            { parser.Tree.reduce(0,"st",0);
              Double[] RESULT =null;
		
    Double[] val = new Double[2];
    val[0] = 100.0;
    val[1] = 100.0;
    System.out.println("battery= 100.0"+" fuel= 100.0");
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // battery_ass ::= BATTERY exp KWH 
            { parser.Tree.reduce(3,"battery_ass",0);
              Double RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("battery_ass",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // fuel_ass ::= FUEL exp LITERS 
            { parser.Tree.reduce(3,"fuel_ass",0);
              Double RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel_ass",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",1);
              Object RESULT =null;
		int c5left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c5right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comm c5 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c6left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c6right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comm c6 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Double[] val = (Double[]) parser.stack(-3);
    ArrayList<Comm> list = new ArrayList();
    list.add(c5);
    list.add(c6);
    for(Comm com: list) {
        if(com.getOp().equals(0)){
            if(com.getType().equals("battery")){
                val[0] = val[0] + com.getVal();
            }
            else {
                val[1] = val[1] + com.getVal();
            }
            System.out.println("battery="+val[0]+" fuel="+val[1]);
        }
        else {
            if(com.getType().equals("battery")){
                for(Cons cons: com.getList()){
                    val[0] = val[0]-(cons.getFirst()*cons.getSecond());
                    System.out.println("battery="+val[0]+" fuel="+val[1]);
                }
            }
            else {
                for(Cons cons: com.getList()){
                    val[1] = val[1]-(cons.getFirst()*cons.getSecond());
                    System.out.println("battery="+val[0]+" fuel="+val[1]);
                }
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command_list ::= command command command command 
            { parser.Tree.reduce(4,"command_list",1);
              Object RESULT =null;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Comm c1 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Comm c2 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comm c3 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c4left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c4right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comm c4 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Double[] val = (Double[]) parser.stack(-4);
    ArrayList<Comm> list = new ArrayList();
    list.add(c1);
    list.add(c2);
    list.add(c3);
    list.add(c4);

    for(Comm com: list) {
        if(com.getOp().equals(0)){
            if(com.getType().equals("battery")){
                val[0] = val[0] + com.getVal();
            }
            else {
                val[1] = val[1] + com.getVal();
            }
            System.out.println("battery="+val[0]+" fuel="+val[1]);
        }
        else {
            if(com.getType().equals("battery")){
                for(Cons cons: com.getList()){
                    val[0] = val[0]-(cons.getFirst()*cons.getSecond());
                    System.out.println("battery="+val[0]+" fuel="+val[1]);
                }
            }
            else {
                for(Cons cons: com.getList()){
                    val[1] = val[1]-(cons.getFirst()*cons.getSecond());
                    System.out.println("battery="+val[0]+" fuel="+val[1]);
                }
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= mod 
            { parser.Tree.reduce(1,"command",0);
              Comm RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comm com = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = com;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // command ::= use 
            { parser.Tree.reduce(1,"command",0);
              Comm RESULT =null;
		int comleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int comright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comm com = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = com;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // mod ::= MOD BATTERY exp PV 
            { parser.Tree.reduce(4,"mod",0);
              Comm RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Comm com = new Comm(0, "battery", null, ex);
    RESULT = com;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // mod ::= MOD FUEL exp PV 
            { parser.Tree.reduce(4,"mod",0);
              Comm RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Comm com = new Comm(0, "fuel", null, ex);
    RESULT = com;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // use ::= USE BATTERY DO cons_list DONE PV 
            { parser.Tree.reduce(6,"use",0);
              Comm RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Cons> list = (ArrayList<Cons>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Comm com = new Comm(1, "battery", list, 0.0);
    RESULT = com;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // use ::= USE FUEL DO cons_list DONE PV 
            { parser.Tree.reduce(6,"use",0);
              Comm RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Cons> list = (ArrayList<Cons>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Comm com = new Comm(1, "fuel", list, 0.0);
    RESULT = com;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // cons_list ::= cons_list cons 
            { parser.Tree.reduce(2,"cons_list",0);
              ArrayList<Cons> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Cons> list = (ArrayList<Cons>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cons cons = (Cons)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(cons);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // cons_list ::= cons 
            { parser.Tree.reduce(1,"cons_list",0);
              ArrayList<Cons> RESULT =null;
		int consleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int consright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cons cons = (Cons)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Cons> list = new ArrayList();
    list.add(cons);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // cons ::= exp KM exp UNITKM PV 
            { parser.Tree.reduce(5,"cons",0);
              Cons RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Cons cons = new Cons(e1, e2);
    RESULT = cons;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= exp PLUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Double res = e1+e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= exp STAR exp 
            { parser.Tree.reduce(3,"exp",0);
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Double res = e1*e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= max 
            { parser.Tree.reduce(1,"exp",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= DOUBLE 
            { parser.Tree.reduce(1,"exp",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // max ::= MAX TA exp_list TC 
            { parser.Tree.reduce(4,"max",0);
              Double RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double max = searchForMax(list);
    RESULT = max;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp_list ::= exp_list V exp 
            { parser.Tree.reduce(3,"exp_list",0);
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp_list ::= exp 
            { parser.Tree.reduce(1,"exp_list",0);
              ArrayList<Double> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double ex = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Double> list = new ArrayList();
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
