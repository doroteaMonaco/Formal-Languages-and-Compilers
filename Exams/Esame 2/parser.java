
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\032\000\002\002\004\000\002\002\004\000\002\010" +
    "\004\000\002\010\003\000\002\007\005\000\002\007\005" +
    "\000\002\006\006\000\002\022\005\000\002\022\003\000" +
    "\002\021\005\000\002\005\005\000\002\005\003\000\002" +
    "\004\007\000\002\003\006\000\002\003\006\000\002\003" +
    "\010\000\002\020\005\000\002\020\003\000\002\017\006" +
    "\000\002\016\005\000\002\016\003\000\002\015\006\000" +
    "\002\015\006\000\002\015\004\000\002\014\004\000\002" +
    "\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\026\004\001\002\000\004\031\010\001" +
    "\002\000\004\002\006\001\002\000\004\002\001\001\002" +
    "\000\004\002\000\001\002\000\004\011\073\001\002\000" +
    "\010\002\ufffe\016\016\031\010\001\002\000\004\031\010" +
    "\001\002\000\004\031\010\001\002\000\010\002\ufffc\016" +
    "\ufffc\031\ufffc\001\002\000\006\002\uffff\016\016\001\002" +
    "\000\004\031\022\001\002\000\006\002\ufff6\016\ufff6\001" +
    "\002\000\004\031\010\001\002\000\010\002\ufffd\016\ufffd" +
    "\031\ufffd\001\002\000\004\017\023\001\002\000\004\031" +
    "\024\001\002\000\006\020\026\021\025\001\002\000\006" +
    "\007\042\022\043\001\002\000\004\007\030\001\002\000" +
    "\006\002\ufff5\016\ufff5\001\002\000\004\030\033\001\002" +
    "\000\006\004\ufff0\005\ufff0\001\002\000\006\004\040\005" +
    "\037\001\002\000\004\010\034\001\002\000\004\030\035" +
    "\001\002\000\004\025\036\001\002\000\006\004\uffef\005" +
    "\uffef\001\002\000\004\030\033\001\002\000\006\002\ufff4" +
    "\016\ufff4\001\002\000\006\004\ufff1\005\ufff1\001\002\000" +
    "\004\031\050\001\002\000\004\032\044\001\002\000\004" +
    "\007\045\001\002\000\004\031\050\001\002\000\006\004" +
    "\065\005\064\001\002\000\006\004\uffed\005\uffed\001\002" +
    "\000\006\027\053\032\051\001\002\000\004\024\063\001" +
    "\002\000\004\006\061\001\002\000\004\032\057\001\002" +
    "\000\010\004\uffea\005\uffea\006\055\001\002\000\004\027" +
    "\053\001\002\000\006\004\uffec\005\uffec\001\002\000\004" +
    "\023\060\001\002\000\010\004\uffe8\005\uffe8\006\uffe8\001" +
    "\002\000\004\032\051\001\002\000\006\004\uffeb\005\uffeb" +
    "\001\002\000\010\004\uffe9\005\uffe9\006\uffe9\001\002\000" +
    "\004\031\050\001\002\000\006\002\ufff2\016\ufff2\001\002" +
    "\000\006\004\uffee\005\uffee\001\002\000\006\004\070\005" +
    "\064\001\002\000\006\002\ufff3\016\ufff3\001\002\000\004" +
    "\016\016\001\002\000\006\002\ufff7\016\ufff7\001\002\000" +
    "\004\031\075\001\002\000\006\004\ufff9\005\ufff9\001\002" +
    "\000\004\032\102\001\002\000\006\004\100\005\077\001" +
    "\002\000\004\031\075\001\002\000\010\002\ufffb\016\ufffb" +
    "\031\ufffb\001\002\000\006\004\ufffa\005\ufffa\001\002\000" +
    "\004\015\103\001\002\000\006\004\ufff8\005\ufff8\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\101\000\004\002\004\001\001\000\010\006\011\007" +
    "\010\010\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\004\016\005" +
    "\014\006\017\001\001\000\004\006\012\001\001\000\004" +
    "\006\013\001\001\000\002\001\001\000\004\004\070\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\003\026\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\017\030\020\031\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\040\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\015\046\016\066\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\046\016\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\013\051\014\053\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\055\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\071\001\001\000" +
    "\002\001\001\000\006\021\073\022\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\021" +
    "\100\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Dest>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Dest>> map = new HashMap<String, ArrayList<Dest>>();

    public Double computeTime(String p, String d, Time time) {
        ArrayList<Dest> list = map.get(p);
        Double val = 0.0;

        for(Dest s: list) {
            if (s.getName().equals(d)){
                val = s.getDist();
            }
        }

        Double res = val * (time.getPerc()/100) / time.getVel();
        return res;
    }

    public Double computeExpense(String p, String d, Exp e) {
        ArrayList<Dest> list = map.get(p);
        Double val = 0.0;

        for(Dest s: list) {
            if (s.getName().equals(d)){
                val = s.getDist();
            }
        }

        Double res = (val * e.getPrice()) - e.getDisc();
        return res;
    }

    public Double computeExtra(String p, String d, Exp e, Double disc) {
        ArrayList<Dest> list = map.get(p);
        Double val = 0.0;

        for(Dest s: list) {
            if (s.getName().equals(d)){
                val = (Double) s.getDist();
            }
        }

        Double res = (val * e.getPrice()) - e.getDisc() - disc;
        return res;
    }

    public Double getMin(ArrayList<Double> list) {
        Double min = list.get(0);
        for(Double d: list) {
            if(d < min) {
                min = d;
            }
        }
        return min;
    }

    public class Dest {
        private String name;
        private Double dist;

        Dest(String name, Double dist) {
            this.name = name;
            this.dist = dist;
        }

        public String getName() {
            return this.name;
        }

        public Double getDist() {
            return this.dist;
        }
    }

    public class Time {
        private Double perc;
        private Double vel;

        Time(Double perc, Double vel) {
            this.perc = perc;
            this.vel = vel;
        }

        public Double getPerc() {
            return this.perc;
        }

        public Double getVel() {
            return this.vel;
        }
    }

    public class Exp {
        private String code;
        private Double price;
        private Double disc;

        Exp(String code, Double price, Double disc) {
            this.code = code;
            this.price = price;
            this.disc = disc;
        }

        public String getCode() {
            return this.code;
        }

        public Double getPrice() {
            return this.price;
        }

        public Double getDisc() {
            return this.disc;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= SEP command_section 
            { parser.Tree.reduce(2,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // command_section ::= distance_list compute_list 
            { parser.Tree.reduce(2,"command_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // command_section ::= distance_list 
            { parser.Tree.reduce(1,"command_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // distance_list ::= distance_list distance distance 
            { parser.Tree.reduce(3,"distance_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // distance_list ::= distance distance distance 
            { parser.Tree.reduce(3,"distance_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // distance ::= STR ARROW destination_list PV 
            { parser.Tree.reduce(4,"distance",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Dest> list = (ArrayList<Dest>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(name, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("distance",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // destination_list ::= destination_list V destination 
            { parser.Tree.reduce(3,"destination_list",0);
              ArrayList<Dest> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Dest> list = (ArrayList<Dest>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dest d = (Dest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(d);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("destination_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // destination_list ::= destination 
            { parser.Tree.reduce(1,"destination_list",0);
              ArrayList<Dest> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Dest d = (Dest)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Dest> list = new ArrayList();
    list.add(d);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("destination_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // destination ::= STR DOUBLE KM 
            { parser.Tree.reduce(3,"destination",0);
              Dest RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int distleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double dist = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Dest d = new Dest(name, dist);
    RESULT = d;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("destination",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // compute_list ::= compute_list compute compute 
            { parser.Tree.reduce(3,"compute_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // compute_list ::= compute 
            { parser.Tree.reduce(1,"compute_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // compute ::= COMPUTE STR TO STR type 
            { parser.Tree.reduce(5,"compute",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("compute",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // type ::= TIME DP time_list PV 
            { parser.Tree.reduce(4,"type",1);
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Time> list = (ArrayList<Time>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String part = parser.stack(-6).toString();
    String dest = parser.stack(-4).toString();
    Integer count = 0;
    Double sum = 0.0;
    for(Time time: list){
        Double price = computeTime(part, dest, time);
        sum += price;
        System.out.println(count + price);
        count += 1;
    }
    System.out.println("TOT:" + sum);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // type ::= EXPENSE DP expense_list PV 
            { parser.Tree.reduce(4,"type",1);
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String part = parser.stack(-6).toString();
    String dest = parser.stack(-4).toString();
    ArrayList<Double> vet = new ArrayList();
    for(Exp e: list){
        Double price = computeExpense(part, dest, e);
        vet.add(price);
        System.out.println(e.getCode()+price);
    }
    Double min = getMin(vet);
    System.out.println("MIN:" + min);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // type ::= EXPENSE EXTRA DOUBLE DP expense_list PV 
            { parser.Tree.reduce(6,"type",1);
              Object RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    String part = parser.stack(-8).toString();
    String dest = parser.stack(-6).toString();
    ArrayList<Double> vet = new ArrayList();
    for(Exp e: list){
        Double price = computeExtra(part, dest, e, d);
        vet.add(price);
        System.out.println(e.getCode()+price);
    }
    Double min = getMin(vet);
    System.out.println("MIN:" + min);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // time_list ::= time_list V time 
            { parser.Tree.reduce(3,"time_list",0);
              ArrayList<Time> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Time> list = (ArrayList<Time>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int timeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Time time = (Time)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(time);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // time_list ::= time 
            { parser.Tree.reduce(1,"time_list",0);
              ArrayList<Time> RESULT =null;
		int timeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int timeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Time time = (Time)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Time> list = new ArrayList();
    list.add(time);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // time ::= INT PERC INT KMH 
            { parser.Tree.reduce(4,"time",0);
              Time RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer p = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Time time = new Time(Double.parseDouble(p.toString()), Double.parseDouble(v.toString()));
    RESULT = time;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("time",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // expense_list ::= expense_list V expense 
            { parser.Tree.reduce(3,"expense_list",0);
              ArrayList<Exp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Exp> list = (ArrayList<Exp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(e);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // expense_list ::= expense 
            { parser.Tree.reduce(1,"expense_list",0);
              ArrayList<Exp> RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Exp e = (Exp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Exp> list = new ArrayList();
    list.add(e);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expense ::= STR exp MINUS disc 
            { parser.Tree.reduce(4,"expense",0);
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Exp ex = new Exp(s, e, d);
    RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expense ::= STR disc MINUS exp 
            { parser.Tree.reduce(4,"expense",0);
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double d = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Exp ex = new Exp(s, e, d);
    RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expense ::= STR exp 
            { parser.Tree.reduce(2,"expense",0);
              Exp RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Exp ex = new Exp(s, e, 0.0);
    RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("expense",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // exp ::= DOUBLE EUROKM 
            { parser.Tree.reduce(2,"exp",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // disc ::= DISC DOUBLE EURO 
            { parser.Tree.reduce(3,"disc",0);
              Double RESULT =null;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = price;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("disc",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
