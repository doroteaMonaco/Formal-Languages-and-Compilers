// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\5"+
    "\1\6\1\0\1\7\3\0\1\10\1\11\1\0\1\12"+
    "\1\13\1\14\1\15\1\5\1\16\1\17\1\20\1\21"+
    "\5\22\1\23\1\0\1\24\1\0\1\25\1\0\1\26"+
    "\1\27\1\30\1\31\1\32\1\33\1\31\1\34\1\31"+
    "\1\35\1\36\3\31\1\37\1\40\1\41\1\42\1\31"+
    "\1\43\1\31\1\44\2\31\1\45\3\31\1\46\1\0"+
    "\1\47\1\0\1\50\1\0\1\51\1\23\1\52\1\53"+
    "\1\54\1\55\1\56\1\23\1\57\1\23\1\60\1\23"+
    "\1\61\1\62\1\63\1\64\1\23\1\65\1\23\1\66"+
    "\3\23\1\67\1\70\1\71\1\72\1\0\1\73\7\0"+
    "\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\2\1\1\3\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\2\6\1\11\2\6\1\12\1\6"+
    "\1\13\1\14\3\6\1\1\1\0\1\15\3\0\3\6"+
    "\1\16\4\6\1\0\1\17\2\0\1\20\1\21\1\22"+
    "\4\6\3\0\1\23\2\6\1\24\3\0\1\6\1\25"+
    "\3\0\1\26\20\0\1\27\37\0\1\30\265\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\74\0\74\0\170\0\264\0\360\0\74\0\74"+
    "\0\74\0\u012c\0\74\0\74\0\u0168\0\u01a4\0\u01e0\0\u012c"+
    "\0\u021c\0\u0258\0\u012c\0\u0294\0\74\0\74\0\u02d0\0\u030c"+
    "\0\u0348\0\u0384\0\264\0\74\0\u03c0\0\u03fc\0\u0438\0\u0474"+
    "\0\u04b0\0\u04ec\0\u012c\0\u0528\0\u0564\0\u05a0\0\u05dc\0\u0618"+
    "\0\74\0\u0654\0\u0690\0\u012c\0\u012c\0\u012c\0\u06cc\0\u0708"+
    "\0\u0744\0\u0780\0\u07bc\0\u07f8\0\u0834\0\u012c\0\u0870\0\u08ac"+
    "\0\74\0\u08e8\0\u0924\0\u0960\0\u099c\0\u012c\0\u09d8\0\u0a14"+
    "\0\u0a50\0\u012c\0\u0a8c\0\u0ac8\0\u0b04\0\u0b40\0\u0b7c\0\u0bb8"+
    "\0\u0bf4\0\u0c30\0\u0c6c\0\u0ca8\0\u0ce4\0\u0d20\0\u0d5c\0\u0d98"+
    "\0\u0dd4\0\u0e10\0\74\0\u0e4c\0\u0e88\0\u0ec4\0\u0f00\0\u0f3c"+
    "\0\u0f78\0\u0fb4\0\u0ff0\0\u102c\0\u1068\0\u10a4\0\u10e0\0\u111c"+
    "\0\u1158\0\u1194\0\u11d0\0\u120c\0\u1248\0\u1284\0\u12c0\0\u12fc"+
    "\0\u1338\0\u1374\0\u13b0\0\u13ec\0\u1428\0\u1464\0\u14a0\0\u14dc"+
    "\0\u1518\0\u1554\0\74\0\u1590\0\u15cc\0\u1608\0\u1644\0\u1680"+
    "\0\u16bc\0\u16f8\0\u1734\0\u1770\0\u17ac\0\u17e8\0\u1824\0\u1860"+
    "\0\u189c\0\u18d8\0\u1914\0\u1950\0\u198c\0\u19c8\0\u1a04\0\u1a40"+
    "\0\u1a7c\0\u1ab8\0\u1af4\0\u1b30\0\u1b6c\0\u1ba8\0\u1be4\0\u1c20"+
    "\0\u1c5c\0\u1c98\0\u1cd4\0\u1d10\0\u1d4c\0\u1d88\0\u1dc4\0\u1e00"+
    "\0\u1e3c\0\u1e78\0\u1eb4\0\u1ef0\0\u1f2c\0\u1f68\0\u1fa4\0\u1fe0"+
    "\0\u201c\0\u2058\0\u2094\0\u20d0\0\u210c\0\u2148\0\u2184\0\u21c0"+
    "\0\u21fc\0\u2238\0\u2274\0\u22b0\0\u22ec\0\u2328\0\u2364\0\u23a0"+
    "\0\u23dc\0\u2418\0\u2454\0\u2490\0\u24cc\0\u2508\0\u2544\0\u2580"+
    "\0\u25bc\0\u25f8\0\u2634\0\u2670\0\u26ac\0\u26e8\0\u2724\0\u2760"+
    "\0\u279c\0\u27d8\0\u2814\0\u2850\0\u288c\0\u28c8\0\u2904\0\u2940"+
    "\0\u297c\0\u29b8\0\u29f4\0\u2a30\0\u2a6c\0\u2aa8\0\u2ae4\0\u2b20"+
    "\0\u2b5c\0\u2b98\0\u2bd4\0\u2c10\0\u2c4c\0\u2c88\0\u2cc4\0\u2d00"+
    "\0\u2d3c\0\u2d78\0\u2db4\0\u2df0\0\u2e2c\0\u2e68\0\u2ea4\0\u2ee0"+
    "\0\u2f1c\0\u2f58\0\u2f94\0\u2fd0\0\u300c\0\u3048\0\u3084\0\u30c0"+
    "\0\u30fc\0\u3138\0\u3174\0\u31b0\0\u31ec\0\u3228\0\u3264\0\u32a0"+
    "\0\u32dc\0\u3318\0\u3354\0\u3390\0\u33cc\0\u3408\0\u3444\0\u3480"+
    "\0\u34bc\0\u34f8\0\u3534\0\u3570\0\u35ac\0\u35e8\0\u3624\0\u3660"+
    "\0\u369c\0\u36d8\0\u3714\0\u3750\0\u378c\0\u37c8\0\u3804\0\u3840"+
    "\0\u387c\0\u38b8\0\u38f4\0\u3930\0\u396c\0\u39a8\0\u39e4\0\u3a20"+
    "\0\u3a5c\0\u3a98\0\u3ad4\0\u3b10\0\u3b4c\0\u3b88\0\u3bc4\0\u3c00"+
    "\0\u3c3c\0\u3c78\0\u3cb4\0\u3cf0\0\u3d2c\0\u3d68\0\u3da4\0\u3de0"+
    "\0\u3e1c\0\u3e58\0\u3e94\0\u3ed0\0\u3f0c\0\u3f48\0\u3f84\0\u3fc0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\2\1\5\1\6\1\7"+
    "\1\10\1\2\1\11\2\2\6\12\1\13\1\14\1\15"+
    "\1\2\1\16\1\12\1\17\1\12\1\20\3\12\1\21"+
    "\1\22\2\12\1\23\1\24\1\25\1\26\5\12\1\27"+
    "\6\12\1\30\1\12\1\31\3\12\1\32\1\2\76\0"+
    "\1\3\71\0\6\33\1\34\65\33\7\0\1\35\101\0"+
    "\1\36\6\12\4\0\16\12\2\0\22\12\32\0\16\37"+
    "\43\0\1\36\6\12\4\0\10\12\1\40\5\12\2\0"+
    "\22\12\17\0\1\36\6\12\4\0\7\12\1\41\6\12"+
    "\2\0\22\12\17\0\1\36\6\12\4\0\11\12\1\42"+
    "\4\12\2\0\22\12\17\0\1\36\6\12\4\0\13\12"+
    "\1\43\2\12\2\0\22\12\17\0\1\36\6\12\4\0"+
    "\6\12\1\44\7\12\2\0\22\12\17\0\1\36\6\12"+
    "\4\0\16\12\2\0\21\12\1\45\17\0\1\36\6\12"+
    "\4\0\16\12\2\0\15\12\1\46\4\12\17\0\1\36"+
    "\6\12\4\0\16\12\2\0\10\12\1\47\11\12\14\0"+
    "\1\50\70\0\1\51\102\0\6\52\4\0\16\52\2\0"+
    "\22\52\32\0\16\53\43\0\1\36\6\12\4\0\3\12"+
    "\1\54\12\12\2\0\22\12\17\0\1\36\6\12\4\0"+
    "\12\12\1\55\3\12\2\0\22\12\17\0\1\36\6\12"+
    "\4\0\14\12\1\56\1\12\2\0\22\12\17\0\1\36"+
    "\6\12\4\0\14\12\1\57\1\12\2\0\22\12\17\0"+
    "\1\36\6\12\4\0\16\12\2\0\1\60\21\12\17\0"+
    "\1\36\6\12\4\0\16\12\2\0\7\12\1\61\12\12"+
    "\17\0\1\36\3\12\1\62\2\12\4\0\16\12\2\0"+
    "\22\12\14\0\1\63\77\0\6\52\3\0\1\64\16\52"+
    "\2\0\22\52\32\0\16\65\43\0\1\36\6\12\4\0"+
    "\5\12\1\66\10\12\2\0\22\12\17\0\1\36\6\12"+
    "\4\0\16\12\2\0\1\12\1\67\20\12\17\0\1\36"+
    "\6\12\4\0\16\12\2\0\12\12\1\70\7\12\17\0"+
    "\1\36\6\12\1\71\3\0\16\12\2\0\22\12\2\0"+
    "\12\63\1\72\61\63\16\0\6\73\4\0\16\73\3\0"+
    "\21\73\32\0\16\74\43\0\1\36\6\12\4\0\16\12"+
    "\2\0\12\12\1\75\7\12\17\0\1\36\6\12\4\0"+
    "\16\12\2\0\16\12\1\76\3\12\2\0\12\63\1\77"+
    "\61\63\15\0\1\100\6\73\4\0\16\73\3\0\21\73"+
    "\32\0\16\101\43\0\1\36\6\12\4\0\16\12\2\0"+
    "\3\12\1\102\16\12\2\0\12\63\1\77\60\63\1\3"+
    "\52\0\1\103\4\0\1\104\2\0\1\105\1\106\40\0"+
    "\16\107\111\0\1\110\76\0\1\111\61\0\1\104\104\0"+
    "\1\112\22\0\1\113\1\0\1\114\2\115\1\116\1\117"+
    "\5\0\16\101\107\0\1\111\17\0\1\120\10\0\6\121"+
    "\4\0\16\121\2\0\22\121\60\0\1\111\34\0\1\122"+
    "\3\117\75\0\1\123\42\0\1\124\1\125\1\126\20\0"+
    "\5\117\1\0\1\123\42\0\1\124\1\125\1\126\20\0"+
    "\2\117\1\127\2\114\1\0\1\123\42\0\1\124\1\125"+
    "\1\126\20\0\5\114\1\0\1\123\42\0\1\124\1\125"+
    "\1\126\20\0\6\121\4\0\16\121\2\0\22\121\17\0"+
    "\1\130\6\121\4\0\16\121\2\0\22\121\20\0\3\117"+
    "\2\114\1\0\1\123\42\0\1\124\1\125\1\126\71\0"+
    "\1\131\74\0\1\131\74\0\1\131\20\0\4\114\2\0"+
    "\1\123\42\0\1\124\1\125\1\126\20\0\6\132\4\0"+
    "\16\132\2\0\22\132\71\0\1\133\1\134\1\135\20\0"+
    "\6\132\3\0\1\136\16\132\2\0\22\132\71\0\1\137"+
    "\74\0\1\137\74\0\1\137\20\0\6\140\4\0\16\140"+
    "\3\0\21\140\71\0\1\141\1\142\1\143\17\0\1\144"+
    "\6\140\4\0\16\140\3\0\21\140\71\0\1\145\74\0"+
    "\1\145\74\0\1\145\54\0\1\146\4\0\1\147\2\0"+
    "\1\150\1\151\77\0\1\152\1\153\1\154\65\0\1\155"+
    "\76\0\1\156\61\0\1\147\104\0\1\157\75\0\1\160"+
    "\74\0\1\160\74\0\1\160\63\0\1\156\17\0\1\161"+
    "\10\0\6\162\1\163\3\0\16\162\2\0\22\162\60\0"+
    "\1\156\41\0\1\123\42\0\1\152\1\153\1\154\20\0"+
    "\6\162\1\163\3\0\16\162\2\0\22\162\17\0\1\164"+
    "\6\162\4\0\16\162\2\0\22\162\20\0\6\165\4\0"+
    "\16\165\2\0\22\165\20\0\6\165\3\0\1\166\16\165"+
    "\2\0\22\165\20\0\6\167\4\0\16\167\3\0\21\167"+
    "\17\0\1\170\6\167\4\0\16\167\3\0\21\167\54\0"+
    "\1\171\4\0\1\172\2\0\1\173\1\174\73\0\1\175"+
    "\76\0\1\176\61\0\1\172\104\0\1\177\67\0\1\176"+
    "\17\0\1\200\10\0\6\201\4\0\16\201\2\0\22\201"+
    "\60\0\1\176\33\0\6\201\4\0\16\201\2\0\22\201"+
    "\17\0\1\202\6\201\4\0\16\201\2\0\22\201\20\0"+
    "\6\203\4\0\16\203\2\0\22\203\20\0\6\203\3\0"+
    "\1\204\16\203\2\0\22\203\20\0\6\205\4\0\16\205"+
    "\3\0\21\205\17\0\1\206\6\205\4\0\16\205\3\0"+
    "\21\205\54\0\1\207\4\0\1\210\2\0\1\211\1\212"+
    "\73\0\1\213\76\0\1\214\61\0\1\210\104\0\1\215"+
    "\67\0\1\214\17\0\1\216\10\0\6\217\4\0\16\217"+
    "\2\0\22\217\60\0\1\214\33\0\6\217\4\0\16\217"+
    "\2\0\22\217\17\0\1\220\6\217\4\0\16\217\2\0"+
    "\22\217\20\0\6\221\4\0\16\221\2\0\22\221\20\0"+
    "\6\221\3\0\1\222\16\221\2\0\22\221\20\0\6\223"+
    "\4\0\16\223\3\0\21\223\17\0\1\224\6\223\4\0"+
    "\16\223\3\0\21\223\54\0\1\225\4\0\1\226\2\0"+
    "\1\227\1\230\73\0\1\231\76\0\1\232\61\0\1\226"+
    "\104\0\1\233\67\0\1\232\17\0\1\234\10\0\6\235"+
    "\4\0\16\235\2\0\22\235\60\0\1\232\33\0\6\235"+
    "\4\0\16\235\2\0\22\235\17\0\1\236\6\235\4\0"+
    "\16\235\2\0\22\235\20\0\6\237\4\0\16\237\2\0"+
    "\22\237\20\0\6\237\3\0\1\240\16\237\2\0\22\237"+
    "\20\0\6\241\4\0\16\241\3\0\21\241\17\0\1\242"+
    "\6\241\4\0\16\241\3\0\21\241\54\0\1\243\4\0"+
    "\1\244\2\0\1\245\1\246\73\0\1\247\76\0\1\250"+
    "\61\0\1\244\104\0\1\251\67\0\1\250\17\0\1\252"+
    "\10\0\6\253\4\0\16\253\2\0\22\253\60\0\1\250"+
    "\33\0\6\253\4\0\16\253\2\0\22\253\17\0\1\254"+
    "\6\253\4\0\16\253\2\0\22\253\20\0\6\255\4\0"+
    "\16\255\2\0\22\255\20\0\6\255\3\0\1\256\16\255"+
    "\2\0\22\255\20\0\6\257\4\0\16\257\3\0\21\257"+
    "\17\0\1\260\6\257\4\0\16\257\3\0\21\257\54\0"+
    "\1\261\4\0\1\262\2\0\1\263\1\264\73\0\1\265"+
    "\76\0\1\266\61\0\1\262\104\0\1\267\67\0\1\266"+
    "\17\0\1\270\10\0\6\271\4\0\16\271\2\0\22\271"+
    "\60\0\1\266\33\0\6\271\4\0\16\271\2\0\22\271"+
    "\17\0\1\272\6\271\4\0\16\271\2\0\22\271\20\0"+
    "\6\273\4\0\16\273\2\0\22\273\20\0\6\273\3\0"+
    "\1\274\16\273\2\0\22\273\20\0\6\275\4\0\16\275"+
    "\3\0\21\275\17\0\1\276\6\275\4\0\16\275\3\0"+
    "\21\275\54\0\1\277\4\0\1\300\2\0\1\301\1\302"+
    "\73\0\1\303\76\0\1\304\61\0\1\300\104\0\1\305"+
    "\67\0\1\304\17\0\1\306\10\0\6\307\4\0\16\307"+
    "\2\0\22\307\60\0\1\304\33\0\6\307\4\0\16\307"+
    "\2\0\22\307\17\0\1\310\6\307\4\0\16\307\2\0"+
    "\22\307\20\0\6\311\4\0\16\311\2\0\22\311\20\0"+
    "\6\311\3\0\1\312\16\311\2\0\22\311\20\0\6\313"+
    "\4\0\16\313\3\0\21\313\17\0\1\314\6\313\4\0"+
    "\16\313\3\0\21\313\54\0\1\315\4\0\1\316\2\0"+
    "\1\317\1\320\73\0\1\321\76\0\1\322\61\0\1\316"+
    "\104\0\1\323\67\0\1\322\17\0\1\324\10\0\6\325"+
    "\4\0\16\325\2\0\22\325\60\0\1\322\33\0\6\325"+
    "\4\0\16\325\2\0\22\325\17\0\1\326\6\325\4\0"+
    "\16\325\2\0\22\325\20\0\6\327\4\0\16\327\2\0"+
    "\22\327\20\0\6\327\3\0\1\330\16\327\2\0\22\327"+
    "\20\0\6\331\4\0\16\331\3\0\21\331\17\0\1\332"+
    "\6\331\4\0\16\331\3\0\21\331\54\0\1\333\4\0"+
    "\1\334\2\0\1\335\1\336\73\0\1\337\76\0\1\340"+
    "\61\0\1\334\104\0\1\341\67\0\1\340\17\0\1\342"+
    "\10\0\6\343\4\0\16\343\2\0\22\343\60\0\1\340"+
    "\33\0\6\343\4\0\16\343\2\0\22\343\17\0\1\344"+
    "\6\343\4\0\16\343\2\0\22\343\20\0\6\345\4\0"+
    "\16\345\2\0\22\345\20\0\6\345\3\0\1\346\16\345"+
    "\2\0\22\345\20\0\6\347\4\0\16\347\3\0\21\347"+
    "\17\0\1\350\6\347\4\0\16\347\3\0\21\347\54\0"+
    "\1\351\4\0\1\352\2\0\1\353\1\354\73\0\1\355"+
    "\76\0\1\356\61\0\1\352\104\0\1\357\67\0\1\356"+
    "\17\0\1\360\10\0\6\361\4\0\16\361\2\0\22\361"+
    "\60\0\1\356\33\0\6\361\4\0\16\361\2\0\22\361"+
    "\17\0\1\362\6\361\4\0\16\361\2\0\22\361\20\0"+
    "\6\363\4\0\16\363\2\0\22\363\20\0\6\363\3\0"+
    "\1\364\16\363\2\0\22\363\20\0\6\365\4\0\16\365"+
    "\3\0\21\365\17\0\1\366\6\365\4\0\16\365\3\0"+
    "\21\365\54\0\1\367\4\0\1\370\2\0\1\371\1\372"+
    "\73\0\1\373\76\0\1\374\61\0\1\370\104\0\1\375"+
    "\67\0\1\374\17\0\1\376\10\0\6\377\1\163\3\0"+
    "\16\377\2\0\22\377\60\0\1\374\33\0\6\377\1\163"+
    "\3\0\16\377\2\0\22\377\17\0\1\u0100\6\377\4\0"+
    "\16\377\2\0\22\377\20\0\6\u0101\4\0\16\u0101\2\0"+
    "\22\u0101\20\0\6\u0101\3\0\1\u0102\16\u0101\2\0\22\u0101"+
    "\20\0\6\u0103\4\0\16\u0103\3\0\21\u0103\17\0\1\u0104"+
    "\6\u0103\4\0\16\u0103\3\0\21\u0103\54\0\1\u0105\4\0"+
    "\1\u0106\2\0\1\u0107\1\u0108\73\0\1\u0109\76\0\1\u010a"+
    "\61\0\1\u0106\104\0\1\u010b\67\0\1\u010a\17\0\1\u010c"+
    "\10\0\6\u010d\4\0\16\u010d\2\0\22\u010d\60\0\1\u010a"+
    "\33\0\6\u010d\4\0\16\u010d\2\0\22\u010d\17\0\1\u010e"+
    "\6\u010d\4\0\16\u010d\2\0\22\u010d\20\0\6\u010f\4\0"+
    "\16\u010f\2\0\22\u010f\20\0\6\u010f\3\0\1\u0110\16\u010f"+
    "\2\0\22\u010f\20\0\6\u0111\4\0\16\u0111\3\0\21\u0111"+
    "\17\0\1\u0112\6\u0111\4\0\16\u0111\3\0\21\u0111\54\0"+
    "\1\u0113\4\0\1\u0114\2\0\1\u0115\1\u0116\73\0\1\u0117"+
    "\76\0\1\u0118\61\0\1\u0114\104\0\1\u0119\67\0\1\u0118"+
    "\17\0\1\u011a\10\0\6\u011b\4\0\16\u011b\2\0\22\u011b"+
    "\60\0\1\u0118\33\0\6\u011b\4\0\16\u011b\2\0\22\u011b"+
    "\17\0\1\u011c\6\u011b\4\0\16\u011b\2\0\22\u011b\20\0"+
    "\6\u011d\4\0\16\u011d\2\0\22\u011d\20\0\6\u011d\3\0"+
    "\1\u011e\16\u011d\2\0\22\u011d\20\0\6\u011f\4\0\16\u011f"+
    "\3\0\21\u011f\17\0\1\u0120\6\u011f\4\0\16\u011f\3\0"+
    "\21\u011f\54\0\1\u0121\4\0\1\u0122\2\0\1\u0123\1\u0124"+
    "\73\0\1\u0125\76\0\1\u0126\61\0\1\u0122\104\0\1\u0127"+
    "\67\0\1\u0126\17\0\1\u0128\16\0\1\163\125\0\1\u0126"+
    "\41\0\1\163\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16380];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\3\1\3\11\1\1\2\11\10\1\2\11"+
    "\4\1\1\0\1\11\3\0\10\1\1\0\1\11\2\0"+
    "\7\1\3\0\3\1\1\11\3\0\2\1\3\0\1\1"+
    "\20\0\1\11\37\0\1\11\265\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[296];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Unrecognized character: " + yytext());
            }
            // fall through
          case 25: break;
          case 2:
            { ;
            }
            // fall through
          case 26: break;
          case 3:
            { return new Symbol(sym.TA);
            }
            // fall through
          case 27: break;
          case 4:
            { return new Symbol(sym.TC);
            }
            // fall through
          case 28: break;
          case 5:
            { return new Symbol(sym.V);
            }
            // fall through
          case 29: break;
          case 6:
            { return new Symbol(sym.VAR, new String(yytext()));
            }
            // fall through
          case 30: break;
          case 7:
            { return new Symbol(sym.PV);
            }
            // fall through
          case 31: break;
          case 8:
            { return new Symbol(sym.EQ);
            }
            // fall through
          case 32: break;
          case 9:
            { return new Symbol(sym.F);
            }
            // fall through
          case 33: break;
          case 10:
            { return new Symbol(sym.T);
            }
            // fall through
          case 34: break;
          case 11:
            { return new Symbol(sym.QA);
            }
            // fall through
          case 35: break;
          case 12:
            { return new Symbol(sym.QC);
            }
            // fall through
          case 36: break;
          case 13:
            { return new Symbol(sym.STR, new String(yytext()));
            }
            // fall through
          case 37: break;
          case 14:
            { return new Symbol(sym.OR);
            }
            // fall through
          case 38: break;
          case 15:
            { return new Symbol(sym.SEP);
            }
            // fall through
          case 39: break;
          case 16:
            { return new Symbol(sym.AND);
            }
            // fall through
          case 40: break;
          case 17:
            { return new Symbol(sym.CMP);
            }
            // fall through
          case 41: break;
          case 18:
            { return new Symbol(sym.NOT);
            }
            // fall through
          case 42: break;
          case 19:
            { return new Symbol(sym.WITH);
            }
            // fall through
          case 43: break;
          case 20:
            { return new Symbol(sym.TOK3);
            }
            // fall through
          case 44: break;
          case 21:
            { return new Symbol(sym.PRINT);
            }
            // fall through
          case 45: break;
          case 22:
            { return new Symbol(sym.FZ);
            }
            // fall through
          case 46: break;
          case 23:
            { return new Symbol(sym.TOK1);
            }
            // fall through
          case 47: break;
          case 24:
            { return new Symbol(sym.TOK2);
            }
            // fall through
          case 48: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
