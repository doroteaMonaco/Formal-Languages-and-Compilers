
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\007\000\002\011" +
    "\004\000\002\011\004\000\002\011\005\000\002\011\013" +
    "\000\002\011\012\000\002\011\012\000\002\011\012\000" +
    "\002\011\011\000\002\011\012\000\002\011\002\000\002" +
    "\010\004\000\002\010\003\000\002\007\003\000\002\007" +
    "\003\000\002\006\005\000\002\006\006\000\002\005\003" +
    "\000\002\005\003\000\002\004\006\000\002\003\005\000" +
    "\002\017\004\000\002\017\003\000\002\016\007\000\002" +
    "\015\007\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\014\007\000\002\014\007\000\002\014\006" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\013\006\000\002\012\005\000\002" +
    "\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\012\013\007\014\006\015\005\027\ufff6\001" +
    "\002\000\012\013\ufff4\014\ufff4\015\ufff4\027\ufff4\001\002" +
    "\000\012\013\ufff2\014\ufff2\015\ufff2\027\ufff2\001\002\000" +
    "\010\013\007\014\134\015\005\001\002\000\012\013\ufff3" +
    "\014\ufff3\015\ufff3\027\ufff3\001\002\000\004\002\133\001" +
    "\002\000\004\027\040\001\002\000\010\013\007\014\014" +
    "\015\005\001\002\000\012\013\ufff5\014\ufff5\015\ufff5\027" +
    "\ufff5\001\002\000\012\013\007\014\015\015\005\027\ufffe" +
    "\001\002\000\006\013\007\015\005\001\002\000\012\013" +
    "\007\014\017\015\005\027\ufffd\001\002\000\010\013\007" +
    "\014\020\015\005\001\002\000\006\013\007\015\005\001" +
    "\002\000\010\013\007\014\022\015\005\001\002\000\010" +
    "\013\007\014\023\015\005\001\002\000\006\013\007\015" +
    "\005\001\002\000\010\013\007\014\025\015\005\001\002" +
    "\000\010\013\007\015\005\027\ufffb\001\002\000\010\013" +
    "\007\015\005\027\ufffc\001\002\000\010\013\007\015\005" +
    "\027\ufff7\001\002\000\010\013\007\014\031\015\005\001" +
    "\002\000\006\013\007\015\005\001\002\000\010\013\007" +
    "\015\005\027\ufff9\001\002\000\010\013\007\014\034\015" +
    "\005\001\002\000\006\013\007\015\005\001\002\000\010" +
    "\013\007\014\036\015\005\001\002\000\006\013\007\015" +
    "\005\001\002\000\010\013\007\015\005\027\ufffa\001\002" +
    "\000\006\016\043\031\041\001\002\000\004\006\130\001" +
    "\002\000\016\013\uffef\014\uffef\015\uffef\016\uffef\027\uffef" +
    "\031\uffef\001\002\000\016\007\061\017\057\020\064\025" +
    "\060\026\063\031\056\001\002\000\016\013\007\014\006" +
    "\015\005\016\043\027\ufff6\031\041\001\002\000\016\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\027\uffee\031\uffee\001\002" +
    "\000\006\016\043\031\041\001\002\000\006\016\043\031" +
    "\041\001\002\000\006\016\043\031\041\001\002\000\016" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\027\ufff0\031\ufff0\001" +
    "\002\000\006\016\043\031\041\001\002\000\004\027\054" +
    "\001\002\000\004\002\000\001\002\000\016\013\ufff1\014" +
    "\ufff1\015\ufff1\016\ufff1\027\ufff1\031\ufff1\001\002\000\020" +
    "\004\uffde\005\uffde\010\uffde\011\uffde\021\uffde\023\uffde\024" +
    "\uffde\001\002\000\020\004\uffe1\005\uffe1\010\uffe1\011\uffe1" +
    "\021\uffe1\023\uffe1\024\uffe1\001\002\000\016\007\061\017" +
    "\057\020\064\025\060\026\063\031\056\001\002\000\016" +
    "\007\061\017\057\020\064\025\115\026\063\031\056\001" +
    "\002\000\020\004\uffdf\005\uffdf\010\uffdf\011\uffdf\021\uffdf" +
    "\023\uffdf\024\uffdf\001\002\000\004\007\107\001\002\000" +
    "\020\004\uffe0\005\uffe0\010\uffe0\011\uffe0\021\uffe0\023\uffe0" +
    "\024\uffe0\001\002\000\010\021\071\023\070\024\072\001" +
    "\002\000\020\013\uffec\014\uffec\015\uffec\016\uffec\021\071" +
    "\027\uffec\031\uffec\001\002\000\020\013\uffea\014\uffea\015" +
    "\uffea\016\uffea\021\uffea\027\uffea\031\uffea\001\002\000\016" +
    "\007\061\017\057\020\064\025\060\026\063\031\056\001" +
    "\002\000\016\007\061\017\057\020\064\025\060\026\063" +
    "\031\056\001\002\000\016\007\061\017\057\020\064\025" +
    "\060\026\063\031\056\001\002\000\020\004\uffe6\005\uffe6" +
    "\010\uffe6\011\uffe6\021\uffe6\023\uffe6\024\uffe6\001\002\000" +
    "\010\011\075\023\070\024\072\001\002\000\004\022\077" +
    "\001\002\000\004\012\104\001\002\000\004\007\100\001" +
    "\002\000\004\030\101\001\002\000\004\010\102\001\002" +
    "\000\004\004\103\001\002\000\004\012\uffe8\001\002\000" +
    "\020\013\uffe9\014\uffe9\015\uffe9\016\uffe9\021\uffe9\027\uffe9" +
    "\031\uffe9\001\002\000\020\004\uffe7\005\uffe7\010\uffe7\011" +
    "\uffe7\021\uffe7\023\uffe7\024\uffe7\001\002\000\020\013\uffeb" +
    "\014\uffeb\015\uffeb\016\uffeb\021\uffeb\027\uffeb\031\uffeb\001" +
    "\002\000\016\007\061\017\057\020\064\025\060\026\063" +
    "\031\056\001\002\000\012\005\uffdb\010\uffdb\023\070\024" +
    "\072\001\002\000\006\005\113\010\112\001\002\000\020" +
    "\004\uffdd\005\uffdd\010\uffdd\011\uffdd\021\uffdd\023\uffdd\024" +
    "\uffdd\001\002\000\016\007\061\017\057\020\064\025\060" +
    "\026\063\031\056\001\002\000\012\005\uffdc\010\uffdc\023" +
    "\070\024\072\001\002\000\016\007\061\017\057\020\064" +
    "\025\060\026\063\031\056\001\002\000\006\023\117\024" +
    "\120\001\002\000\016\007\061\017\057\020\064\025\060" +
    "\026\063\031\056\001\002\000\016\007\061\017\057\020" +
    "\064\025\060\026\063\031\056\001\002\000\010\010\122" +
    "\023\uffe6\024\uffe6\001\002\000\020\004\uffe3\005\uffe3\010" +
    "\uffe3\011\uffe3\021\uffe3\023\uffe3\024\uffe3\001\002\000\010" +
    "\010\124\023\uffe7\024\uffe7\001\002\000\020\004\uffe4\005" +
    "\uffe4\010\uffe4\011\uffe4\021\uffe4\023\uffe4\024\uffe4\001\002" +
    "\000\010\010\126\023\uffe5\024\uffe5\001\002\000\020\004" +
    "\uffe2\005\uffe2\010\uffe2\011\uffe2\021\uffe2\023\uffe2\024\uffe2" +
    "\001\002\000\020\004\uffe5\005\uffe5\010\uffe5\011\uffe5\021" +
    "\uffe5\023\uffe5\024\uffe5\001\002\000\016\007\061\017\057" +
    "\020\064\025\060\026\063\031\056\001\002\000\010\004" +
    "\132\023\070\024\072\001\002\000\016\013\uffed\014\uffed" +
    "\015\uffed\016\uffed\027\uffed\031\uffed\001\002\000\004\002" +
    "\001\001\002\000\006\013\007\015\005\001\002\000\010" +
    "\013\007\015\005\027\uffff\001\002\000\010\013\007\014" +
    "\137\015\005\001\002\000\006\013\007\015\005\001\002" +
    "\000\010\013\007\014\141\015\005\001\002\000\006\013" +
    "\007\015\005\001\002\000\010\013\007\015\005\027\ufff8" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\140\000\012\002\007\007\003\010\011\011\010\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\003" +
    "\010\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\012\001\001\000\002\001\001" +
    "\000\006\007\003\010\015\001\001\000\006\007\003\010" +
    "\032\001\001\000\004\007\012\001\001\000\006\007\003" +
    "\010\020\001\001\000\006\007\003\010\027\001\001\000" +
    "\004\007\012\001\001\000\006\007\003\010\023\001\001" +
    "\000\006\007\003\010\026\001\001\000\004\007\012\001" +
    "\001\000\006\007\003\010\025\001\001\000\004\007\012" +
    "\001\001\000\004\007\012\001\001\000\004\007\012\001" +
    "\001\000\006\007\003\010\031\001\001\000\004\007\012" +
    "\001\001\000\004\007\012\001\001\000\006\007\003\010" +
    "\034\001\001\000\004\007\012\001\001\000\006\007\003" +
    "\010\036\001\001\000\004\007\012\001\001\000\012\003" +
    "\044\004\041\005\045\006\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\061\014\064\001\001\000" +
    "\016\003\044\004\041\005\051\007\003\010\011\011\052" +
    "\001\001\000\002\001\001\000\010\003\044\004\041\005" +
    "\046\001\001\000\010\003\044\004\041\005\047\001\001" +
    "\000\010\003\044\004\041\005\050\001\001\000\002\001" +
    "\001\000\010\003\044\004\041\005\054\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\061\014\126\001\001" +
    "\000\006\013\061\014\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\066\017\065" +
    "\001\001\000\004\016\105\001\001\000\002\001\001\000" +
    "\006\013\061\014\104\001\001\000\006\013\061\014\073" +
    "\001\001\000\006\013\061\014\072\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\015\075\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\012\110\013" +
    "\061\014\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\013\061\014\113\001\001\000" +
    "\002\001\001\000\006\013\061\014\124\001\001\000\002" +
    "\001\001\000\006\013\061\014\122\001\001\000\006\013" +
    "\061\014\120\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\013\061\014\130" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\007\003\010\135\001\001\000\004\007\012" +
    "\001\001\000\004\007\012\001\001\000\006\007\003\010" +
    "\137\001\001\000\004\007\012\001\001\000\006\007\003" +
    "\010\141\001\001\000\004\007\012\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, Boolean> map = new HashMap<String, Boolean>();

    public class Act {
        private Boolean ex;
        private String str;

        Act(Boolean ex, String str) {
            this.ex = ex;
            this.str = str;
        }

        public Boolean getBool() {
            return this.ex;
        }

        public String getStr() {
            return this.str;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP command_list header SEP 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK2 toks 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= toks TOK2 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= toks TOK2 toks 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= toks TOK2 toks TOK2 toks TOK2 toks TOK2 toks 
            { parser.Tree.reduce(9,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= toks TOK2 toks TOK2 toks TOK2 toks TOK2 
            { parser.Tree.reduce(8,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= toks TOK2 TOK2 toks TOK2 toks TOK2 toks 
            { parser.Tree.reduce(8,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= toks TOK2 toks TOK2 TOK2 toks TOK2 toks 
            { parser.Tree.reduce(8,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= TOK2 TOK2 toks TOK2 toks TOK2 toks 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= toks TOK2 toks TOK2 toks TOK2 TOK2 toks 
            { parser.Tree.reduce(8,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header ::= 
            { parser.Tree.reduce(0,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // toks ::= toks tok 
            { parser.Tree.reduce(2,"toks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toks",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // toks ::= tok 
            { parser.Tree.reduce(1,"toks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toks",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tok ::= TOK1 
            { parser.Tree.reduce(1,"tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tok ::= TOK3 
            { parser.Tree.reduce(1,"tok",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command_list ::= command command command command 
            { parser.Tree.reduce(4,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // command ::= assign 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // command ::= cmp 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // assign ::= VAR EQ exp PV 
            { parser.Tree.reduce(4,"assign",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(x, ex);
    if(ex == false){
        System.out.println(x+" F");
    }
    else {
        System.out.println(x+" T");
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assign",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // cmp ::= CMP exp action_list 
            { parser.Tree.reduce(3,"cmp",1);
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Act> list = (ArrayList<Act>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(Act ac: list){
        if(ac.getBool() == ex) {
            System.out.println(ac.getStr());
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // action_list ::= action_list act 
            { parser.Tree.reduce(2,"action_list",0);
              ArrayList<Act> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Act> list = (ArrayList<Act>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Act ac = (Act)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ac);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // action_list ::= act 
            { parser.Tree.reduce(1,"action_list",0);
              ArrayList<Act> RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Act ac = (Act)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Act> list = new ArrayList();
    list.add(ac);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("action_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // act ::= WITH exp QA print QC 
            { parser.Tree.reduce(5,"act",0);
              Act RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Act ac = new Act(ex, str);
    RESULT = ac;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // print ::= PRINT TA STR TC PV 
            { parser.Tree.reduce(5,"print",0);
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = str;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = e1&&e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = e1||e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Boolean RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = !ex;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= TA exp AND exp TC 
            { parser.Tree.reduce(5,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = e1&&e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= TA exp OR exp TC 
            { parser.Tree.reduce(5,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = e1||e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= TA NOT exp TC 
            { parser.Tree.reduce(4,"exp",0);
              Boolean RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = !ex;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // exp ::= T 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT =null;
		
    Boolean res = true;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= F 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT =null;
		
    Boolean res = false;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= fz 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT =null;
		int boleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int boright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bo = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = bo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= VAR 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean bo = parser.map.get(x);
    RESULT = bo;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // fz ::= FZ TA exp_list TC 
            { parser.Tree.reduce(4,"fz",0);
              Boolean RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Boolean> list = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = true;
    for(Boolean bo: list){
        res &= bo;
    }
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fz",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // exp_list ::= exp_list V exp 
            { parser.Tree.reduce(3,"exp_list",0);
              ArrayList<Boolean> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Boolean> list = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_list ::= exp 
            { parser.Tree.reduce(1,"exp_list",0);
              ArrayList<Boolean> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Boolean> list = new ArrayList();
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
