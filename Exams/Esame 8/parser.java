
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\045\000\002\002\004\000\002\002\005\000\002\013" +
    "\005\000\002\013\013\000\002\013\002\000\002\012\003" +
    "\000\002\012\003\000\002\012\002\000\002\011\004\000" +
    "\002\011\003\000\002\010\004\000\002\010\003\000\002" +
    "\007\003\000\002\007\002\000\002\006\005\000\002\006" +
    "\006\000\002\005\003\000\002\005\003\000\002\004\006" +
    "\000\002\003\005\000\002\021\004\000\002\021\003\000" +
    "\002\020\007\000\002\017\007\000\002\016\005\000\002" +
    "\016\005\000\002\016\004\000\002\016\007\000\002\016" +
    "\007\000\002\016\006\000\002\016\003\000\002\016\003" +
    "\000\002\016\003\000\002\016\003\000\002\015\006\000" +
    "\002\014\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\012\013\005\014\ufffa\015\004\027\ufffd\001" +
    "\002\000\010\014\ufff6\015\ufff6\027\ufff6\001\002\000\010" +
    "\013\ufff8\014\ufff8\027\ufff8\001\002\000\010\013\117\014" +
    "\ufffc\027\ufffc\001\002\000\004\002\116\001\002\000\010" +
    "\014\ufffb\015\115\027\ufffb\001\002\000\004\027\023\001" +
    "\002\000\004\014\013\001\002\000\012\013\005\014\ufffa" +
    "\015\004\027\ufffa\001\002\000\006\014\015\027\uffff\001" +
    "\002\000\010\013\005\014\ufffa\015\004\001\002\000\004" +
    "\014\017\001\002\000\010\013\005\014\ufffa\015\004\001" +
    "\002\000\004\014\021\001\002\000\010\013\005\015\004" +
    "\027\ufffa\001\002\000\004\027\ufffe\001\002\000\010\002" +
    "\ufff4\016\026\030\024\001\002\000\004\006\112\001\002" +
    "\000\004\002\000\001\002\000\016\011\044\017\043\020" +
    "\047\025\042\026\046\030\040\001\002\000\010\002\ufff5" +
    "\016\026\030\024\001\002\000\010\002\ufff0\016\ufff0\030" +
    "\ufff0\001\002\000\006\016\026\030\024\001\002\000\010" +
    "\002\ufff1\016\ufff1\030\ufff1\001\002\000\006\016\026\030" +
    "\024\001\002\000\006\016\026\030\024\001\002\000\010" +
    "\002\ufff2\016\ufff2\030\ufff2\001\002\000\006\016\026\030" +
    "\024\001\002\000\010\002\ufff3\016\ufff3\030\ufff3\001\002" +
    "\000\020\004\uffe0\005\uffe0\007\uffe0\012\uffe0\021\uffe0\023" +
    "\uffe0\024\uffe0\001\002\000\010\021\077\023\056\024\057" +
    "\001\002\000\016\011\044\017\043\020\047\025\042\026" +
    "\046\030\040\001\002\000\020\004\uffe3\005\uffe3\007\uffe3" +
    "\012\uffe3\021\uffe3\023\uffe3\024\uffe3\001\002\000\016\011" +
    "\044\017\043\020\047\025\063\026\046\030\040\001\002" +
    "\000\020\004\uffe1\005\uffe1\007\uffe1\012\uffe1\021\uffe1\023" +
    "\uffe1\024\uffe1\001\002\000\004\011\050\001\002\000\020" +
    "\004\uffe2\005\uffe2\007\uffe2\012\uffe2\021\uffe2\023\uffe2\024" +
    "\uffe2\001\002\000\016\011\044\017\043\020\047\025\042" +
    "\026\046\030\040\001\002\000\012\005\uffdd\012\uffdd\023" +
    "\056\024\057\001\002\000\006\005\054\012\053\001\002" +
    "\000\020\004\uffdf\005\uffdf\007\uffdf\012\uffdf\021\uffdf\023" +
    "\uffdf\024\uffdf\001\002\000\016\011\044\017\043\020\047" +
    "\025\042\026\046\030\040\001\002\000\012\005\uffde\012" +
    "\uffde\023\056\024\057\001\002\000\016\011\044\017\043" +
    "\020\047\025\042\026\046\030\040\001\002\000\016\011" +
    "\044\017\043\020\047\025\042\026\046\030\040\001\002" +
    "\000\020\004\uffe8\005\uffe8\007\uffe8\012\uffe8\021\uffe8\023" +
    "\uffe8\024\uffe8\001\002\000\020\004\uffe9\005\uffe9\007\uffe9" +
    "\012\uffe9\021\uffe9\023\uffe9\024\uffe9\001\002\000\006\023" +
    "\066\024\067\001\002\000\016\011\044\017\043\020\047" +
    "\025\042\026\046\030\040\001\002\000\010\012\065\023" +
    "\uffe7\024\uffe7\001\002\000\020\004\uffe4\005\uffe4\007\uffe4" +
    "\012\uffe4\021\uffe4\023\uffe4\024\uffe4\001\002\000\016\011" +
    "\044\017\043\020\047\025\042\026\046\030\040\001\002" +
    "\000\016\011\044\017\043\020\047\025\042\026\046\030" +
    "\040\001\002\000\010\012\071\023\uffe8\024\uffe8\001\002" +
    "\000\020\004\uffe5\005\uffe5\007\uffe5\012\uffe5\021\uffe5\023" +
    "\uffe5\024\uffe5\001\002\000\010\012\073\023\uffe9\024\uffe9" +
    "\001\002\000\020\004\uffe6\005\uffe6\007\uffe6\012\uffe6\021" +
    "\uffe6\023\uffe6\024\uffe6\001\002\000\020\004\uffe7\005\uffe7" +
    "\007\uffe7\012\uffe7\021\uffe7\023\uffe7\024\uffe7\001\002\000" +
    "\012\002\uffee\016\uffee\021\077\030\uffee\001\002\000\012" +
    "\002\uffec\016\uffec\021\uffec\030\uffec\001\002\000\016\011" +
    "\044\017\043\020\047\025\042\026\046\030\040\001\002" +
    "\000\010\007\101\023\056\024\057\001\002\000\004\022" +
    "\103\001\002\000\004\010\110\001\002\000\004\011\104" +
    "\001\002\000\004\031\105\001\002\000\004\012\106\001" +
    "\002\000\004\004\107\001\002\000\004\010\uffea\001\002" +
    "\000\012\002\uffeb\016\uffeb\021\uffeb\030\uffeb\001\002\000" +
    "\012\002\uffed\016\uffed\021\uffed\030\uffed\001\002\000\016" +
    "\011\044\017\043\020\047\025\042\026\046\030\040\001" +
    "\002\000\010\004\114\023\056\024\057\001\002\000\010" +
    "\002\uffef\016\uffef\030\uffef\001\002\000\010\014\ufff7\015" +
    "\ufff7\027\ufff7\001\002\000\004\002\001\001\002\000\010" +
    "\013\ufff9\014\ufff9\027\ufff9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\115\000\014\002\006\010\007\011\005\012\011\013" +
    "\010\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\007\011\005\012\013" +
    "\001\001\000\002\001\001\000\010\010\007\011\005\012" +
    "\015\001\001\000\002\001\001\000\010\010\007\011\005" +
    "\012\017\001\001\000\002\001\001\000\010\010\007\011" +
    "\005\012\021\001\001\000\002\001\001\000\014\003\027" +
    "\004\031\005\030\006\026\007\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\044\016\040\001\001" +
    "\000\010\003\027\004\031\005\035\001\001\000\002\001" +
    "\001\000\010\003\027\004\031\005\032\001\001\000\002" +
    "\001\001\000\010\003\027\004\031\005\033\001\001\000" +
    "\010\003\027\004\031\005\034\001\001\000\002\001\001" +
    "\000\010\003\027\004\031\005\036\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\075\021\074\001\001" +
    "\000\006\015\044\016\073\001\001\000\002\001\001\000" +
    "\006\015\044\016\061\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\051\015\044\016" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\015\044\016\054\001\001\000\002\001" +
    "\001\000\006\015\044\016\060\001\001\000\006\015\044" +
    "\016\057\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\015\044\016\063\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\044\016\071\001" +
    "\001\000\006\015\044\016\067\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\020\110\001\001\000\002\001\001" +
    "\000\006\015\044\016\077\001\001\000\002\001\001\000" +
    "\004\017\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\044\016\112\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, Boolean>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, Boolean> map = new HashMap();

    public class Action {
        private Boolean bx;
        private String str;

        Action(Boolean bx, String str) {
            this.bx = bx;
            this.str = str;
        }

        public Boolean getBool() {
            return this.bx;
        }

        public String getStr() {
            return this.str;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP code_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= toks TOK2 toks 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= toks TOK2 toks TOK2 toks TOK2 toks TOK2 toks 
            { parser.Tree.reduce(9,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= 
            { parser.Tree.reduce(0,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // toks ::= tok1s 
            { parser.Tree.reduce(1,"toks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toks",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // toks ::= tok3s 
            { parser.Tree.reduce(1,"toks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toks",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // toks ::= 
            { parser.Tree.reduce(0,"toks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toks",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok3s ::= tok3s TOK3 
            { parser.Tree.reduce(2,"tok3s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok3s ::= TOK3 
            { parser.Tree.reduce(1,"tok3s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok3s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // code_section ::= command_list 
            { parser.Tree.reduce(1,"code_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // code_section ::= 
            { parser.Tree.reduce(0,"code_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("code_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // command_list ::= command command command command 
            { parser.Tree.reduce(4,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // command ::= assignment 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // command ::= cmp 
            { parser.Tree.reduce(1,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // assignment ::= VAR EQ bool_exp PV 
            { parser.Tree.reduce(4,"assignment",0);
              Object RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String x = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean bx = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(x, bx);
    if(bx == true) {
        System.out.println(x+" T");
    }
    else {
        System.out.println(x+" F");

    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("assignment",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // cmp ::= CMP bool_exp actions_list 
            { parser.Tree.reduce(3,"cmp",1);
              Object RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Action> list = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    for(Action ac: list) {
        if(ac.getBool() == b1){
            System.out.println(ac.getStr());
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cmp",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // actions_list ::= actions_list act 
            { parser.Tree.reduce(2,"actions_list",0);
              ArrayList<Action> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Action> list = (ArrayList<Action>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Action ac = (Action)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ac);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // actions_list ::= act 
            { parser.Tree.reduce(1,"actions_list",0);
              ArrayList<Action> RESULT =null;
		int acleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int acright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Action ac = (Action)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Action> list = new ArrayList();
    list.add(ac);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("actions_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // act ::= WITH bool_exp QA print QC 
            { parser.Tree.reduce(5,"act",0);
              Action RESULT =null;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Action ac = new Action(b2, str);
    RESULT = ac;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("act",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // print ::= PRINT TA STR TC PV 
            { parser.Tree.reduce(5,"print",0);
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    RESULT = str;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_exp ::= bool_exp AND bool_exp 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = b1&&b2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // bool_exp ::= bool_exp OR bool_exp 
            { parser.Tree.reduce(3,"bool_exp",0);
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = b1||b2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // bool_exp ::= NOT bool_exp 
            { parser.Tree.reduce(2,"bool_exp",0);
              Boolean RESULT =null;
		int bxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bx = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = !bx;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // bool_exp ::= TA bool_exp AND bool_exp TC 
            { parser.Tree.reduce(5,"bool_exp",0);
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = b1&&b2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // bool_exp ::= TA bool_exp OR bool_exp TC 
            { parser.Tree.reduce(5,"bool_exp",0);
              Boolean RESULT =null;
		int b1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int b1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean b1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean b2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = b1||b2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // bool_exp ::= TA NOT bool_exp TC 
            { parser.Tree.reduce(4,"bool_exp",0);
              Boolean RESULT =null;
		int bxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean bx = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = !bx;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // bool_exp ::= T 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		
    Boolean res = true;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // bool_exp ::= F 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		
    Boolean res = false;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // bool_exp ::= fz 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		int bxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bx = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = bx;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // bool_exp ::= VAR 
            { parser.Tree.reduce(1,"bool_exp",0);
              Boolean RESULT =null;
		int varleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String var = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = parser.map.get(var);
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("bool_exp",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // fz ::= FZ TA exp_list TC 
            { parser.Tree.reduce(4,"fz",0);
              Boolean RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Boolean> list = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = true;
    Boolean retValue = true;
    for(Boolean bx: list) {
        res &= bx;
    }
    if(res == true) {
        retValue = true;
    }
    else {
        retValue = false;
    }
    RESULT = retValue;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fz",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp_list ::= exp_list V bool_exp 
            { parser.Tree.reduce(3,"exp_list",0);
              ArrayList<Boolean> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Boolean> list = (ArrayList<Boolean>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bx = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(bx);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp_list ::= bool_exp 
            { parser.Tree.reduce(1,"exp_list",0);
              ArrayList<Boolean> RESULT =null;
		int bxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bx = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Boolean> list = new ArrayList();
    list.add(bx);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
