
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\056\000\002\002\004\000\002\002\005\000\002\013" +
    "\003\000\002\013\004\000\002\013\005\000\002\013\004" +
    "\000\002\013\004\000\002\013\007\000\002\013\006\000" +
    "\002\013\006\000\002\013\006\000\002\013\005\000\002" +
    "\013\005\000\002\013\002\000\002\012\003\000\002\012" +
    "\003\000\002\011\004\000\002\011\003\000\002\010\004" +
    "\000\002\010\003\000\002\007\004\000\002\006\007\000" +
    "\002\006\007\000\002\006\005\000\002\006\005\000\002" +
    "\006\002\000\002\005\005\000\002\005\005\000\002\004" +
    "\004\000\002\004\004\000\002\004\004\000\002\003\012" +
    "\000\002\021\005\000\002\021\003\000\002\020\003\000" +
    "\002\020\003\000\002\017\005\000\002\017\005\000\002" +
    "\017\002\000\002\016\005\000\002\015\005\000\002\014" +
    "\005\000\002\014\005\000\002\014\003\000\002\014\003" +
    "\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\012\012\006\013\005\014\004\025\ufff4\001" +
    "\002\000\012\012\006\013\005\014\115\025\uffff\001\002" +
    "\000\010\013\uffee\014\uffee\025\uffee\001\002\000\010\012" +
    "\ufff0\014\ufff0\025\ufff0\001\002\000\010\012\114\014\ufff3" +
    "\025\ufff3\001\002\000\010\013\113\014\ufff2\025\ufff2\001" +
    "\002\000\004\002\112\001\002\000\004\025\022\001\002" +
    "\000\004\014\014\001\002\000\012\012\006\013\005\014" +
    "\015\025\ufffc\001\002\000\010\012\006\013\005\025\ufff5" +
    "\001\002\000\006\014\017\025\ufffd\001\002\000\010\012" +
    "\006\013\005\025\ufff7\001\002\000\004\025\ufffa\001\002" +
    "\000\004\025\ufff8\001\002\000\012\015\023\016\uffe8\017" +
    "\uffe8\022\uffe8\001\002\000\006\016\027\017\030\001\002" +
    "\000\010\016\027\017\030\022\035\001\002\000\004\002" +
    "\000\001\002\000\012\002\uffed\016\027\017\030\022\035" +
    "\001\002\000\004\006\074\001\002\000\004\006\072\001" +
    "\002\000\004\004\071\001\002\000\004\004\070\001\002" +
    "\000\004\004\067\001\002\000\010\016\027\017\030\022" +
    "\035\001\002\000\004\007\036\001\002\000\012\010\uffdb" +
    "\016\041\017\040\026\043\001\002\000\004\010\054\001" +
    "\002\000\020\004\uffd5\005\uffd5\006\uffd5\010\uffd5\011\uffd5" +
    "\020\uffd5\021\uffd5\001\002\000\020\004\uffd6\005\uffd6\006" +
    "\uffd6\010\uffd6\011\uffd6\020\uffd6\021\uffd6\001\002\000\012" +
    "\006\044\011\047\020\045\021\046\001\002\000\020\004" +
    "\uffd4\005\uffd4\006\uffd4\010\uffd4\011\uffd4\020\uffd4\021\uffd4" +
    "\001\002\000\010\016\041\017\040\026\043\001\002\000" +
    "\010\016\041\017\040\026\043\001\002\000\010\016\041" +
    "\017\040\026\043\001\002\000\010\016\041\017\040\026" +
    "\043\001\002\000\010\010\uffdd\020\045\021\046\001\002" +
    "\000\020\004\uffd7\005\uffd7\006\uffd7\010\uffd7\011\uffd7\020" +
    "\uffd7\021\uffd7\001\002\000\020\004\uffd8\005\uffd8\006\uffd8" +
    "\010\uffd8\011\uffd8\020\uffd8\021\046\001\002\000\010\010" +
    "\uffdc\020\045\021\046\001\002\000\004\023\055\001\002" +
    "\000\006\016\027\017\030\001\002\000\004\004\uffe0\001" +
    "\002\000\004\004\062\001\002\000\004\004\uffdf\001\002" +
    "\000\004\004\uffde\001\002\000\010\016\027\017\030\024" +
    "\064\001\002\000\004\004\uffe1\001\002\000\004\004\uffe2" +
    "\001\002\000\010\016\027\017\030\022\035\001\002\000" +
    "\012\002\uffe6\016\uffe6\017\uffe6\022\uffe6\001\002\000\012" +
    "\002\uffe4\016\uffe4\017\uffe4\022\uffe4\001\002\000\012\002" +
    "\uffe5\016\uffe5\017\uffe5\022\uffe5\001\002\000\012\002\uffe3" +
    "\016\uffe3\017\uffe3\022\uffe3\001\002\000\010\016\041\017" +
    "\040\026\043\001\002\000\012\004\uffd9\005\uffd9\020\045" +
    "\021\046\001\002\000\010\016\041\017\040\026\043\001" +
    "\002\000\012\004\uffda\005\uffda\020\045\021\046\001\002" +
    "\000\010\016\027\017\030\022\035\001\002\000\012\002" +
    "\uffe7\016\uffe7\017\uffe7\022\uffe7\001\002\000\006\004\107" +
    "\005\106\001\002\000\006\004\103\005\102\001\002\000" +
    "\004\016\027\001\002\000\010\016\uffea\017\uffea\022\uffea" +
    "\001\002\000\004\004\105\001\002\000\010\016\uffeb\017" +
    "\uffeb\022\uffeb\001\002\000\004\017\030\001\002\000\010" +
    "\016\uffe9\017\uffe9\022\uffe9\001\002\000\004\004\111\001" +
    "\002\000\010\016\uffec\017\uffec\022\uffec\001\002\000\004" +
    "\002\001\001\002\000\010\013\uffef\014\uffef\025\uffef\001" +
    "\002\000\010\012\ufff1\014\ufff1\025\ufff1\001\002\000\004" +
    "\025\ufffe\001\002\000\006\014\117\025\ufffb\001\002\000" +
    "\010\012\006\013\005\025\ufff6\001\002\000\004\025\ufff9" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\116\000\014\002\010\010\007\011\006\012\012\013" +
    "\011\001\001\000\010\010\007\011\006\012\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\010\007\011\006\012\015\001\001\000" +
    "\010\010\007\011\006\012\020\001\001\000\002\001\001" +
    "\000\010\010\007\011\006\012\017\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\023\007\024\001\001" +
    "\000\006\015\100\016\077\001\001\000\014\003\030\004" +
    "\033\005\025\015\032\016\031\001\001\000\002\001\001" +
    "\000\012\003\030\004\075\015\032\016\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\030\004\064\015" +
    "\032\016\031\001\001\000\002\001\001\000\006\014\041" +
    "\017\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\052\001\001\000\004\014\051\001\001\000\004\014" +
    "\050\001\001\000\004\014\047\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\015\060\016\057\020\055\021\056" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\015\060\016\057\020\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\003" +
    "\030\004\065\015\032\016\031\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\072\001\001\000\002\001\001\000\004\014\074" +
    "\001\001\000\002\001\001\000\012\003\030\004\076\015" +
    "\032\016\031\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\016\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\010\007\011" +
    "\006\012\117\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    height = 0;
    speed = 0;

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    Integer height = 0;
    Integer speed = 0;

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP simul_sec 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK3 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TOK3 TOK3 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= toks TOK3 toks 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= toks TOK3 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= TOK3 toks 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= toks TOK3 toks TOK3 toks 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= TOK3 toks TOK3 toks 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= toks TOK3 TOK3 toks 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= toks TOK3 toks TOK3 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header ::= TOK3 toks TOK3 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // header ::= toks TOK3 TOK3 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header ::= 
            { parser.Tree.reduce(0,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // toks ::= tok1s 
            { parser.Tree.reduce(1,"toks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toks",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // toks ::= tok2s 
            { parser.Tree.reduce(1,"toks",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("toks",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // tok2s ::= tok2s TOK2 
            { parser.Tree.reduce(2,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // tok2s ::= TOK2 
            { parser.Tree.reduce(1,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simul_sec ::= ini command_list 
            { parser.Tree.reduce(2,"simul_sec",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("simul_sec",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ini ::= IN height_ass V speed_ass PV 
            { parser.Tree.reduce(5,"ini",0);
              Object RESULT =null;
		int heleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int heright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer he = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer sp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.height = he;
    parser.speed = sp;
    System.out.println("HEIGHT "+parser.height);
    System.out.println("SPEED "+parser.speed);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ini ::= IN speed_ass V height_ass PV 
            { parser.Tree.reduce(5,"ini",0);
              Object RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer sp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int heleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int heright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer he = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.height = he;
    parser.speed = sp;
    System.out.println("HEIGHT "+parser.height);
    System.out.println("SPEED "+parser.speed);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ini ::= IN speed_ass PV 
            { parser.Tree.reduce(3,"ini",0);
              Object RESULT =null;
		int spleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int spright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer sp = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.height = 0;
    parser.speed = sp;
    System.out.println("HEIGHT "+parser.height);
    System.out.println("SPEED "+parser.speed);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ini ::= IN height_ass PV 
            { parser.Tree.reduce(3,"ini",0);
              Object RESULT =null;
		int heleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int heright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer he = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.height = he;
    parser.speed = 0;
    System.out.println("HEIGHT "+parser.height);
    System.out.println("SPEED "+parser.speed);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // ini ::= 
            { parser.Tree.reduce(0,"ini",0);
              Object RESULT =null;
		
    parser.height = 0;
    parser.speed = 0;
    System.out.println("HEIGHT "+parser.height);
    System.out.println("SPEED "+parser.speed);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ini",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // command_list ::= command command command 
            { parser.Tree.reduce(3,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // command ::= height_ass PV 
            { parser.Tree.reduce(2,"command",0);
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.height = ex;
    System.out.println("HEIGHT "+parser.height);


              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // command ::= speed_ass PV 
            { parser.Tree.reduce(2,"command",0);
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.speed = ex;
    System.out.println("SPEED "+parser.speed);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // command ::= cond PV 
            { parser.Tree.reduce(2,"command",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // cond ::= COND QA comp QC UPDATE ass_list PV DONE 
            { parser.Tree.reduce(8,"cond",1);
              Object RESULT =null;
		int cmpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int cmpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Boolean cmp = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Integer[]> list = (ArrayList<Integer[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    if(cmp == true){
        for(Integer[] i: list){
            if(i[1].equals(0)){
                System.out.println("HEIGHT "+i[0]);
            }
            else{
                System.out.println("SPEED "+i[0]);
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cond",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ass_list ::= ass_list PV ass 
            { parser.Tree.reduce(3,"ass_list",0);
              ArrayList<Integer[]> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Integer[]> list = (ArrayList<Integer[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer[] ex = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ass_list ::= ass 
            { parser.Tree.reduce(1,"ass_list",0);
              ArrayList<Integer[]> RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer[] ex = (Integer[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Integer[]> list = new ArrayList();
    list.add(ex);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ass ::= height_ass 
            { parser.Tree.reduce(1,"ass",0);
              Integer[] RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Integer[] res = new Integer[2];
    res[0] = ex;
    res[1] = 0;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ass ::= speed_ass 
            { parser.Tree.reduce(1,"ass",0);
              Integer[] RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Integer[] res = new Integer[2];
    res[0] = ex;
    res[1] = 1;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ass",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // comp ::= exp MAX exp 
            { parser.Tree.reduce(3,"comp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = true;
    if(e1 > e2){
        res = true;
    }
    else {
        res = false;
    }
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // comp ::= exp EQ exp 
            { parser.Tree.reduce(3,"comp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = true;
    if(e1.equals(e2)){
        res = true;
    }
    else {
        res = false;
    }
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // comp ::= 
            { parser.Tree.reduce(0,"comp",0);
              Boolean RESULT =null;
		
    Boolean res = true;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("comp",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // height_ass ::= H EQ exp 
            { parser.Tree.reduce(3,"height_ass",0);
              Integer RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("height_ass",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // speed_ass ::= S EQ exp 
            { parser.Tree.reduce(3,"speed_ass",0);
              Integer RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer ex = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = ex;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_ass",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // exp ::= exp SUM exp 
            { parser.Tree.reduce(3,"exp",0);
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Integer res = e1+e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // exp ::= exp MUL exp 
            { parser.Tree.reduce(3,"exp",0);
              Integer RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer e1 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer e2 = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Integer res = e1*e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // exp ::= H 
            { parser.Tree.reduce(1,"exp",0);
              Integer RESULT =null;
		
    Integer he = parser.height;
    RESULT = he;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // exp ::= S 
            { parser.Tree.reduce(1,"exp",0);
              Integer RESULT =null;
		
    Integer sp = parser.speed;
    RESULT = sp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // exp ::= INT 
            { parser.Tree.reduce(1,"exp",0);
              Integer RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
