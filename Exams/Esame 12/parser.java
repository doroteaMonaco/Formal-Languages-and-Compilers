
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\054\000\002\002\004\000\002\002\007\000\002\013" +
    "\004\000\002\013\004\000\002\013\006\000\002\013\005" +
    "\000\002\013\005\000\002\013\007\000\002\013\006\000" +
    "\002\013\006\000\002\013\005\000\002\012\004\000\002" +
    "\012\003\000\002\011\003\000\002\010\005\000\002\010" +
    "\004\000\002\007\007\000\002\024\005\000\002\024\003" +
    "\000\002\023\004\000\002\006\003\000\002\006\002\000" +
    "\002\005\004\000\002\005\003\000\002\004\006\000\002" +
    "\022\005\000\002\022\005\000\002\022\004\000\002\022" +
    "\007\000\002\022\007\000\002\022\006\000\002\022\003" +
    "\000\002\021\005\000\002\021\005\000\002\020\005\000" +
    "\002\003\004\000\002\003\004\000\002\003\003\000\002" +
    "\003\003\000\002\016\004\000\002\017\004\000\002\015" +
    "\004\000\002\015\003\000\002\014\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\006\013\005\014\004\001\002\000\010\013" +
    "\ufff5\014\ufff5\030\ufff5\001\002\000\006\013\121\014\004" +
    "\001\002\000\006\013\113\014\112\001\002\000\004\002" +
    "\111\001\002\000\004\030\011\001\002\000\004\015\013" +
    "\001\002\000\006\015\013\030\ufff4\001\002\000\004\032" +
    "\100\001\002\000\004\015\013\001\002\000\004\030\016" +
    "\001\002\000\006\002\uffec\006\021\001\002\000\004\002" +
    "\000\001\002\000\006\002\uffed\006\021\001\002\000\010" +
    "\010\026\022\024\032\027\001\002\000\006\002\uffea\006" +
    "\uffea\001\002\000\014\011\uffe2\020\uffe2\021\uffe2\025\uffe2" +
    "\026\uffe2\001\002\000\010\010\026\022\024\032\027\001" +
    "\002\000\006\023\067\024\070\001\002\000\010\010\026" +
    "\022\055\032\027\001\002\000\004\012\053\001\002\000" +
    "\012\020\032\021\036\025\033\026\035\001\002\000\004" +
    "\007\052\001\002\000\010\010\026\022\024\032\027\001" +
    "\002\000\004\027\043\001\002\000\006\007\uffdc\026\035" +
    "\001\002\000\004\027\043\001\002\000\010\010\026\022" +
    "\024\032\027\001\002\000\006\007\uffdb\025\033\001\002" +
    "\000\004\007\uffdd\001\002\000\014\011\uffe7\020\uffe7\021" +
    "\uffe7\025\uffe7\026\uffe7\001\002\000\010\007\uffd9\025\uffd9" +
    "\027\043\001\002\000\004\032\045\001\002\000\012\007" +
    "\uffd7\025\uffd7\026\uffd7\027\uffd7\001\002\000\012\007\uffd6" +
    "\025\uffd6\026\uffd6\027\uffd6\001\002\000\012\007\uffd8\025" +
    "\uffd8\026\uffd8\027\uffd8\001\002\000\004\007\uffde\001\002" +
    "\000\010\007\uffda\026\uffda\027\043\001\002\000\014\011" +
    "\uffe8\020\uffe8\021\uffe8\025\uffe8\026\uffe8\001\002\000\006" +
    "\002\uffe9\006\uffe9\001\002\000\004\032\054\001\002\000" +
    "\006\023\uffdf\024\uffdf\001\002\000\010\010\026\022\024" +
    "\032\027\001\002\000\006\020\057\021\060\001\002\000" +
    "\010\010\026\022\024\032\027\001\002\000\010\010\026" +
    "\022\024\032\027\001\002\000\010\011\062\020\uffe7\021" +
    "\uffe7\001\002\000\014\011\uffe4\020\uffe4\021\uffe4\025\uffe4" +
    "\026\uffe4\001\002\000\010\011\064\020\uffe8\021\uffe8\001" +
    "\002\000\014\011\uffe5\020\uffe5\021\uffe5\025\uffe5\026\uffe5" +
    "\001\002\000\010\011\066\020\uffe6\021\uffe6\001\002\000" +
    "\014\011\uffe3\020\uffe3\021\uffe3\025\uffe3\026\uffe3\001\002" +
    "\000\004\031\072\001\002\000\004\031\071\001\002\000" +
    "\014\011\uffe0\020\uffe0\021\uffe0\025\uffe0\026\uffe0\001\002" +
    "\000\014\011\uffe1\020\uffe1\021\uffe1\025\uffe1\026\uffe1\001" +
    "\002\000\014\011\uffe6\020\uffe6\021\uffe6\025\uffe6\026\uffe6" +
    "\001\002\000\006\002\uffeb\006\uffeb\001\002\000\006\015" +
    "\ufff2\030\ufff2\001\002\000\006\005\uffef\016\uffef\001\002" +
    "\000\006\005\102\016\103\001\002\000\004\031\101\001" +
    "\002\000\006\005\uffee\016\uffee\001\002\000\004\032\100" +
    "\001\002\000\004\032\104\001\002\000\004\017\105\001" +
    "\002\000\006\015\ufff1\030\ufff1\001\002\000\006\005\ufff0" +
    "\016\ufff0\001\002\000\004\015\013\001\002\000\006\015" +
    "\ufff3\030\ufff3\001\002\000\004\002\001\001\002\000\010" +
    "\013\ufff6\014\ufff6\030\ufff6\001\002\000\010\013\114\014" +
    "\004\030\ufffe\001\002\000\006\014\004\030\ufff7\001\002" +
    "\000\006\013\116\014\112\001\002\000\006\014\004\030" +
    "\ufff8\001\002\000\006\014\112\030\ufffa\001\002\000\006" +
    "\014\112\030\ufff9\001\002\000\004\014\004\001\002\000" +
    "\010\013\123\014\112\030\uffff\001\002\000\006\014\004" +
    "\030\ufffb\001\002\000\006\014\112\030\ufffd\001\002\000" +
    "\006\014\112\030\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\123\000\010\002\006\012\005\013\007\001\001\000" +
    "\002\001\001\000\004\012\121\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\013\010" +
    "\011\011\014\001\001\000\004\007\106\001\001\000\006" +
    "\023\075\024\076\001\001\000\004\007\074\001\001\000" +
    "\002\001\001\000\010\004\021\005\017\006\016\001\001" +
    "\000\002\001\001\000\004\004\073\001\001\000\010\020" +
    "\024\021\022\022\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\020\024\021\022\022\072\001\001\000" +
    "\002\001\001\000\010\020\024\021\022\022\055\001\001" +
    "\000\002\001\001\000\010\003\030\016\033\017\036\001" +
    "\001\000\002\001\001\000\010\020\024\021\022\022\050" +
    "\001\001\000\006\014\043\015\047\001\001\000\004\017" +
    "\046\001\001\000\006\014\043\015\041\001\001\000\010" +
    "\020\024\021\022\022\040\001\001\000\004\016\037\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\014\045" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\020\024\021\022\022\064" +
    "\001\001\000\002\001\001\000\010\020\024\021\022\022" +
    "\062\001\001\000\010\020\024\021\022\022\060\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\105\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\107\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\114\001\001\000\004\012" +
    "\117\001\001\000\002\001\001\000\004\012\116\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\124\001" +
    "\001\000\002\001\001\000\004\012\123\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Attr>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Attr>> map = new HashMap<String, ArrayList<Attr>>();

    public class Attr {
        private String name;
        private Integer val;

        Attr(String name, Integer val) {
            this.name = name;
            this.val = val;
        }

        public String getName() {
            return this.name;
        }

        public Integer getVal() {
            return this.val;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP obj_section SEP querie_section 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK1 tok2s 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok2s TOK1 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= TOK1 tok2s TOK1 tok2s 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= TOK1 TOK1 tok2s 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= TOK1 tok2s TOK1 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= tok2s TOK1 tok2s TOK1 tok2s 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= tok2s TOK1 TOK1 tok2s 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= tok2s TOK1 tok2s TOK1 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= tok2s TOK1 TOK1 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok2s ::= tok2s TOK2 
            { parser.Tree.reduce(2,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tok2s ::= TOK2 
            { parser.Tree.reduce(1,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // obj_section ::= obj_list 
            { parser.Tree.reduce(1,"obj_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_section",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // obj_list ::= obj_list obj obj 
            { parser.Tree.reduce(3,"obj_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // obj_list ::= obj obj 
            { parser.Tree.reduce(2,"obj_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // obj ::= OBJ attr_list NAME STR END 
            { parser.Tree.reduce(5,"obj",0);
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Attr> list = (ArrayList<Attr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(name, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // attr_list ::= attr_list V attr 
            { parser.Tree.reduce(3,"attr_list",0);
              ArrayList<Attr> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Attr> list = (ArrayList<Attr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Attr at = (Attr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(at);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // attr_list ::= attr 
            { parser.Tree.reduce(1,"attr_list",0);
              ArrayList<Attr> RESULT =null;
		int atleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int atright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Attr at = (Attr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Attr> list = new ArrayList();
    list.add(at);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // attr ::= STR INT 
            { parser.Tree.reduce(2,"attr",0);
              Attr RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Attr at = new Attr(name, val);
    RESULT = at;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("attr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // querie_section ::= command_list 
            { parser.Tree.reduce(1,"querie_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querie_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // querie_section ::= 
            { parser.Tree.reduce(0,"querie_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("querie_section",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command_list ::= command_list command 
            { parser.Tree.reduce(2,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command_list ::= command 
            { parser.Tree.reduce(1,"command_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // command ::= DOM exp print MINDOM 
            { parser.Tree.reduce(4,"command",0);
              Object RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int prleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int prright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object pr = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // exp ::= exp AND exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = e1&&e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // exp ::= exp OR exp 
            { parser.Tree.reduce(3,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = e1||e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // exp ::= NOT exp 
            { parser.Tree.reduce(2,"exp",0);
              Boolean RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = !ex;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // exp ::= TA exp AND exp TC 
            { parser.Tree.reduce(5,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = e1&&e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // exp ::= TA exp OR exp TC 
            { parser.Tree.reduce(5,"exp",0);
              Boolean RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean e1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean e2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = e1||e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // exp ::= TA NOT exp TC 
            { parser.Tree.reduce(4,"exp",0);
              Boolean RESULT =null;
		int exleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean ex = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Boolean res = !ex;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // exp ::= operand 
            { parser.Tree.reduce(1,"exp",0);
              Boolean RESULT =null;
		int bxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bxright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean bx = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = bx;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // operand ::= obj_ref EQ INT 
            { parser.Tree.reduce(3,"operand",0);
              Boolean RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = true;
    if(val.equals(x)){
        res = true;
    }
    else {
        res = false;
    }
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // operand ::= obj_ref NEQ INT 
            { parser.Tree.reduce(3,"operand",0);
              Boolean RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer val = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer x = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean res = true;
    if(val.equals(x)){
        res = false;
    }
    else {
        res = true;
    }
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("operand",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // obj_ref ::= STR P STR 
            { parser.Tree.reduce(3,"obj_ref",0);
              Integer RESULT =null;
		int objleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int objright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String obj = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Attr> list = parser.map.get(obj);
    Integer val = 0;
    for(Attr at: list){
        if(at.getName().equals(name)) {
            val = at.getVal();
        }
    }
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("obj_ref",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // print ::= print_true print_false 
            { parser.Tree.reduce(2,"print",1);
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> l2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   Boolean bx = (Boolean) parser.stack(-2);
   if(bx == true){
        for(String str: l1){
            System.out.println(str);
        }
   }
   else {
        for(String str: l2){
            System.out.println(str);
        }
   }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // print ::= print_false print_true 
            { parser.Tree.reduce(2,"print",1);
              Object RESULT =null;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> l2 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> l1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
   Boolean bx = (Boolean) parser.stack(-2);
   if(bx == true){
        for(String str: l1){
            System.out.println(str);
        }
   }
   else {
        for(String str: l2){
            System.out.println(str);
        }
   }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // print ::= print_true 
            { parser.Tree.reduce(1,"print",1);
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> l1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean bx = (Boolean) parser.stack(-1);
    if(bx == true){
        for(String str: l1){
            System.out.println(str);
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // print ::= print_false 
            { parser.Tree.reduce(1,"print",1);
              Object RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> l1 = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Boolean bx = (Boolean) parser.stack(-1);
    if(bx == false){
        for(String str: l1){
            System.out.println(str);
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // print_true ::= TRUE print_list 
            { parser.Tree.reduce(2,"print_true",0);
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_true",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // print_false ::= FALSE print_list 
            { parser.Tree.reduce(2,"print_false",0);
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_false",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // print_list ::= print_list pr 
            { parser.Tree.reduce(2,"print_list",0);
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(str);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // print_list ::= pr 
            { parser.Tree.reduce(1,"print_list",0);
              ArrayList<String> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<String> list = new ArrayList();
    list.add(str);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // pr ::= PRINT STR 
            { parser.Tree.reduce(2,"pr",0);
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = str;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("pr",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
