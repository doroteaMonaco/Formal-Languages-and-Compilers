// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\1\0\1\6\1\7\2\0\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\3\26\1\27\1\30\1\31\5\0"+
    "\4\32\1\33\1\32\10\0\1\34\2\0\1\35\2\0"+
    "\1\36\5\0\1\37\1\0\1\40\3\0\6\32\1\41"+
    "\3\0\1\42\31\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\6\1\1\3\1\4\3\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\1\1\0\1\12\4\0"+
    "\1\13\1\5\1\0\1\14\4\0\1\5\1\0\1\15"+
    "\2\0\2\5\22\0\1\16\77\0\1\17\172\0\1\20"+
    "\10\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\43\0\43\0\106\0\151\0\214\0\257\0\322"+
    "\0\365\0\u0118\0\43\0\u013b\0\u015e\0\u0181\0\u01a4\0\43"+
    "\0\43\0\u01c7\0\43\0\43\0\u01ea\0\151\0\43\0\u020d"+
    "\0\u0230\0\u0253\0\u0276\0\u013b\0\u0299\0\u02bc\0\43\0\u02df"+
    "\0\u0302\0\u0325\0\u0348\0\u036b\0\u038e\0\u020d\0\u03b1\0\u03d4"+
    "\0\u03f7\0\u041a\0\u043d\0\u0460\0\u0483\0\u04a6\0\u04c9\0\u04ec"+
    "\0\u050f\0\u0532\0\u0555\0\u0578\0\u059b\0\u05be\0\u05e1\0\u0604"+
    "\0\u0627\0\u064a\0\u066d\0\u0690\0\43\0\u06b3\0\u06d6\0\u06f9"+
    "\0\u071c\0\u073f\0\u0762\0\u0785\0\u07a8\0\u07cb\0\u07ee\0\u0811"+
    "\0\u0834\0\u0857\0\u087a\0\u089d\0\u08c0\0\u08e3\0\u0906\0\u0929"+
    "\0\u094c\0\u096f\0\u0992\0\u09b5\0\u09d8\0\u09fb\0\u0a1e\0\u0a41"+
    "\0\u0a64\0\u0a87\0\u0aaa\0\u0acd\0\u0af0\0\u0b13\0\u0b36\0\u0b59"+
    "\0\u0b7c\0\u0b9f\0\u0bc2\0\u0be5\0\u0c08\0\u0c2b\0\u0c4e\0\u0c71"+
    "\0\u0c94\0\u0cb7\0\u0cda\0\u0cfd\0\u0d20\0\u0d43\0\u0d66\0\u0d89"+
    "\0\u0dac\0\u0dcf\0\u0df2\0\u0e15\0\u0e38\0\u0e5b\0\u0e7e\0\u0ea1"+
    "\0\u0ec4\0\u0ee7\0\u0f0a\0\u0f2d\0\43\0\u0f50\0\u0f73\0\u0f96"+
    "\0\u0fb9\0\u0fdc\0\u0fff\0\u1022\0\u1045\0\u1068\0\u108b\0\u10ae"+
    "\0\u10d1\0\u10f4\0\u1117\0\u113a\0\u115d\0\u1180\0\u11a3\0\u11c6"+
    "\0\u11e9\0\u120c\0\u122f\0\u1252\0\u1275\0\u1298\0\u12bb\0\u12de"+
    "\0\u1301\0\u1324\0\u1347\0\u136a\0\u138d\0\u13b0\0\u13d3\0\u13f6"+
    "\0\u1419\0\u143c\0\u145f\0\u1482\0\u14a5\0\u14c8\0\u14eb\0\u150e"+
    "\0\u1531\0\u1554\0\u1577\0\u159a\0\u15bd\0\u15e0\0\u1603\0\u1626"+
    "\0\u1649\0\u166c\0\u168f\0\u16b2\0\u16d5\0\u16f8\0\u171b\0\u173e"+
    "\0\u1761\0\u1784\0\u17a7\0\u17ca\0\u17ed\0\u1810\0\u1833\0\u1856"+
    "\0\u1879\0\u189c\0\u18bf\0\u18e2\0\u1905\0\u1928\0\u194b\0\u196e"+
    "\0\u1991\0\u19b4\0\u19d7\0\u19fa\0\u1a1d\0\u1a40\0\u1a63\0\u1a86"+
    "\0\u1aa9\0\u1acc\0\u1aef\0\u1b12\0\u1b35\0\u1b58\0\u1b7b\0\u1b9e"+
    "\0\u1bc1\0\u1be4\0\u1c07\0\u1c2a\0\u1c4d\0\u1c70\0\u1c93\0\u1cb6"+
    "\0\u1cd9\0\u1cfc\0\u1d1f\0\u1d42\0\u1d65\0\u1d88\0\u1dab\0\u1dce"+
    "\0\u1df1\0\u1e14\0\u1e37\0\u1e5a\0\u1e7d\0\u1ea0\0\u1ec3\0\u1ee6"+
    "\0\u1f09\0\u1f2c\0\u1f4f\0\u1f72\0\u1f95\0\u1fb8\0\u1fdb\0\43"+
    "\0\u1ffe\0\u2021\0\u2044\0\u2067\0\u208a\0\u20ad\0\u20d0\0\u20f3";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\1\2\1\11\1\12\1\13\1\12\1\14\1\2\1\15"+
    "\1\16\1\17\5\16\1\20\1\21\1\2\1\22\3\2"+
    "\1\23\1\24\1\2\1\25\45\0\1\3\40\0\5\26"+
    "\1\27\35\26\6\0\1\30\43\0\1\31\2\0\1\31"+
    "\42\0\1\32\37\0\1\31\54\0\7\33\33\0\10\34"+
    "\31\0\1\34\42\0\1\34\1\0\10\16\31\0\1\34"+
    "\1\0\1\35\7\16\51\0\1\36\45\0\1\37\7\0"+
    "\1\40\43\0\1\41\2\0\1\42\45\0\1\43\43\0"+
    "\1\34\1\0\10\33\31\0\1\34\1\0\2\16\1\44"+
    "\5\16\50\0\1\45\13\0\1\46\43\0\1\47\2\0"+
    "\1\47\37\0\1\47\33\0\15\43\1\50\25\43\16\0"+
    "\1\34\1\0\2\16\1\51\1\52\4\16\47\0\1\53"+
    "\15\0\1\54\2\0\1\55\30\0\12\43\1\56\2\43"+
    "\1\50\25\43\16\0\1\34\1\57\10\16\31\0\1\34"+
    "\1\60\10\16\32\0\1\61\32\0\1\62\2\0\1\62"+
    "\37\0\1\62\33\0\11\43\1\3\3\43\1\50\25\43"+
    "\21\0\1\63\41\0\1\64\64\0\1\65\7\0\1\66"+
    "\2\0\1\67\51\0\1\70\1\71\41\0\1\72\1\73"+
    "\1\74\60\0\1\75\10\0\1\76\2\0\1\76\37\0"+
    "\1\76\52\0\1\77\42\0\1\100\42\0\1\101\42\0"+
    "\1\102\42\0\1\103\32\0\1\104\2\0\1\105\51\0"+
    "\1\106\1\107\1\110\37\0\1\111\1\112\1\107\1\113"+
    "\37\0\1\111\2\107\1\113\37\0\1\111\1\114\1\115"+
    "\40\0\1\111\2\107\1\110\26\0\1\116\2\0\1\116"+
    "\37\0\1\116\60\0\3\117\33\0\10\117\33\0\1\117"+
    "\43\0\7\117\33\0\3\117\1\0\4\117\33\0\2\117"+
    "\41\0\6\117\35\0\7\117\23\0\1\120\2\0\1\121"+
    "\36\0\2\122\3\0\1\122\36\0\1\123\2\0\1\123"+
    "\37\0\1\123\55\0\1\124\27\0\1\125\2\0\1\126"+
    "\5\0\10\127\2\0\2\127\27\0\1\130\31\0\1\131"+
    "\2\0\1\131\37\0\1\131\53\0\10\132\2\0\2\132"+
    "\31\0\1\133\27\0\1\134\2\0\1\135\5\0\10\127"+
    "\2\0\2\127\22\0\1\136\4\0\10\137\2\0\2\137"+
    "\31\0\1\140\1\141\26\0\1\142\2\0\1\142\37\0"+
    "\1\142\53\0\10\143\2\0\2\143\22\0\1\136\4\0"+
    "\10\144\2\0\2\144\26\0\1\145\42\0\1\146\32\0"+
    "\1\147\2\0\1\150\5\0\10\127\2\0\2\127\27\0"+
    "\10\151\2\0\2\151\22\0\1\152\4\0\10\153\2\0"+
    "\2\153\30\0\1\154\41\0\1\155\31\0\1\156\2\0"+
    "\1\156\37\0\1\156\46\0\1\152\4\0\10\157\2\0"+
    "\2\157\27\0\10\160\2\0\2\160\22\0\1\152\4\0"+
    "\10\161\2\0\2\161\30\0\1\162\1\163\41\0\1\164"+
    "\1\165\1\166\26\0\1\167\2\0\1\170\5\0\10\127"+
    "\2\0\2\127\22\0\1\152\4\0\10\171\2\0\2\171"+
    "\27\0\10\172\2\0\2\172\22\0\1\173\4\0\10\174"+
    "\1\0\1\175\2\174\26\0\1\176\42\0\1\177\42\0"+
    "\1\200\42\0\1\201\42\0\1\202\32\0\1\203\2\0"+
    "\1\203\37\0\1\203\46\0\1\204\4\0\10\205\1\0"+
    "\1\175\2\205\22\0\1\204\4\0\10\206\1\0\1\175"+
    "\2\206\27\0\10\207\1\0\1\175\2\207\22\0\1\204"+
    "\4\0\10\210\1\0\1\175\2\210\30\0\1\211\1\212"+
    "\1\213\37\0\1\214\1\215\1\212\1\216\37\0\1\214"+
    "\2\212\1\216\37\0\1\214\1\217\1\220\40\0\1\214"+
    "\2\212\1\213\26\0\1\221\2\0\1\222\5\0\10\127"+
    "\2\0\2\127\27\0\10\223\1\0\1\175\2\223\22\0"+
    "\1\204\4\0\10\224\1\0\1\175\2\224\22\0\1\204"+
    "\4\0\10\225\1\0\1\175\2\225\27\0\10\210\2\0"+
    "\2\210\22\0\1\226\4\0\10\227\1\0\1\175\2\227"+
    "\34\0\3\230\33\0\10\230\33\0\1\230\43\0\7\230"+
    "\33\0\3\230\1\0\4\230\33\0\2\230\41\0\6\230"+
    "\35\0\7\230\23\0\1\231\2\0\1\231\37\0\1\231"+
    "\53\0\10\232\2\0\2\232\22\0\1\226\4\0\10\233"+
    "\1\0\1\175\2\233\22\0\1\234\4\0\10\235\2\0"+
    "\2\235\27\0\10\236\1\0\1\175\2\236\22\0\1\226"+
    "\4\0\10\237\1\0\1\175\2\237\15\0\2\240\3\0"+
    "\1\240\36\0\1\241\2\0\1\242\5\0\10\127\2\0"+
    "\2\127\22\0\1\234\4\0\10\243\2\0\2\243\22\0"+
    "\1\234\4\0\10\244\2\0\2\244\27\0\10\245\2\0"+
    "\2\245\22\0\1\234\4\0\10\246\2\0\2\246\27\0"+
    "\10\244\2\0\2\244\22\0\1\247\4\0\10\250\1\0"+
    "\1\175\2\250\31\0\1\251\27\0\1\252\2\0\1\252"+
    "\37\0\1\252\46\0\1\234\4\0\10\253\2\0\2\253"+
    "\22\0\1\247\4\0\10\254\1\0\1\175\2\254\27\0"+
    "\10\255\2\0\2\255\22\0\1\247\4\0\10\256\1\0"+
    "\1\175\2\256\27\0\10\257\1\0\1\175\2\257\22\0"+
    "\1\247\4\0\10\260\1\0\1\175\2\260\27\0\1\261"+
    "\31\0\1\262\2\0\1\263\5\0\10\127\2\0\2\127"+
    "\22\0\1\264\4\0\10\265\2\0\2\265\22\0\1\247"+
    "\4\0\10\266\1\0\1\175\2\266\22\0\1\264\4\0"+
    "\10\267\2\0\2\267\22\0\1\264\4\0\10\270\2\0"+
    "\2\270\27\0\10\270\2\0\2\270\22\0\1\226\4\0"+
    "\10\271\1\0\1\175\2\271\31\0\1\272\27\0\1\273"+
    "\2\0\1\273\37\0\1\273\53\0\10\274\2\0\2\274"+
    "\22\0\1\264\4\0\10\275\2\0\2\275\22\0\1\276"+
    "\4\0\10\277\1\0\1\175\2\277\22\0\1\264\4\0"+
    "\10\300\2\0\2\300\22\0\1\276\4\0\10\301\1\0"+
    "\1\175\2\301\22\0\1\276\4\0\10\244\1\0\1\175"+
    "\2\244\31\0\1\302\1\303\26\0\1\304\2\0\1\305"+
    "\5\0\10\127\2\0\2\127\27\0\10\306\2\0\2\306"+
    "\22\0\1\276\4\0\10\307\1\0\1\175\2\307\27\0"+
    "\10\310\1\0\1\175\2\310\22\0\1\276\4\0\10\311"+
    "\1\0\1\175\2\311\22\0\1\312\4\0\10\313\1\0"+
    "\1\175\2\313\22\0\1\276\4\0\10\314\1\0\1\175"+
    "\2\314\26\0\1\315\42\0\1\316\32\0\1\317\2\0"+
    "\1\317\37\0\1\317\46\0\1\312\4\0\10\320\1\0"+
    "\1\175\2\320\22\0\1\312\4\0\10\321\1\0\1\175"+
    "\2\321\27\0\10\321\2\0\2\321\22\0\1\247\4\0"+
    "\10\322\1\0\1\175\2\322\40\0\1\175\24\0\1\312"+
    "\4\0\10\323\1\0\1\175\2\323\22\0\1\324\4\0"+
    "\10\325\1\0\1\175\2\325\30\0\1\326\41\0\1\327"+
    "\31\0\1\330\2\0\1\331\5\0\10\127\2\0\2\127"+
    "\22\0\1\312\4\0\10\332\1\0\1\175\2\332\22\0"+
    "\1\324\4\0\10\333\1\0\1\175\2\333\22\0\1\324"+
    "\4\0\10\270\1\0\1\175\2\270\22\0\1\324\4\0"+
    "\10\274\1\0\1\175\2\274\27\0\10\274\1\0\1\175"+
    "\2\274\22\0\1\324\4\0\10\275\1\0\1\175\2\275"+
    "\30\0\1\334\1\335\41\0\1\336\1\337\1\340\26\0"+
    "\1\341\2\0\1\341\37\0\1\341\53\0\10\342\2\0"+
    "\2\342\22\0\1\324\4\0\10\300\1\0\1\175\2\300"+
    "\26\0\1\343\42\0\1\344\42\0\1\345\42\0\1\346"+
    "\42\0\1\347\32\0\1\350\2\0\1\351\5\0\10\127"+
    "\2\0\2\127\27\0\10\352\2\0\2\352\30\0\1\353"+
    "\1\354\1\355\37\0\1\356\1\357\1\354\1\360\37\0"+
    "\1\356\2\354\1\360\37\0\1\356\1\361\1\362\40\0"+
    "\1\356\2\354\1\355\26\0\1\363\2\0\1\363\37\0"+
    "\1\363\46\0\1\312\15\0\1\175\36\0\3\364\33\0"+
    "\10\364\33\0\1\364\43\0\7\364\33\0\3\364\1\0"+
    "\4\364\33\0\2\364\41\0\6\364\35\0\7\364\23\0"+
    "\1\365\2\0\1\366\5\0\10\127\2\0\2\127\24\0"+
    "\1\367\13\0\1\370\20\0\1\371\2\0\1\371\37\0"+
    "\1\371\54\0\1\372\41\0\10\127\2\0\2\127\27\0"+
    "\2\373\41\0\1\374\1\375\41\0\2\376\41\0\1\376"+
    "\1\377\41\0\2\u0100\41\0\2\u0100\7\0\1\370\42\0"+
    "\1\370\11\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8470];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\7\1\1\11\4\1\2\11\1\1\2\11"+
    "\1\1\1\0\1\11\4\0\2\1\1\0\1\11\4\0"+
    "\1\1\1\0\1\1\2\0\2\1\22\0\1\11\77\0"+
    "\1\11\172\0\1\11\10\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[256];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Unrecognized character: " + yytext());
            }
            // fall through
          case 17: break;
          case 2:
            { ;
            }
            // fall through
          case 18: break;
          case 3:
            { return new Symbol(sym.V);
            }
            // fall through
          case 19: break;
          case 4:
            { return new Symbol(sym.P);
            }
            // fall through
          case 20: break;
          case 5:
            { return new Symbol(sym.INT, Integer.parseInt(yytext()));
            }
            // fall through
          case 21: break;
          case 6:
            { return new Symbol(sym.DP);
            }
            // fall through
          case 22: break;
          case 7:
            { return new Symbol(sym.PV);
            }
            // fall through
          case 23: break;
          case 8:
            { return new Symbol(sym.QA);
            }
            // fall through
          case 24: break;
          case 9:
            { return new Symbol(sym.QC);
            }
            // fall through
          case 25: break;
          case 10:
            { return new Symbol(sym.STR, new String(yytext()));
            }
            // fall through
          case 26: break;
          case 11:
            { return new Symbol(sym.DOUBLE, Double.parseDouble(yytext()));
            }
            // fall through
          case 27: break;
          case 12:
            { return new Symbol(sym.KG);
            }
            // fall through
          case 28: break;
          case 13:
            { return new Symbol(sym.SEP);
            }
            // fall through
          case 29: break;
          case 14:
            { return new Symbol(sym.EUROKG);
            }
            // fall through
          case 30: break;
          case 15:
            { return new Symbol(sym.TOK1);
            }
            // fall through
          case 31: break;
          case 16:
            { return new Symbol(sym.TOK2);
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
