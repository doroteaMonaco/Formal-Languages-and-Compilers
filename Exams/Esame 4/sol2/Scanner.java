// DO NOT EDIT
// Generated by JFlex 1.8.2 http://jflex.de/
// source: scanner.jflex

import java_cup.runtime.*;


// See https://github.com/jflex-de/jflex/issues/222
@SuppressWarnings("FallThrough")
class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\37\u0100\1\u0200\267\u0100\10\u0300\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\1\1\0"+
    "\1\5\1\6\4\0\1\7\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\3\26\1\27\1\30\34\0\1\31\1\32"+
    "\7\0\2\33\2\0\1\34\1\0\1\35\3\0\1\36"+
    "\3\0\1\37\2\0\1\40\2\0\1\41\5\0\1\42"+
    "\1\0\1\43\7\0\1\3\u01a2\0\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1024];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\4\1\1\3\1\1\2\4\1\5"+
    "\1\6\4\1\1\7\1\10\1\0\1\11\3\0\1\12"+
    "\3\0\1\13\7\0\1\14\4\0\1\15\24\0\1\16"+
    "\45\0\1\17\154\0\1\20\66\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\44\0\44\0\110\0\154\0\220\0\264\0\330"+
    "\0\44\0\374\0\u0120\0\u0144\0\44\0\44\0\u0168\0\u018c"+
    "\0\u01b0\0\u01d4\0\44\0\44\0\154\0\44\0\u01f8\0\u021c"+
    "\0\u0240\0\374\0\u0264\0\u0288\0\u02ac\0\44\0\u02d0\0\u02f4"+
    "\0\u0318\0\u033c\0\u0360\0\u0384\0\u03a8\0\44\0\u03cc\0\u03f0"+
    "\0\u0414\0\u0438\0\u045c\0\u0480\0\u04a4\0\u04c8\0\u04ec\0\u0510"+
    "\0\u0534\0\u0558\0\u057c\0\u05a0\0\u05c4\0\u05e8\0\u060c\0\u0630"+
    "\0\u0654\0\u0678\0\u069c\0\u06c0\0\u06e4\0\u0708\0\u072c\0\44"+
    "\0\u0750\0\u0774\0\u0798\0\u07bc\0\u07e0\0\u0804\0\u0828\0\u084c"+
    "\0\u0870\0\u0894\0\u08b8\0\u08dc\0\u0900\0\u0924\0\u0948\0\u096c"+
    "\0\u0990\0\u09b4\0\u09d8\0\u09fc\0\u0a20\0\u0a44\0\u0a68\0\u0a8c"+
    "\0\u0ab0\0\u0ad4\0\u0af8\0\u0b1c\0\u0b40\0\u0b64\0\u0b88\0\u0bac"+
    "\0\u0bd0\0\u0bf4\0\u0c18\0\u0c3c\0\u0c60\0\44\0\u0c84\0\u0ca8"+
    "\0\u0ccc\0\u0cf0\0\u0d14\0\u0d38\0\u0d5c\0\u0d80\0\u0da4\0\u0dc8"+
    "\0\u0dec\0\u0e10\0\u0e34\0\u0e58\0\u0e7c\0\u0ea0\0\u0ec4\0\u0ee8"+
    "\0\u0f0c\0\u0f30\0\u0f54\0\u0f78\0\u0f9c\0\u0fc0\0\u0fe4\0\u1008"+
    "\0\u102c\0\u1050\0\u1074\0\u1098\0\u10bc\0\u10e0\0\u1104\0\u1128"+
    "\0\u114c\0\u1170\0\u1194\0\u11b8\0\u11dc\0\u1200\0\u1224\0\u1248"+
    "\0\u126c\0\u1290\0\u12b4\0\u12d8\0\u12fc\0\u1320\0\u1344\0\u1368"+
    "\0\u138c\0\u13b0\0\u13d4\0\u13f8\0\u141c\0\u1440\0\u1464\0\u1488"+
    "\0\u14ac\0\u14d0\0\u14f4\0\u1518\0\u153c\0\u1560\0\u1584\0\u15a8"+
    "\0\u15cc\0\u15f0\0\u1614\0\u1638\0\u165c\0\u1680\0\u16a4\0\u16c8"+
    "\0\u16ec\0\u1710\0\u1734\0\u1758\0\u177c\0\u17a0\0\u17c4\0\u17e8"+
    "\0\u180c\0\u1830\0\u1854\0\u1878\0\u189c\0\u18c0\0\u18e4\0\u1908"+
    "\0\u192c\0\u1950\0\u1974\0\u1998\0\u19bc\0\u19e0\0\u1a04\0\u1a28"+
    "\0\u1a4c\0\u1a70\0\u1a94\0\u1ab8\0\u1adc\0\u1b00\0\u1b24\0\u1b48"+
    "\0\u1b6c\0\u1b90\0\44\0\u1bb4\0\u1bd8\0\u1bfc\0\u1c20\0\u1c44"+
    "\0\u1c68\0\u1c8c\0\u1cb0\0\u1cd4\0\u1cf8\0\u1d1c\0\u1d40\0\u1d64"+
    "\0\u1d88\0\u1dac\0\u1dd0\0\u1df4\0\u1e18\0\u1e3c\0\u1e60\0\u1e84"+
    "\0\u1ea8\0\u1ecc\0\u1ef0\0\u1f14\0\u1f38\0\u1f5c\0\u1f80\0\u1fa4"+
    "\0\u1fc8\0\u1fec\0\u2010\0\u2034\0\u2058\0\u207c\0\u20a0\0\u20c4"+
    "\0\u20e8\0\u210c\0\u2130\0\u2154\0\u2178\0\u219c\0\u21c0\0\u21e4"+
    "\0\u2208\0\u222c\0\u2250\0\u2274\0\u2298\0\u22bc\0\u22e0\0\u2304"+
    "\0\u2328";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\1\11\1\10\1\12\1\2\1\13\7\14\1\15"+
    "\1\16\1\17\1\20\1\2\1\21\1\2\1\22\3\2"+
    "\1\23\1\24\46\0\1\3\41\0\5\25\1\26\36\25"+
    "\6\0\1\27\46\0\1\30\52\0\7\31\34\0\10\32"+
    "\32\0\1\32\43\0\1\32\1\0\10\14\31\0\1\33"+
    "\43\0\1\34\70\0\1\35\37\0\1\36\14\0\1\37"+
    "\35\0\11\30\1\40\32\30\15\0\1\32\1\0\10\31"+
    "\34\0\1\41\1\42\1\43\42\0\1\44\63\0\1\45"+
    "\11\0\1\46\35\0\10\30\1\3\1\40\32\30\22\0"+
    "\1\47\4\50\34\0\10\50\34\0\3\50\1\51\40\0"+
    "\2\52\62\0\1\53\33\0\1\54\43\0\1\55\43\0"+
    "\1\56\33\0\2\57\41\0\1\60\51\0\1\61\36\0"+
    "\6\62\36\0\4\62\1\63\34\0\1\64\2\0\1\65"+
    "\1\66\61\0\1\67\25\0\1\70\6\71\34\0\10\71"+
    "\34\0\5\71\1\72\37\0\1\73\37\0\1\64\2\0"+
    "\1\74\1\75\37\0\1\64\2\0\1\76\1\77\60\0"+
    "\1\100\35\0\1\101\43\0\1\102\43\0\1\103\33\0"+
    "\2\104\37\0\1\64\2\0\1\105\1\106\37\0\1\64"+
    "\2\0\1\107\1\110\37\0\1\64\2\0\1\111\1\112"+
    "\37\0\1\64\2\0\1\113\1\112\46\0\1\114\1\115"+
    "\36\0\6\115\36\0\3\115\1\116\40\0\2\117\37\0"+
    "\1\64\2\0\1\120\1\121\37\0\1\64\2\0\1\122"+
    "\1\123\37\0\1\64\2\0\1\124\1\125\37\0\1\64"+
    "\2\0\1\126\1\125\37\0\1\127\2\0\1\130\1\131"+
    "\37\0\1\127\2\0\1\126\1\131\37\0\1\127\2\0"+
    "\1\124\1\131\51\0\1\132\34\0\10\132\34\0\5\132"+
    "\34\0\1\133\2\0\1\134\1\135\37\0\1\64\3\0"+
    "\1\73\37\0\1\64\2\0\1\104\1\136\37\0\1\64"+
    "\2\0\1\117\1\137\37\0\1\64\2\0\1\140\1\137"+
    "\37\0\1\127\2\0\1\134\1\141\37\0\1\127\2\0"+
    "\1\140\1\141\37\0\1\127\2\0\1\117\1\141\43\0"+
    "\1\142\37\0\1\127\2\0\1\143\1\141\37\0\1\127"+
    "\2\0\1\144\1\145\53\0\1\146\2\0\1\147\30\0"+
    "\1\150\37\0\1\133\2\0\1\143\1\151\37\0\1\133"+
    "\2\0\1\152\1\153\42\0\2\140\37\0\1\133\2\0"+
    "\1\140\1\154\37\0\1\133\2\0\1\117\1\155\37\0"+
    "\1\133\2\0\1\144\1\156\42\0\2\157\37\0\1\133"+
    "\2\0\1\160\1\161\37\0\1\133\2\0\1\162\1\163"+
    "\37\0\1\133\2\0\1\164\1\165\56\0\1\166\27\0"+
    "\2\167\37\0\1\133\2\0\1\170\1\171\37\0\1\133"+
    "\2\0\1\172\1\173\37\0\1\133\2\0\1\174\1\173"+
    "\37\0\1\133\2\0\1\175\1\176\37\0\1\133\2\0"+
    "\1\177\1\200\37\0\1\133\2\0\1\201\1\163\42\0"+
    "\2\162\37\0\1\133\2\0\1\202\1\203\37\0\1\133"+
    "\2\0\1\204\1\205\37\0\1\206\2\0\1\207\1\210"+
    "\37\0\1\206\2\0\1\211\1\210\37\0\1\206\2\0"+
    "\1\162\1\212\37\0\1\206\2\0\1\201\1\212\56\0"+
    "\1\213\27\0\2\214\37\0\1\133\2\0\1\215\1\216"+
    "\37\0\1\133\2\0\1\217\1\216\37\0\1\206\2\0"+
    "\1\220\1\221\37\0\1\206\2\0\1\217\1\221\37\0"+
    "\1\206\2\0\1\215\1\221\37\0\1\133\2\0\1\222"+
    "\1\223\37\0\1\133\2\0\1\211\1\223\37\0\1\133"+
    "\2\0\1\224\1\225\37\0\1\133\2\0\1\226\1\225"+
    "\37\0\1\206\2\0\1\222\1\210\37\0\1\133\3\0"+
    "\1\150\37\0\1\133\2\0\1\167\1\227\37\0\1\133"+
    "\2\0\1\214\1\230\37\0\1\133\2\0\1\231\1\230"+
    "\43\0\1\232\37\0\1\206\2\0\1\233\1\234\37\0"+
    "\1\206\2\0\1\235\1\236\37\0\1\206\2\0\1\224"+
    "\1\234\37\0\1\206\2\0\1\237\1\240\56\0\1\241"+
    "\24\0\1\242\2\0\1\243\1\244\37\0\1\206\2\0"+
    "\1\243\1\245\37\0\1\206\2\0\1\231\1\245\37\0"+
    "\1\206\2\0\1\214\1\245\37\0\1\206\2\0\1\246"+
    "\1\245\37\0\1\206\2\0\1\247\1\250\37\0\1\206"+
    "\2\0\1\251\1\234\37\0\1\206\2\0\1\226\1\234"+
    "\37\0\1\206\2\0\1\252\1\253\37\0\1\206\2\0"+
    "\1\174\1\253\37\0\1\206\2\0\1\172\1\253\42\0"+
    "\2\231\37\0\1\242\2\0\1\231\1\254\37\0\1\242"+
    "\2\0\1\214\1\255\42\0\2\256\37\0\1\206\2\0"+
    "\1\257\1\253\37\0\1\206\2\0\1\260\1\261\37\0"+
    "\1\206\2\0\1\262\1\263\37\0\1\206\2\0\1\264"+
    "\1\263\37\0\1\206\2\0\1\265\1\266\37\0\1\206"+
    "\2\0\1\267\1\266\56\0\1\270\30\0\1\271\37\0"+
    "\1\242\2\0\1\246\1\272\37\0\1\242\2\0\1\273"+
    "\1\274\37\0\1\242\2\0\1\247\1\275\37\0\1\242"+
    "\2\0\1\276\1\277\37\0\1\242\2\0\1\300\1\301"+
    "\37\0\1\242\2\0\1\302\1\303\37\0\1\206\2\0"+
    "\1\304\1\253\37\0\1\206\2\0\1\305\1\221\37\0"+
    "\1\206\2\0\1\306\1\307\37\0\1\242\2\0\1\310"+
    "\1\311\37\0\1\242\2\0\1\312\1\313\42\0\2\300"+
    "\37\0\1\206\2\0\1\314\1\315\37\0\1\206\2\0"+
    "\1\316\1\317\37\0\1\206\2\0\1\320\1\317\37\0"+
    "\1\321\2\0\1\322\1\317\7\0\1\323\27\0\1\321"+
    "\2\0\1\320\1\317\7\0\1\323\27\0\1\321\2\0"+
    "\1\316\1\317\7\0\1\323\27\0\1\321\2\0\1\324"+
    "\1\263\7\0\1\323\27\0\1\321\2\0\1\264\1\263"+
    "\7\0\1\323\27\0\1\321\2\0\1\262\1\263\7\0"+
    "\1\323\46\0\1\325\27\0\2\326\37\0\1\242\2\0"+
    "\1\327\1\330\37\0\1\242\2\0\1\331\1\332\37\0"+
    "\1\242\2\0\1\333\1\332\37\0\1\242\2\0\1\334"+
    "\1\301\37\0\1\242\2\0\1\335\1\336\37\0\1\242"+
    "\2\0\1\337\1\340\37\0\1\341\2\0\1\342\1\343"+
    "\7\0\1\323\27\0\1\341\2\0\1\344\1\343\7\0"+
    "\1\323\27\0\1\341\2\0\1\300\1\301\7\0\1\323"+
    "\27\0\1\341\2\0\1\334\1\301\7\0\1\323\27\0"+
    "\1\206\2\0\1\345\1\221\37\0\1\206\2\0\1\276"+
    "\1\245\37\0\1\206\2\0\1\300\1\346\37\0\1\206"+
    "\2\0\1\302\1\346\37\0\1\242\2\0\1\347\1\343"+
    "\37\0\1\242\2\0\1\344\1\343\37\0\1\242\2\0"+
    "\1\350\1\351\37\0\1\242\2\0\1\352\1\351\37\0"+
    "\1\206\3\0\1\232\37\0\1\206\2\0\1\256\1\353"+
    "\37\0\1\321\2\0\1\342\1\346\7\0\1\323\27\0"+
    "\1\321\2\0\1\302\1\346\7\0\1\323\27\0\1\321"+
    "\2\0\1\300\1\346\7\0\1\323\33\0\1\232\7\0"+
    "\1\323\27\0\1\321\2\0\1\354\1\346\7\0\1\323"+
    "\27\0\1\321\2\0\1\355\1\317\7\0\1\323\46\0"+
    "\1\356\27\0\2\357\37\0\1\242\2\0\1\360\1\361"+
    "\37\0\1\242\2\0\1\362\1\361\37\0\1\341\2\0"+
    "\1\363\1\361\7\0\1\323\27\0\1\341\2\0\1\362"+
    "\1\361\7\0\1\323\27\0\1\341\2\0\1\360\1\361"+
    "\7\0\1\323\27\0\1\341\2\0\1\347\1\343\7\0"+
    "\1\323\27\0\1\242\3\0\1\271\37\0\1\242\2\0"+
    "\1\326\1\364\37\0\1\242\2\0\1\357\1\365\37\0"+
    "\1\242\2\0\1\366\1\365\43\0\1\271\7\0\1\323"+
    "\27\0\1\341\2\0\1\354\1\351\7\0\1\323\27\0"+
    "\1\341\2\0\1\352\1\351\7\0\1\323\27\0\1\341"+
    "\2\0\1\350\1\351\7\0\1\323\27\0\1\206\2\0"+
    "\1\335\1\367\37\0\1\341\2\0\1\302\1\303\7\0"+
    "\1\323\27\0\1\341\2\0\1\370\1\351\7\0\1\323"+
    "\27\0\1\341\2\0\1\371\1\332\7\0\1\323\27\0"+
    "\1\341\2\0\1\333\1\332\7\0\1\323\27\0\1\341"+
    "\2\0\1\331\1\332\7\0\1\323\32\0\2\302\37\0"+
    "\1\341\2\0\1\372\1\332\7\0\1\323\27\0\1\321"+
    "\2\0\1\372\1\346\7\0\1\323\46\0\1\373\24\0"+
    "\1\374\2\0\2\375\7\0\1\323\27\0\1\341\2\0"+
    "\1\375\1\365\7\0\1\323\27\0\1\341\2\0\1\366"+
    "\1\365\7\0\1\323\27\0\1\341\2\0\1\357\1\365"+
    "\7\0\1\323\27\0\1\341\2\0\1\376\1\365\7\0"+
    "\1\323\32\0\2\366\37\0\1\374\2\0\2\366\7\0"+
    "\1\323\27\0\1\374\2\0\2\357\7\0\1\323\27\0"+
    "\1\242\2\0\1\256\1\377\37\0\1\341\2\0\1\u0100"+
    "\1\332\7\0\1\323\27\0\1\341\2\0\1\u0101\1\361"+
    "\7\0\1\323\27\0\1\341\2\0\1\u0102\1\u0103\7\0"+
    "\1\323\46\0\1\u0104\40\0\1\323\27\0\1\374\2\0"+
    "\2\376\7\0\1\323\27\0\1\374\2\0\2\u0105\7\0"+
    "\1\323\32\0\2\334\37\0\1\341\2\0\1\u0106\1\361"+
    "\7\0\1\323\27\0\1\341\2\0\1\u0105\1\365\7\0"+
    "\1\323\27\0\1\341\3\0\1\271\7\0\1\323\27\0"+
    "\1\341\2\0\1\326\1\364\7\0\1\323\46\0\1\u0107"+
    "\24\0\1\374\2\0\2\u0108\7\0\1\323\27\0\1\341"+
    "\2\0\1\u0108\1\u0109\7\0\1\323\43\0\1\146\2\0"+
    "\1\356\24\0\1\374\13\0\1\323\27\0\1\374\2\0"+
    "\2\326\7\0\1\323\13\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9036];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\5\1\1\11\3\1\2\11\4\1\2\11"+
    "\1\0\1\11\3\0\1\1\3\0\1\11\7\0\1\11"+
    "\4\0\1\1\24\0\1\11\45\0\1\11\154\0\1\11"+
    "\66\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[265];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  Scanner(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length * 2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException(
          "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE) {
      zzBuffer = new char[ZZ_BUFFERSIZE];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.err.println("Unrecognized character: " + yytext());
            }
            // fall through
          case 17: break;
          case 2:
            { ;
            }
            // fall through
          case 18: break;
          case 3:
            { return new Symbol(sym.V);
            }
            // fall through
          case 19: break;
          case 4:
            { return new Symbol(sym.INT, Integer.parseInt(yytext()));
            }
            // fall through
          case 20: break;
          case 5:
            { return new Symbol(sym.DP);
            }
            // fall through
          case 21: break;
          case 6:
            { return new Symbol(sym.PV);
            }
            // fall through
          case 22: break;
          case 7:
            { return new Symbol(sym.GA);
            }
            // fall through
          case 23: break;
          case 8:
            { return new Symbol(sym.GC);
            }
            // fall through
          case 24: break;
          case 9:
            { return new Symbol(sym.STR, new String(yytext()));
            }
            // fall through
          case 25: break;
          case 10:
            { return new Symbol(sym.DOUBLE, Double.parseDouble(yytext()));
            }
            // fall through
          case 26: break;
          case 11:
            { return new Symbol(sym.KG);
            }
            // fall through
          case 27: break;
          case 12:
            { return new Symbol(sym.SEP);
            }
            // fall through
          case 28: break;
          case 13:
            { return new Symbol(sym.EURO);
            }
            // fall through
          case 29: break;
          case 14:
            { return new Symbol(sym.EUROKG);
            }
            // fall through
          case 30: break;
          case 15:
            { return new Symbol(sym.TOK1);
            }
            // fall through
          case 31: break;
          case 16:
            { return new Symbol(sym.TOK2);
            }
            // fall through
          case 32: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
