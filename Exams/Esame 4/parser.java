
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\002\007\000\002\017" +
    "\003\000\002\017\003\000\002\016\004\000\002\015\005" +
    "\000\002\015\006\000\002\014\005\000\002\014\013\000" +
    "\002\014\016\000\002\013\006\000\002\012\003\000\002" +
    "\012\002\000\002\011\004\000\002\011\003\000\002\010" +
    "\003\000\002\007\005\000\002\007\004\000\002\006\007" +
    "\000\002\025\005\000\002\025\003\000\002\024\005\000" +
    "\002\005\003\000\002\005\002\000\002\004\004\000\002" +
    "\004\003\000\002\003\010\000\002\023\005\000\002\023" +
    "\003\000\002\022\006\000\002\021\005\000\002\021\003" +
    "\000\002\020\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\006\011\005\012\004\001\002\000\006\011" +
    "\110\012\ufff5\001\002\000\004\011\105\001\002\000\006" +
    "\011\067\012\066\001\002\000\004\016\ufffe\001\002\000" +
    "\004\002\065\001\002\000\004\016\uffff\001\002\000\004" +
    "\016\013\001\002\000\004\007\016\001\002\000\004\016" +
    "\035\001\002\000\004\007\016\001\002\000\004\021\023" +
    "\001\002\000\006\007\016\016\ufff2\001\002\000\004\007" +
    "\016\001\002\000\006\007\ufff1\016\ufff1\001\002\000\006" +
    "\005\uffed\010\uffed\001\002\000\004\017\032\001\002\000" +
    "\006\005\025\010\026\001\002\000\004\021\023\001\002" +
    "\000\004\021\027\001\002\000\004\004\030\001\002\000" +
    "\006\007\uffef\016\uffef\001\002\000\006\005\uffee\010\uffee" +
    "\001\002\000\004\013\033\001\002\000\006\005\uffec\010" +
    "\uffec\001\002\000\006\007\ufff0\016\ufff0\001\002\000\006" +
    "\002\uffea\017\040\001\002\000\004\002\000\001\002\000" +
    "\006\002\uffeb\017\040\001\002\000\004\014\042\001\002" +
    "\000\006\002\uffe8\017\uffe8\001\002\000\004\021\043\001" +
    "\002\000\004\006\044\001\002\000\004\021\047\001\002" +
    "\000\006\004\062\005\061\001\002\000\006\004\uffe5\005" +
    "\uffe5\001\002\000\004\007\050\001\002\000\004\021\052" +
    "\001\002\000\006\005\uffe2\010\uffe2\001\002\000\004\020" +
    "\057\001\002\000\006\005\054\010\055\001\002\000\004" +
    "\021\052\001\002\000\006\004\uffe4\005\uffe4\001\002\000" +
    "\006\005\uffe3\010\uffe3\001\002\000\004\015\060\001\002" +
    "\000\006\005\uffe1\010\uffe1\001\002\000\004\021\047\001" +
    "\002\000\006\002\uffe7\017\uffe7\001\002\000\006\004\uffe6" +
    "\005\uffe6\001\002\000\006\002\uffe9\017\uffe9\001\002\000" +
    "\004\002\001\001\002\000\004\012\072\001\002\000\004" +
    "\011\071\001\002\000\004\016\ufffd\001\002\000\006\011" +
    "\ufffc\012\ufffc\001\002\000\004\012\073\001\002\000\006" +
    "\012\074\016\ufffa\001\002\000\004\012\075\001\002\000" +
    "\004\012\076\001\002\000\004\012\077\001\002\000\004" +
    "\012\100\001\002\000\004\012\101\001\002\000\006\012" +
    "\102\016\ufff9\001\002\000\004\012\103\001\002\000\004" +
    "\012\104\001\002\000\004\016\ufff8\001\002\000\004\011" +
    "\106\001\002\000\004\011\107\001\002\000\006\011\ufffb" +
    "\012\ufffb\001\002\000\010\011\ufff3\012\ufff3\016\ufff3\001" +
    "\002\000\004\012\114\001\002\000\010\011\113\012\ufff6" +
    "\016\ufff6\001\002\000\010\011\ufff4\012\ufff4\016\ufff4\001" +
    "\002\000\006\011\110\016\ufff5\001\002\000\004\016\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\014\002\007\013\006\015\005\016\010\017" +
    "\011\001\001\000\006\011\111\012\110\001\001\000\002" +
    "\001\001\000\004\014\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\006\014\007\016\010\013\001\001\000\002\001\001\000" +
    "\004\006\033\001\001\000\006\024\021\025\023\001\001" +
    "\000\004\006\017\001\001\000\004\006\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\024\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\003" +
    "\040\004\036\005\035\001\001\000\002\001\001\000\004" +
    "\003\063\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\022\045\023\044" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\020\050\021\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\055\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\022\062\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\011" +
    "\111\012\114\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Material>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Material>> map = new HashMap<String, ArrayList<Material>>();

    public String getLess(ArrayList<Material> list) {
        String less = new String();
        Double min = list.get(0).getPrice();
        for(Material mat: list) {
            if (mat.getPrice() < min) {
                min = mat.getPrice();
                less = mat.getName();
            }
        }
        return less;
    }

    public String getMore(ArrayList<Material> list) {
        String more = new String();
        Double max = list.get(0).getPrice();
        for(Material mat: list) {
            if (mat.getPrice() > max) {
                max = mat.getPrice();
                more = mat.getName();
            }
        }
        return more;
    }

    public Double computePrice(String type, Comp com, Double tax) {
        ArrayList<Material> list = map.get(type);
        Double price = 0.0;

        for(Material mat: list) {
            if(mat.getName().equals(com.getName())){
                price = (com.getQuan() * mat.getPrice()) + tax;
            }
        }
        return price;
    }

    public class Material {
        private String name;
        private Double price;

        Material(String name, Double price) {
            this.name = name;
            this.price = price;
        }

        public String getName() {
            return this.name;
        }

        public Double getPrice() {
            return this.price;
        }
    }

    public class Comp {
        private String name;
        private Integer quan;

        Comp(String name, Integer quan) {
            this.name = name;
            this.quan = quan;
        }

        public String getName() {
            return this.name;
        }

        public Integer getQuan() {
            return this.quan;
        }
    }

    public class Elem {
        private String type;
        private ArrayList<Comp> list;

        Elem(String type, ArrayList<Comp> list) {
            this.type = type;
            this.list = list;
        }

        public String getType() {
            return this.type;
        }

        public ArrayList<Comp> getList() {
            return this.list;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP warehouse_section SEP product_section 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= sep1 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= sep2 
            { parser.Tree.reduce(1,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // sep1 ::= tok1s tok2s 
            { parser.Tree.reduce(2,"sep1",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep1",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // tok1s ::= tok1s TOK1 TOK1 
            { parser.Tree.reduce(3,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // tok1s ::= TOK1 TOK1 TOK1 TOK1 
            { parser.Tree.reduce(4,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // tok2s ::= TOK2 TOK2 TOK2 
            { parser.Tree.reduce(3,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // tok2s ::= TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 
            { parser.Tree.reduce(9,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // tok2s ::= TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 TOK2 
            { parser.Tree.reduce(12,"tok2s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok2s",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-11)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // sep2 ::= TOK2 tok1e TOK2 tok1e 
            { parser.Tree.reduce(4,"sep2",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("sep2",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok1e ::= tok1se 
            { parser.Tree.reduce(1,"tok1e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1e",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tok1e ::= 
            { parser.Tree.reduce(0,"tok1e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1e",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tok1se ::= tok1se TOK1 
            { parser.Tree.reduce(2,"tok1se",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1se",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tok1se ::= TOK1 
            { parser.Tree.reduce(1,"tok1se",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1se",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // warehouse_section ::= material_type_list 
            { parser.Tree.reduce(1,"warehouse_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("warehouse_section",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // material_type_list ::= material_type_list material_type material_type 
            { parser.Tree.reduce(3,"material_type_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_type_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // material_type_list ::= material_type material_type 
            { parser.Tree.reduce(2,"material_type_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_type_list",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // material_type ::= GA material_list GC STR PV 
            { parser.Tree.reduce(5,"material_type",0);
              Object RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ArrayList<Material> list = (ArrayList<Material>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(type, list);
    String less = getLess(list);
    String more = getMore(list);
    System.out.println(type+": less: "+less+", more: "+more);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_type",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // material_list ::= material_list V material 
            { parser.Tree.reduce(3,"material_list",0);
              ArrayList<Material> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Material> list = (ArrayList<Material>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int matleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Material mat = (Material)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(mat);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // material_list ::= material 
            { parser.Tree.reduce(1,"material_list",0);
              ArrayList<Material> RESULT =null;
		int matleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int matright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Material mat = (Material)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Material> list = new ArrayList();
    list.add(mat);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material_list",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // material ::= STR DOUBLE EUROKG 
            { parser.Tree.reduce(3,"material",0);
              Material RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Material mat = new Material(name, price);
    RESULT = mat;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("material",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // product_section ::= product_list 
            { parser.Tree.reduce(1,"product_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_section",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // product_section ::= 
            { parser.Tree.reduce(0,"product_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_section",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // product_list ::= product_list product 
            { parser.Tree.reduce(2,"product_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // product_list ::= product 
            { parser.Tree.reduce(1,"product_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product_list",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // product ::= DOUBLE EURO STR DP element_list PV 
            { parser.Tree.reduce(6,"product",1);
              Object RESULT =null;
		int taxleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int taxright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Double tax = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Elem> list = (ArrayList<Elem>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double price = 0.0;
    System.out.println(name);
    for(Elem el: list) {
        for(Comp com: el.getList()) {
            price = computePrice(el.getType(), com, tax);
            System.out.println(com.getName()+ price + "euro");
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("product",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // element_list ::= element_list V element 
            { parser.Tree.reduce(3,"element_list",0);
              ArrayList<Elem> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Elem> list = (ArrayList<Elem>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elem el = (Elem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(el);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // element_list ::= element 
            { parser.Tree.reduce(1,"element_list",0);
              ArrayList<Elem> RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Elem el = (Elem)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Elem> list = new ArrayList();
    list.add(el);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // element ::= STR GA component_list GC 
            { parser.Tree.reduce(4,"element",0);
              Elem RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Comp> list = (ArrayList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Elem el = new Elem(type, list);
    RESULT = el;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("element",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // component_list ::= component_list V component 
            { parser.Tree.reduce(3,"component_list",0);
              ArrayList<Comp> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Comp> list = (ArrayList<Comp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp comp = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(comp);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // component_list ::= component 
            { parser.Tree.reduce(1,"component_list",0);
              ArrayList<Comp> RESULT =null;
		int compleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int compright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comp comp = (Comp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Comp> list = new ArrayList();
    list.add(comp);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // component ::= STR INT KG 
            { parser.Tree.reduce(3,"component",0);
              Comp RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int quantityleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int quantityright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer quantity = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Comp comp = new Comp(name, quantity);
    RESULT = comp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("component",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
