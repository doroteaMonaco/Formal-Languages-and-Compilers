
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\007\000\002\003" +
    "\004\000\002\003\004\000\002\003\007\000\002\003\007" +
    "\000\002\003\006\000\002\003\006\000\002\003\006\000" +
    "\002\003\006\000\002\003\005\000\002\003\005\000\002" +
    "\011\004\000\002\011\003\000\002\004\003\000\002\010" +
    "\005\000\002\010\004\000\002\007\006\000\002\024\005" +
    "\000\002\024\003\000\002\023\006\000\002\005\004\000" +
    "\002\005\003\000\002\012\004\000\002\012\003\000\002" +
    "\006\012\000\002\022\005\000\002\022\003\000\002\021" +
    "\003\000\002\020\004\000\002\020\003\000\002\017\006" +
    "\000\002\016\005\000\002\016\003\000\002\015\006\000" +
    "\002\014\005\000\002\014\003\000\002\013\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\016\006\017\005\020\004\001\002\000" +
    "\006\016\006\017\120\001\002\000\006\016\006\020\114" +
    "\001\002\000\012\016\ufff4\017\ufff4\020\ufff4\025\ufff4\001" +
    "\002\000\010\016\105\017\104\020\103\001\002\000\004" +
    "\002\102\001\002\000\004\025\012\001\002\000\004\027" +
    "\015\001\002\000\006\025\ufff3\027\015\001\002\000\004" +
    "\025\032\001\002\000\004\005\020\001\002\000\004\027" +
    "\015\001\002\000\006\025\ufff1\027\ufff1\001\002\000\004" +
    "\027\021\001\002\000\004\014\027\001\002\000\006\006" +
    "\025\011\024\001\002\000\006\006\uffee\011\uffee\001\002" +
    "\000\004\027\021\001\002\000\006\025\ufff0\027\ufff0\001" +
    "\002\000\006\006\uffef\011\uffef\001\002\000\004\026\030" +
    "\001\002\000\004\021\031\001\002\000\006\006\uffed\011" +
    "\uffed\001\002\000\006\023\035\027\036\001\002\000\006" +
    "\023\035\027\036\001\002\000\006\023\uffe9\027\uffe9\001" +
    "\002\000\004\007\063\001\002\000\004\015\043\001\002" +
    "\000\004\002\000\001\002\000\006\002\uffeb\027\036\001" +
    "\002\000\006\002\uffe3\027\uffe3\001\002\000\006\002\uffe4" +
    "\027\uffe4\001\002\000\004\024\046\001\002\000\006\004" +
    "\061\012\060\001\002\000\006\004\uffe0\012\uffe0\001\002" +
    "\000\004\026\047\001\002\000\004\013\050\001\002\000" +
    "\004\027\053\001\002\000\010\004\uffdf\011\056\012\uffdf" +
    "\001\002\000\010\004\uffdd\011\uffdd\012\uffdd\001\002\000" +
    "\004\026\054\001\002\000\004\022\055\001\002\000\010" +
    "\004\uffdc\011\uffdc\012\uffdc\001\002\000\004\027\053\001" +
    "\002\000\010\004\uffde\011\uffde\012\uffde\001\002\000\004" +
    "\024\046\001\002\000\006\002\uffe2\027\uffe2\001\002\000" +
    "\006\004\uffe1\012\uffe1\001\002\000\004\027\064\001\002" +
    "\000\004\010\065\001\002\000\004\007\066\001\002\000" +
    "\004\027\070\001\002\000\006\010\073\011\072\001\002" +
    "\000\006\010\uffe5\011\uffe5\001\002\000\006\010\uffe6\011" +
    "\uffe6\001\002\000\004\027\070\001\002\000\004\004\074" +
    "\001\002\000\006\023\uffe8\027\uffe8\001\002\000\006\010" +
    "\uffe7\011\uffe7\001\002\000\006\023\uffea\027\uffea\001\002" +
    "\000\006\002\uffec\027\036\001\002\000\004\027\015\001" +
    "\002\000\006\025\ufff2\027\ufff2\001\002\000\004\002\001" +
    "\001\002\000\004\016\006\001\002\000\004\016\006\001" +
    "\002\000\012\016\ufff5\017\ufff5\020\ufff5\025\ufff5\001\002" +
    "\000\006\016\105\020\107\001\002\000\006\016\006\025" +
    "\ufff9\001\002\000\006\016\105\025\ufffd\001\002\000\006" +
    "\016\105\017\112\001\002\000\006\016\006\025\ufff8\001" +
    "\002\000\006\016\105\025\ufffc\001\002\000\004\025\uffff" +
    "\001\002\000\006\016\105\020\116\001\002\000\006\016" +
    "\006\025\ufff7\001\002\000\006\016\105\025\ufffb\001\002" +
    "\000\004\025\ufffe\001\002\000\006\016\105\017\122\001" +
    "\002\000\006\016\006\025\ufff6\001\002\000\006\016\105" +
    "\025\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\121\000\010\002\007\003\010\011\006\001\001\000" +
    "\004\011\120\001\001\000\004\011\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\004\013\007\015\010\012\001\001\000\004" +
    "\007\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\016\001\001\000\002\001\001\000\006\023\022" +
    "\024\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\025\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\005\036\006\033\012\032\017\040" +
    "\020\037\001\001\000\010\006\075\017\040\020\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\015\044\016\043\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\013\051\014\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\013\056\001\001\000\002" +
    "\001\001\000\004\015\061\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\021\070\022\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\074" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\041\001\001\000\004" +
    "\007\100\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\110\001\001\000\004\011\105\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\107\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\011\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\011\116\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\122\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Speed>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Speed>> map = new HashMap<String, ArrayList<Speed>>();

    public Integer getMin(String name, ArrayList<String> list) {
        ArrayList<Speed> sp = map.get(name);
        Integer min = sp.get(0).getSpeed();
        for(String str: list) {
            for(Speed s: sp) {
                if(str.equals(s.getName())){
                    if(s.getSpeed() < min) {
                        min = s.getSpeed();
                    }
                }
            }
        }
        return min;
    }

    public Integer getMax(String name, ArrayList<String> list) {
        ArrayList<Speed> sp = map.get(name);
        Integer max = 0;
        for(String str: list) {
            for(Speed s: sp) {
                if(str.equals(s.getName())){
                    if(s.getSpeed() > max) {
                        max = s.getSpeed();
                    }
                }
            }
        }
        return max;
    }

    public Double computeStat(Stat s, String name) {
        Double res = 0.0;
        ArrayList<Speed> list = map.get(name);
        for(Speed sp: list) {
            if(sp.getName().equals(s.getName())){
                res = Double.parseDouble(s.getStat().toString()) / Double.parseDouble(sp.getSpeed().toString());
            }
        }
        return res;
    }

    public class Speed {
        private String name;
        private Integer speed;

        Speed(String name, Integer speed) {
            this.name = name;
            this.speed = speed;
        }

        public String getName() {
            return this.name;
        }

        public Integer getSpeed() {
            return this.speed;
        }
    }

    public class Stat {
        private String name;
        private Integer stat;

        Stat(String name, Integer stat) {
            this.name = name;
            this.stat = stat;
        }

        public String getName() {
            return this.name;
        }

        public Integer getStat() {
            return this.stat;
        }
    }

    public class Part {
        private Integer npart;
        private Double res;

        Part(Integer npart, Double res) {
            this.npart = npart;
            this.res = res;
        }

        public Integer getN() {
            return this.npart;
        }

        public Double getRes() {
            return this.res;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP cars_section SEP race_section 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK2 TOK3 
            { parser.Tree.reduce(2,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TOK3 TOK2 
            { parser.Tree.reduce(2,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tok1s TOK2 tok1s TOK3 tok1s 
            { parser.Tree.reduce(5,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= tok1s TOK3 tok1s TOK2 tok1s 
            { parser.Tree.reduce(5,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= TOK2 tok1s TOK3 tok1s 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= TOK3 tok1s TOK2 tok1s 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= tok1s TOK2 tok1s TOK3 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= tok1s TOK3 tok1s TOK2 
            { parser.Tree.reduce(4,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= TOK2 tok1s TOK3 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header ::= TOK3 tok1s TOK2 
            { parser.Tree.reduce(3,"header",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // cars_section ::= cars_list 
            { parser.Tree.reduce(1,"cars_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cars_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // cars_list ::= cars_list cars cars 
            { parser.Tree.reduce(3,"cars_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cars_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // cars_list ::= cars cars 
            { parser.Tree.reduce(2,"cars_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cars_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // cars ::= STR GA speed_list GC 
            { parser.Tree.reduce(4,"cars",0);
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Speed> list = (ArrayList<Speed>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(c, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cars",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // speed_list ::= speed_list V speed 
            { parser.Tree.reduce(3,"speed_list",0);
              ArrayList<Speed> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Speed> list = (ArrayList<Speed>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Speed s = (Speed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(s);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // speed_list ::= speed 
            { parser.Tree.reduce(1,"speed_list",0);
              ArrayList<Speed> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Speed s = (Speed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Speed> list = new ArrayList();
    list.add(s);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_list",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // speed ::= STR EQ INT MS 
            { parser.Tree.reduce(4,"speed",0);
              Speed RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer v = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Speed s = new Speed(n, v);
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // race_section ::= print_list performance_list 
            { parser.Tree.reduce(2,"race_section",0);
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String[]> p = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] first = p.get(0);
    Double min = Double.parseDouble(first[1]);
    String minS = new String();
    for(String[] s: p) {
        if (Double.parseDouble(s[1]) < min) {
            min = Double.parseDouble(s[1]);
            minS = s[0];
        }
    }
    System.out.println("WINNER:"+minS+min+"s");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("race_section",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // race_section ::= performance_list 
            { parser.Tree.reduce(1,"race_section",0);
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<String[]> p = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    String[] first = p.get(0);
    Double min = Double.parseDouble(first[1]);
    String minS = new String();
    for(String[] s: p) {
        if (Double.parseDouble(s[1]) < min) {
            min = Double.parseDouble(s[1]);
            minS = s[0];
        }
    }
    System.out.println("WINNER:"+minS+min+"s");

              CUP$parser$result = parser.getSymbolFactory().newSymbol("race_section",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // print_list ::= print_list print 
            { parser.Tree.reduce(2,"print_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // print_list ::= print 
            { parser.Tree.reduce(1,"print_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // print ::= PRINT TA STR TC TA section_list TC PV 
            { parser.Tree.reduce(8,"print",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Integer min = getMin(name, list);
    System.out.print("MIN:"+min);
    Integer max = getMax(name, list);
    System.out.print("MAX:"+max);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // section_list ::= section_list V section 
            { parser.Tree.reduce(3,"section_list",0);
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(s);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // section_list ::= section 
            { parser.Tree.reduce(1,"section_list",0);
              ArrayList<String> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<String> list = new ArrayList();
    list.add(s);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_list",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // section ::= STR 
            { parser.Tree.reduce(1,"section",0);
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("section",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // performance_list ::= performance_list performance 
            { parser.Tree.reduce(2,"performance_list",0);
              ArrayList<String[]> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<String[]> list = (ArrayList<String[]>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] p = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(p);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("performance_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // performance_list ::= performance 
            { parser.Tree.reduce(1,"performance_list",0);
              ArrayList<String[]> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String[] p = (String[])((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<String[]> list = new ArrayList();
    list.add(p);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("performance_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // performance ::= STR ARROW part_list PV 
            { parser.Tree.reduce(4,"performance",0);
              String[] RESULT =null;
		int carleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int carright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String car = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Part> list = (ArrayList<Part>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double sum = 0.0;
    System.out.println(car.toString());
    for(Part p: list) {
        System.out.println("PART"+p.getN()+":"+p.getRes());
        sum += p.getRes();
    }
    System.out.println("TOT:"+sum);
    String[] s = new String[2];
    s[0] = car;
    s[1] = sum.toString();
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("performance",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // part_list ::= part_list BAR part 
            { parser.Tree.reduce(3,"part_list",0);
              ArrayList<Part> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Part> list = (ArrayList<Part>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Part p = (Part)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(p);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // part_list ::= part 
            { parser.Tree.reduce(1,"part_list",0);
              ArrayList<Part> RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Part p = (Part)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Part> list = new ArrayList();
    list.add(p);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // part ::= PART INT DP stat_list 
            { parser.Tree.reduce(4,"part",0);
              Part RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> list = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Double sum = 0.0;
    for (Stat s: list) {
        String name = parser.stack(-7).toString();
        Double res = computeStat(s, name);
        sum += res;
    }
    Part p = new Part(n, sum);
    RESULT = p;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // stat_list ::= stat_list V stat 
            { parser.Tree.reduce(3,"stat_list",0);
              ArrayList<Stat> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stat> list = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(s);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // stat_list ::= stat 
            { parser.Tree.reduce(1,"stat_list",0);
              ArrayList<Stat> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat s = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Stat> list = new ArrayList();
    list.add(s);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // stat ::= STR INT M 
            { parser.Tree.reduce(3,"stat",0);
              Stat RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer m = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Stat s = new Stat(name, m);
    RESULT = s;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("stat",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
