
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\007\000\002\014" +
    "\004\000\002\014\004\000\002\014\007\000\002\014\007" +
    "\000\002\014\006\000\002\014\006\000\002\014\005\000" +
    "\002\014\005\000\002\014\005\000\002\014\005\000\002" +
    "\014\006\000\002\014\006\000\002\013\004\000\002\013" +
    "\003\000\002\011\003\000\002\010\005\000\002\010\004" +
    "\000\002\007\006\000\002\023\005\000\002\023\003\000" +
    "\002\022\006\000\002\012\004\000\002\012\003\000\002" +
    "\006\004\000\002\006\003\000\002\005\012\000\002\021" +
    "\005\000\002\021\003\000\002\003\004\000\002\003\003" +
    "\000\002\004\006\000\002\020\005\000\002\020\003\000" +
    "\002\017\006\000\002\016\005\000\002\016\003\000\002" +
    "\015\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\010\016\006\017\005\020\004\001\002\000" +
    "\006\016\006\017\121\001\002\000\006\016\006\020\115" +
    "\001\002\000\012\016\ufff2\017\ufff2\020\ufff2\025\ufff2\001" +
    "\002\000\010\016\104\017\103\020\102\001\002\000\004" +
    "\002\101\001\002\000\004\025\012\001\002\000\004\027" +
    "\014\001\002\000\004\027\014\001\002\000\004\014\066" +
    "\001\002\000\004\025\021\001\002\000\006\025\ufff1\027" +
    "\014\001\002\000\004\027\014\001\002\000\006\025\ufff0" +
    "\027\ufff0\001\002\000\006\022\025\027\027\001\002\000" +
    "\006\022\025\027\027\001\002\000\006\002\uffe2\027\uffe2" +
    "\001\002\000\006\022\uffe7\027\uffe7\001\002\000\004\012" +
    "\052\001\002\000\006\002\uffe9\027\027\001\002\000\004" +
    "\010\031\001\002\000\004\002\000\001\002\000\004\023" +
    "\034\001\002\000\006\004\047\006\046\001\002\000\006" +
    "\004\uffdf\006\uffdf\001\002\000\004\026\035\001\002\000" +
    "\004\007\036\001\002\000\004\027\041\001\002\000\010" +
    "\004\uffde\005\044\006\uffde\001\002\000\010\004\uffdc\005" +
    "\uffdc\006\uffdc\001\002\000\004\026\042\001\002\000\004" +
    "\024\043\001\002\000\010\004\uffdb\005\uffdb\006\uffdb\001" +
    "\002\000\004\027\041\001\002\000\010\004\uffdd\005\uffdd" +
    "\006\uffdd\001\002\000\004\023\034\001\002\000\006\002" +
    "\uffe1\027\uffe1\001\002\000\006\004\uffe0\006\uffe0\001\002" +
    "\000\006\002\uffe3\027\uffe3\001\002\000\004\027\053\001" +
    "\002\000\004\013\054\001\002\000\004\012\055\001\002" +
    "\000\004\027\057\001\002\000\006\005\060\013\061\001" +
    "\002\000\006\005\uffe4\013\uffe4\001\002\000\004\027\063" +
    "\001\002\000\004\004\062\001\002\000\006\022\uffe6\027" +
    "\uffe6\001\002\000\006\005\uffe5\013\uffe5\001\002\000\006" +
    "\022\uffe8\027\uffe8\001\002\000\006\002\uffea\027\027\001" +
    "\002\000\004\027\067\001\002\000\004\011\075\001\002" +
    "\000\006\005\072\015\073\001\002\000\006\005\uffec\015" +
    "\uffec\001\002\000\004\027\067\001\002\000\006\025\uffee" +
    "\027\uffee\001\002\000\006\005\uffed\015\uffed\001\002\000" +
    "\004\026\076\001\002\000\004\021\077\001\002\000\006" +
    "\005\uffeb\015\uffeb\001\002\000\006\025\uffef\027\uffef\001" +
    "\002\000\004\002\001\001\002\000\006\016\006\017\111" +
    "\001\002\000\006\016\006\020\105\001\002\000\012\016" +
    "\ufff3\017\ufff3\020\ufff3\025\ufff3\001\002\000\004\025\ufff9" +
    "\001\002\000\006\016\104\020\107\001\002\000\006\016" +
    "\006\025\ufffb\001\002\000\006\016\104\025\ufffd\001\002" +
    "\000\004\025\ufff8\001\002\000\006\016\104\017\113\001" +
    "\002\000\006\016\006\025\ufffa\001\002\000\006\016\104" +
    "\025\ufffc\001\002\000\004\025\uffff\001\002\000\006\016" +
    "\104\020\117\001\002\000\006\016\006\025\ufff7\001\002" +
    "\000\006\016\104\025\ufff5\001\002\000\004\025\ufffe\001" +
    "\002\000\006\016\104\017\123\001\002\000\006\016\006" +
    "\025\ufff6\001\002\000\006\016\104\025\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\122\000\010\002\007\013\006\014\010\001\001\000" +
    "\004\013\121\001\001\000\004\013\115\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\012\010\015\011\014\001\001\000\004" +
    "\007\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\016\001\001\000\004\007\017\001\001\000\002" +
    "\001\001\000\014\003\025\004\022\005\023\006\021\012" +
    "\027\001\001\000\010\003\064\004\022\005\063\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\004\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\017\032\020\031\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\037\016\036\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\044\001\001\000\002\001\001\000\004\017" +
    "\047\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\021\055\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\004\050" +
    "\001\001\000\006\022\070\023\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\073" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\111\001\001\000\004\013" +
    "\105\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\013\107\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\123\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Speed>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Speed>> map = new HashMap<String, ArrayList<Speed>>();
    
    public class Speed {
        private String sec;
        private Integer spe;

        Speed(String sec, Integer spe) {
            this.sec = sec;
            this.spe = spe;
        }

        public String getSection() {
            return this.sec;
        }

        public Integer getSpeed() {
            return this.spe;
        }
    }

    public class Stat {
        private String sec;
        private Integer dist;

        Stat(String sec, Integer dist) {
            this.sec = sec;
            this.dist = dist;
        }

        public String getSection() {
            return this.sec;
        }

        public Integer getDist() {
            return this.dist;
        }
    }

    public class Part {
        private Integer id;
        private ArrayList<Stat> list;

        Part(Integer id, ArrayList<Stat> list) {
            this.id = id;
            this.list = list;
        }

        public Integer getID() {
            return this.id;
        }

        public ArrayList<Stat> getList() {
            return this.list;
        }
    }

    public Integer getMin(String car, ArrayList<String> list) {
        ArrayList<Speed> slist = map.get(car);
        Integer min = slist.get(0).getSpeed();

        for(String str: list) {
            for(Speed sp: slist) {
                if(sp.getSection().equals(str)){
                    if(sp.getSpeed() < min){
                        min = sp.getSpeed();
                    }
                }
            }
        }
        return min;
    }

    public Integer getMax(String car, ArrayList<String> list) {
        ArrayList<Speed> slist = map.get(car);
        Integer max = 0;

        for(String str: list) {
            for(Speed sp: slist) {
                if(sp.getSection().equals(str)){
                    if(sp.getSpeed() > max){
                        max = sp.getSpeed();
                    }
                }
            }
        }
        return max;
    }

    public Double computeTime(String car, Stat st) {
        ArrayList<Speed> list = map.get(car);
        Double time = 0.0;

        for(Speed sp: list) {
            if(sp.getSection().equals(st.getSection())) {
                time = Double.parseDouble(st.getDist().toString()) / Double.parseDouble(sp.getSpeed().toString());
            }
        }
        return time;
    }
    
    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP car_section SEP race_section 
            { parser.Tree.reduce(5,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK2 TOK3 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= TOK3 TOK2 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tok1s TOK2 tok1s TOK3 tok1s 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= tok1s TOK3 tok1s TOK2 tok1s 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= tok1s TOK2 tok1s TOK3 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= tok1s TOK3 tok1s TOK2 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= tok1s TOK2 TOK3 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= tok1s TOK3 TOK2 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // header ::= TOK2 tok1s TOK3 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // header ::= TOK3 tok1s TOK2 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // header ::= TOK2 tok1s TOK3 tok1s 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // header ::= TOK3 tok1s TOK2 tok1s 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // car_section ::= car_list 
            { parser.Tree.reduce(1,"car_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_section",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // car_list ::= car_list car car 
            { parser.Tree.reduce(3,"car_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // car_list ::= car car 
            { parser.Tree.reduce(2,"car_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("car_list",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // car ::= STR GA speed_list GC 
            { parser.Tree.reduce(4,"car",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Speed> list = (ArrayList<Speed>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    parser.map.put(name, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("car",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // speed_list ::= speed_list V speed 
            { parser.Tree.reduce(3,"speed_list",0);
              ArrayList<Speed> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Speed> list = (ArrayList<Speed>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int speleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int speright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Speed spe = (Speed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(spe);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // speed_list ::= speed 
            { parser.Tree.reduce(1,"speed_list",0);
              ArrayList<Speed> RESULT =null;
		int speleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int speright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Speed spe = (Speed)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Speed> list = new ArrayList();
    list.add(spe);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed_list",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // speed ::= STR EQ INT MS 
            { parser.Tree.reduce(4,"speed",0);
              Speed RESULT =null;
		int secleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int secright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String sec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int speleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int speright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer spe = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Speed sp = new Speed(sec, spe);
    RESULT = sp;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("speed",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // race_section ::= print_list perf_list 
            { parser.Tree.reduce(2,"race_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("race_section",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // race_section ::= perf_list 
            { parser.Tree.reduce(1,"race_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("race_section",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // print_list ::= print_list print 
            { parser.Tree.reduce(2,"print_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // print_list ::= print 
            { parser.Tree.reduce(1,"print_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // print ::= PRINT TA STR TC TA section_list TC PV 
            { parser.Tree.reduce(8,"print",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Integer min = getMin(name, list);
    Integer max = getMax(name, list);
    System.out.println("MIN: "+min+" MAX: "+max);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("print",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // section_list ::= section_list V STR 
            { parser.Tree.reduce(3,"section_list",0);
              ArrayList<String> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<String> list = (ArrayList<String>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(str);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // section_list ::= STR 
            { parser.Tree.reduce(1,"section_list",0);
              ArrayList<String> RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<String> list = new ArrayList();
    list.add(str);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("section_list",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // perf_list ::= perf_list perf 
            { parser.Tree.reduce(2,"perf_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("perf_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // perf_list ::= perf 
            { parser.Tree.reduce(1,"perf_list",1);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("perf_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // perf ::= STR ARROW part_list PV 
            { parser.Tree.reduce(4,"perf",0);
              Object RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Part> list = (ArrayList<Part>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(name);
    Double totP = 0.0;
    for(Part pt: list) {
        Double totT = 0.0;
        for(Stat st: pt.getList()) {
            Double time = computeTime(name, st);
            totT += time;
        }
        totP += totT;
        System.out.println("PART"+pt.getID()+": "+totT+" s");
    }
    System.out.println("TOTAL: "+totP+" s");


              CUP$parser$result = parser.getSymbolFactory().newSymbol("perf",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // part_list ::= part_list BAR part 
            { parser.Tree.reduce(3,"part_list",0);
              ArrayList<Part> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Part> list = (ArrayList<Part>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Part pt = (Part)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(pt);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // part_list ::= part 
            { parser.Tree.reduce(1,"part_list",0);
              ArrayList<Part> RESULT =null;
		int ptleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ptright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Part pt = (Part)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Part> list = new ArrayList();
    list.add(pt);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part_list",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // part ::= PART INT DP drive_stat_list 
            { parser.Tree.reduce(4,"part",0);
              Part RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer n = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<Stat> list = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Part pt = new Part(n, list);
    RESULT = pt;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("part",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // drive_stat_list ::= drive_stat_list V drive_stat 
            { parser.Tree.reduce(3,"drive_stat_list",0);
              ArrayList<Stat> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Stat> list = (ArrayList<Stat>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat st = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(st);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drive_stat_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // drive_stat_list ::= drive_stat 
            { parser.Tree.reduce(1,"drive_stat_list",0);
              ArrayList<Stat> RESULT =null;
		int stleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Stat st = (Stat)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Stat> list = new ArrayList();
    list.add(st);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drive_stat_list",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // drive_stat ::= STR INT M 
            { parser.Tree.reduce(3,"drive_stat",0);
              Stat RESULT =null;
		int secleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int secright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String sec = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int distleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int distright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer dist = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Stat st = new Stat(sec, dist);
    RESULT = st;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("drive_stat",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
