
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\006\000\002\007" +
    "\003\000\002\007\002\000\002\006\005\000\002\006\004" +
    "\000\002\005\010\000\002\015\005\000\002\015\003\000" +
    "\002\014\006\000\002\004\003\000\002\004\002\000\002" +
    "\003\007\000\002\003\006\000\002\013\005\000\002\013" +
    "\003\000\002\012\007" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\016\004\001\002\000\006\016\ufffe\017" +
    "\012\001\002\000\004\002\006\001\002\000\004\002\001" +
    "\001\002\000\006\016\uffff\017\012\001\002\000\004\016" +
    "\030\001\002\000\004\017\012\001\002\000\004\007\013" +
    "\001\002\000\004\010\014\001\002\000\004\017\015\001" +
    "\002\000\004\007\024\001\002\000\006\005\ufff9\011\ufff9" +
    "\001\002\000\006\005\020\011\021\001\002\000\004\017" +
    "\015\001\002\000\004\004\022\001\002\000\006\016\ufffb" +
    "\017\ufffb\001\002\000\006\005\ufffa\011\ufffa\001\002\000" +
    "\004\020\025\001\002\000\004\014\026\001\002\000\006" +
    "\005\ufff8\011\ufff8\001\002\000\006\016\ufffc\017\ufffc\001" +
    "\002\000\006\002\ufff6\021\033\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufff7\001\002\000\004\017\034\001" +
    "\002\000\006\007\035\017\040\001\002\000\004\017\040" +
    "\001\002\000\006\004\046\005\045\001\002\000\006\004" +
    "\ufff2\005\ufff2\001\002\000\004\006\041\001\002\000\004" +
    "\017\042\001\002\000\004\020\043\001\002\000\004\015" +
    "\044\001\002\000\006\004\ufff1\005\ufff1\001\002\000\004" +
    "\017\040\001\002\000\004\002\ufff4\001\002\000\006\004" +
    "\ufff3\005\ufff3\001\002\000\006\004\051\005\045\001\002" +
    "\000\004\002\ufff5\001\002\000\004\017\012\001\002\000" +
    "\006\016\ufffd\017\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\051\000\004\002\004\001\001\000\010\005\010\006" +
    "\006\007\007\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\005\051\001\001\000\002\001\001\000\004\005" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\014\015\015\016\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\014\022\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\031\004\030\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\036\013\035" +
    "\001\001\000\006\012\036\013\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\046\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\052\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    map = new HashMap<String, ArrayList<Food>>();

 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }



    HashMap<String, ArrayList<Food>> map = new HashMap();
    
    public Double computePrice(Ingredient ing, Integer num) {
        ArrayList<Food> list = map.get(ing.getCat());
        Double price = 0.0;
        for(Food fo: list) {
            if(ing.getName().equals(fo.getName())){
                price = fo.getPrice() * ing.getQuan() * num;
            }
        }
        return price;
    }
    
    public class Food {
        private String name;
        private Double price;

        Food(String name, Double price) {
            this.name = name;
            this.price = price;
        }

        public String getName() {
            return this.name;
        }

        public Double getPrice() {
            return this.price;
        }
    }

    public class Ingredient {
        private String cat;
        private String name;
        private Double quan;

        Ingredient(String cat, String name, Double quan) {
            this.cat = cat;
            this.name = name;
            this.quan = quan;
        }

        public String getCat() {
            return this.cat;
        }

        public String getName() {
            return this.name;
        }

        public Double getQuan() {
            return this.quan;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= SEP food_section SEP recipe_section 
            { parser.Tree.reduce(4,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // food_section ::= food_category_list 
            { parser.Tree.reduce(1,"food_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // food_section ::= 
            { parser.Tree.reduce(0,"food_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_section",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // food_category_list ::= food_category_list food_category food_category 
            { parser.Tree.reduce(3,"food_category_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_category_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // food_category_list ::= food_category food_category 
            { parser.Tree.reduce(2,"food_category_list",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_category_list",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // food_category ::= STR DP QA food_list QC PV 
            { parser.Tree.reduce(6,"food_category",0);
              Object RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Food> list = (ArrayList<Food>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    parser.map.put(cat, list);

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_category",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // food_list ::= food_list V food 
            { parser.Tree.reduce(3,"food_list",0);
              ArrayList<Food> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Food> list = (ArrayList<Food>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int foleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int foright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Food fo = (Food)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(fo);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // food_list ::= food 
            { parser.Tree.reduce(1,"food_list",0);
              ArrayList<Food> RESULT =null;
		int foleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int foright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Food fo = (Food)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Food> list = new ArrayList();
    list.add(fo);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food_list",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // food ::= STR DP DOUBLE EUROKG 
            { parser.Tree.reduce(4,"food",0);
              Food RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int priceleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int priceright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double price = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Food food = new Food(name, price);
    RESULT = food;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("food",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // recipe_section ::= recipe_list 
            { parser.Tree.reduce(1,"recipe_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipe_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // recipe_section ::= 
            { parser.Tree.reduce(0,"recipe_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipe_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // recipe_list ::= INT STR DP ingredient_list PV 
            { parser.Tree.reduce(5,"recipe_list",1);
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Ingredient> list = (ArrayList<Ingredient>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(name);
    Double tot = 0.0;
    for(Ingredient ing: list) {
        Double price = computePrice(ing, num);
        tot += price;
        System.out.println(ing.getName()+" "+price+" EURO");
    }
    System.out.println("TOT: "+tot+" EURO");


              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipe_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // recipe_list ::= INT STR ingredient_list PV 
            { parser.Tree.reduce(4,"recipe_list",1);
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer num = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Ingredient> list = (ArrayList<Ingredient>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    System.out.println(name);
    Double tot = 0.0;
    for(Ingredient ing: list) {
        Double price = computePrice(ing, num);
        tot += price;
        System.out.println(ing.getName()+" "+price+" EURO");
    }
    System.out.println("TOT: "+tot+" EURO");


              CUP$parser$result = parser.getSymbolFactory().newSymbol("recipe_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // ingredient_list ::= ingredient_list V ingredient 
            { parser.Tree.reduce(3,"ingredient_list",0);
              ArrayList<Ingredient> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Ingredient> list = (ArrayList<Ingredient>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ingredient ing = (Ingredient)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(ing);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingredient_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // ingredient_list ::= ingredient 
            { parser.Tree.reduce(1,"ingredient_list",0);
              ArrayList<Ingredient> RESULT =null;
		int ingleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ingright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Ingredient ing = (Ingredient)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Ingredient> list = new ArrayList();
    list.add(ing);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingredient_list",9, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ingredient ::= STR P STR DOUBLE KG 
            { parser.Tree.reduce(5,"ingredient",0);
              Ingredient RESULT =null;
		int catleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int catright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String cat = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int nameleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int quanleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int quanright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double quan = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Ingredient ing = new Ingredient(cat, name, quan);
    RESULT = ing;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("ingredient",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
