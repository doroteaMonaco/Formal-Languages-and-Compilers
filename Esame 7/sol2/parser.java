
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140226
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.Map;
import java.util.HashMap;
import java.util.ArrayList;
import java_cup.runtime.XMLElement;

/** CUP v0.11b beta 20140226 generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\050\000\002\002\004\000\002\002\005\000\002\007" +
    "\004\000\002\007\004\000\002\007\005\000\002\007\007" +
    "\000\002\007\006\000\002\007\011\000\002\007\010\000" +
    "\002\007\002\000\002\006\003\000\002\006\002\000\002" +
    "\005\004\000\002\005\003\000\002\004\004\000\002\023" +
    "\007\000\002\023\007\000\002\023\005\000\002\023\005" +
    "\000\002\023\002\000\002\013\005\000\002\012\005\000" +
    "\002\003\005\000\002\003\006\000\002\022\004\000\002" +
    "\022\004\000\002\021\005\000\002\020\010\000\002\017" +
    "\005\000\002\017\003\000\002\016\006\000\002\015\003" +
    "\000\002\015\003\000\002\011\005\000\002\011\005\000" +
    "\002\011\003\000\002\011\003\000\002\010\006\000\002" +
    "\014\005\000\002\014\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\010\011\005\012\004\031\ufff8\001\002\000" +
    "\006\011\005\012\ufff6\001\002\000\010\011\ufff4\012\ufff4" +
    "\031\ufff4\001\002\000\006\011\110\012\107\001\002\000" +
    "\004\002\106\001\002\000\004\031\011\001\002\000\010" +
    "\013\013\023\uffee\024\uffee\001\002\000\006\023\053\024" +
    "\057\001\002\000\006\014\020\017\016\001\002\000\004" +
    "\002\000\001\002\000\006\004\047\006\046\001\002\000" +
    "\006\022\023\032\022\001\002\000\006\004\041\006\040" +
    "\001\002\000\006\022\023\032\022\001\002\000\024\004" +
    "\uffde\005\uffde\010\uffde\015\uffde\016\uffde\020\uffde\021\uffde" +
    "\027\uffde\030\uffde\001\002\000\024\004\uffdd\005\uffdd\010" +
    "\uffdd\015\uffdd\016\uffdd\020\uffdd\021\uffdd\027\uffdd\030\uffdd" +
    "\001\002\000\004\007\032\001\002\000\010\015\027\020" +
    "\026\021\025\001\002\000\006\022\023\032\022\001\002" +
    "\000\006\022\023\032\022\001\002\000\006\004\uffed\006" +
    "\uffed\001\002\000\024\004\uffdf\005\uffdf\010\uffdf\015\uffdf" +
    "\016\uffdf\020\uffdf\021\025\027\uffdf\030\uffdf\001\002\000" +
    "\024\004\uffe0\005\uffe0\010\uffe0\015\uffe0\016\uffe0\020\uffe0" +
    "\021\uffe0\027\uffe0\030\uffe0\001\002\000\006\022\023\032" +
    "\022\001\002\000\012\005\uffda\010\uffda\020\026\021\025" +
    "\001\002\000\006\005\036\010\035\001\002\000\024\004" +
    "\uffdc\005\uffdc\010\uffdc\015\uffdc\016\uffdc\020\uffdc\021\uffdc" +
    "\027\uffdc\030\uffdc\001\002\000\006\022\023\032\022\001" +
    "\002\000\012\005\uffdb\010\uffdb\020\026\021\025\001\002" +
    "\000\004\014\020\001\002\000\006\023\uffef\024\uffef\001" +
    "\002\000\004\004\043\001\002\000\006\023\ufff1\024\ufff1" +
    "\001\002\000\010\016\045\020\026\021\025\001\002\000" +
    "\006\004\uffec\006\uffec\001\002\000\004\017\016\001\002" +
    "\000\006\023\ufff0\024\ufff0\001\002\000\004\004\051\001" +
    "\002\000\006\023\ufff2\024\ufff2\001\002\000\004\004\105" +
    "\001\002\000\006\014\062\017\061\001\002\000\010\002" +
    "\ufff3\023\053\024\057\001\002\000\004\004\100\001\002" +
    "\000\006\023\053\024\057\001\002\000\006\014\062\017" +
    "\061\001\002\000\004\025\063\001\002\000\010\022\uffe1" +
    "\025\uffe1\032\uffe1\001\002\000\010\022\uffe2\025\uffe2\032" +
    "\uffe2\001\002\000\006\022\023\032\022\001\002\000\004" +
    "\004\uffe4\001\002\000\004\004\072\001\002\000\010\020" +
    "\026\021\025\030\067\001\002\000\006\022\023\032\022" +
    "\001\002\000\010\020\026\021\025\027\071\001\002\000" +
    "\004\004\uffe3\001\002\000\010\022\023\026\074\032\022" +
    "\001\002\000\004\004\uffe5\001\002\000\004\004\uffe6\001" +
    "\002\000\006\023\053\024\057\001\002\000\006\023\053" +
    "\024\057\001\002\000\010\002\uffea\023\uffea\024\uffea\001" +
    "\002\000\010\002\uffe9\023\uffe9\024\uffe9\001\002\000\006" +
    "\023\053\024\057\001\002\000\010\002\uffeb\023\uffeb\024" +
    "\uffeb\001\002\000\006\022\023\032\022\001\002\000\010" +
    "\004\uffe7\020\026\021\025\001\002\000\010\002\uffe8\023" +
    "\uffe8\024\uffe8\001\002\000\004\002\001\001\002\000\010" +
    "\011\005\012\ufff6\031\ufffe\001\002\000\010\011\ufff5\012" +
    "\ufff5\031\ufff5\001\002\000\010\011\110\012\ufff7\031\ufffd" +
    "\001\002\000\004\012\113\001\002\000\010\011\005\012" +
    "\ufff6\031\ufff6\001\002\000\010\011\110\012\ufff7\031\ufff7" +
    "\001\002\000\006\012\116\031\ufffc\001\002\000\006\011" +
    "\005\031\ufff6\001\002\000\004\031\ufffa\001\002\000\010" +
    "\011\110\012\ufff7\031\uffff\001\002\000\004\012\122\001" +
    "\002\000\006\011\005\012\ufff6\001\002\000\010\011\110" +
    "\012\ufff7\031\ufffb\001\002\000\004\012\125\001\002\000" +
    "\004\011\005\001\002\000\006\011\110\031\ufff9\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\124\000\010\002\006\005\005\007\007\001\001\000" +
    "\006\005\117\006\120\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\004" +
    "\013\023\011\001\001\000\012\003\053\020\051\021\054" +
    "\022\055\001\001\000\006\012\016\013\014\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\010\020\011\043" +
    "\001\001\000\002\001\001\000\006\010\020\011\023\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\020\011\030\001\001\000" +
    "\006\010\020\011\027\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\010\020\011\032\014" +
    "\033\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\020\011\036\001\001\000\002\001" +
    "\001\000\004\013\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\102\001\001\000\010\020\051\021\054\022\100\001\001" +
    "\000\002\001\001\000\010\020\051\021\054\022\074\001" +
    "\001\000\004\015\057\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\010\020\011\065\016" +
    "\063\017\064\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\010\020\011\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\010\020\011\065" +
    "\016\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\020\051\021\054\022\075\001\001\000\010\020\051" +
    "\021\054\022\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\020\051\021\054\022\101\001\001\000\002" +
    "\001\001\000\006\010\020\011\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\005\110" +
    "\006\111\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\005\113\006\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\005\113\006\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\005\122\006\123\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\125\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {


 Tree = new DisegnaAlbero();   }public static DisegnaAlbero Tree;

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 Symbol s=_scanner.next_token(); Tree.push(s.toString(), 0); return s;   }


    public class Cons {
        private Double dist;
        private Double uni;

        Cons(Double dist, Double uni) {
            this.dist = dist;
            this.uni = uni;
        }

        public Double getDist() {
            return this.dist;
        }

        public Double getUni() {
            return this.uni;
        }
    }

    public class Comm {
        private Integer cod;
        private String type;
        private ArrayList<Cons> list;
        private Double val;

        Comm(Integer cod, String type, ArrayList<Cons> list, Double val) {
            this.cod = cod;
            this.type = type;
            this.list = list;
            this.val = val;
        }

        public Integer getCode() {
            return this.cod;
        }

        public String getType() {
            return this.type;
        }

        public ArrayList<Cons> getList() {
            return this.list;
        }

        public Double getVal() {
            return this.val;
        }
    }

    public void report_error(String message, Object info) {
        System.err.print("ERROR: Syntax error");
        if (info instanceof Symbol)
            if (((Symbol)info).left != -1){
                int line = (((Symbol)info).left)+1;
                int column = (((Symbol)info).right)+1;
                System.err.print(" (linea "+line+", colonna "+column+"): ");
            } else System.err.print(": ");
        else System.err.print(": ");
    }
    public void syntax_error(Symbol cur_token){}

    // ritorna actual symbol (tos = top of stack) [dalla teoria]
    public Symbol getToken() {
        return ((Symbol)stack.elementAt(tos));
    }

    // ritorna il semantic value del simbolo alla posizione pos [dalla teoria]
    public Object stack(int pos) {
        return (((Symbol)stack.elementAt(tos + pos)).value);
    }

    // Return the line number of actual symbol
    public int getLine() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).left+1;
        }else return -1;
    }
    // Return the column number of actual symbol
    public int getColumn() {
        if (((Symbol)stack.elementAt(tos)).left != -1){
            return ((Symbol)stack.elementAt(tos)).right+1;
        }else return -1;
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {


    //creazione di classi se serve raggruppare

  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= prog EOF 
            { 
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= header SEP run_section 
            { parser.Tree.reduce(3,"prog",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // header ::= TOK2 tok1s 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // header ::= tok1s TOK2 
            { parser.Tree.reduce(2,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // header ::= tok1s TOK2 tok1s 
            { parser.Tree.reduce(3,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // header ::= tok1s TOK2 tok1e TOK2 tok1e 
            { parser.Tree.reduce(5,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // header ::= TOK2 tok1e TOK2 tok1s 
            { parser.Tree.reduce(4,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // header ::= tok1s TOK2 tok1e TOK2 tok1e TOK2 tok1e 
            { parser.Tree.reduce(7,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // header ::= TOK2 tok1e TOK2 tok1e TOK2 tok1s 
            { parser.Tree.reduce(6,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // header ::= 
            { parser.Tree.reduce(0,"header",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("header",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // tok1e ::= tok1s 
            { parser.Tree.reduce(1,"tok1e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // tok1e ::= 
            { parser.Tree.reduce(0,"tok1e",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1e",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // tok1s ::= tok1s TOK1 
            { parser.Tree.reduce(2,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // tok1s ::= TOK1 
            { parser.Tree.reduce(1,"tok1s",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("tok1s",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // run_section ::= st command_list 
            { parser.Tree.reduce(2,"run_section",0);
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("run_section",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // st ::= ST battery_ass MINUS fuel_ass PV 
            { parser.Tree.reduce(5,"st",0);
              Double[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] list = new Double[2];
    list[0] = b;
    list[1] = f;
    System.out.println("battery="+list[0]+" fuel="+list[1]);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // st ::= ST fuel_ass MINUS battery_ass PV 
            { parser.Tree.reduce(5,"st",0);
              Double[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] list = new Double[2];
    list[0] = b;
    list[1] = f;
    System.out.println("battery="+list[0]+" fuel="+list[1]);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // st ::= ST battery_ass PV 
            { parser.Tree.reduce(3,"st",0);
              Double[] RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double b = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] list = new Double[2];
    list[0] = b;
    list[1] = 100.0;
    System.out.println("battery="+list[0]+" fuel="+list[1]);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // st ::= ST fuel_ass PV 
            { parser.Tree.reduce(3,"st",0);
              Double[] RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double f = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double[] list = new Double[2];
    list[0] = 100.0;
    list[1] = f;
    System.out.println("battery="+list[0]+" fuel="+list[1]);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // st ::= 
            { parser.Tree.reduce(0,"st",0);
              Double[] RESULT =null;
		
    Double[] list = new Double[2];
    list[0] = 100.0;
    list[1] = 100.0;
    System.out.println("battery="+list[0]+" fuel="+list[1]);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("st",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // battery_ass ::= BATTERY exp KWH 
            { parser.Tree.reduce(3,"battery_ass",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("battery_ass",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // fuel_ass ::= FUEL exp LITERS 
            { parser.Tree.reduce(3,"fuel_ass",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("fuel_ass",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // command_list ::= command_list command command 
            { parser.Tree.reduce(3,"command_list",1);
              Object RESULT =null;
		int c6left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c6right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comm c6 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c5left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c5right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comm c5 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Comm> list = new ArrayList();
    list.add(c5);
    list.add(c6);

    Double[] st_val = (Double[]) parser.stack(-3);
    for(Comm cmd: list) {
        if(cmd.getType().equals("M")){
            if(cmd.getCode().equals(0)){
                st_val[0] += cmd.getVal();
            }
            else{
                st_val[1] += cmd.getVal();
            }
            System.out.println("battery="+st_val[0]+" fuel="+st_val[1]);
        }
        else {
            if(cmd.getCode().equals(0)){
                for(Cons cn: cmd.getList()){
                    Double res = cn.getDist() * cn.getUni();
                    st_val[0] -= res;
                    System.out.println("battery="+st_val[0]+" fuel="+st_val[1]);
                }
            }
            else{
                for(Cons cn: cmd.getList()){
                    Double res = cn.getDist() * cn.getUni();
                    st_val[1] -= res;
                    System.out.println("battery="+st_val[0]+" fuel="+st_val[1]);
                }
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // command_list ::= command command command command 
            { parser.Tree.reduce(4,"command_list",1);
              Object RESULT =null;
		int c4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int c4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Comm c4 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int c3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int c3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Comm c3 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int c2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int c2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comm c2 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int c1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int c1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Comm c1 = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Comm> list = new ArrayList();
    list.add(c1);
    list.add(c2);
    list.add(c3);
    list.add(c4);

    Double[] st_val = (Double[]) parser.stack(-4);
    for(Comm cmd: list) {
        if(cmd.getType().equals("M")){
            if(cmd.getCode().equals(0)){
                st_val[0] += cmd.getVal();
            }
            else{
                st_val[1] -= cmd.getVal();
            }
            System.out.println("battery="+st_val[0]+" fuel="+st_val[1]);
        }
        else {
            if(cmd.getCode().equals(0)){
                for(Cons cn: cmd.getList()){
                    Double res = cn.getDist() * cn.getUni();
                    st_val[0] -= res;
                    System.out.println("battery="+st_val[0]+" fuel="+st_val[1]);

                }
            }
            else{
                for(Cons cn: cmd.getList()){
                    Double res = cn.getDist() * cn.getUni();
                    st_val[1] -= res;
                    System.out.println("battery="+st_val[0]+" fuel="+st_val[1]);
                }
            }
        }
    }

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command_list",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // command ::= mod PV 
            { parser.Tree.reduce(2,"command",0);
              Comm RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comm cmd = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = cmd;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // command ::= use PV 
            { parser.Tree.reduce(2,"command",0);
              Comm RESULT =null;
		int cmdleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cmdright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Comm cmd = (Comm)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    RESULT = cmd;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("command",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // mod ::= MOD type exp 
            { parser.Tree.reduce(3,"mod",0);
              Comm RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer cod = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Comm cmd = new Comm(cod, "M", null, val);
    RESULT = cmd;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("mod",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // use ::= USE type DO cons_list PV DONE 
            { parser.Tree.reduce(6,"use",0);
              Comm RESULT =null;
		int codleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int codright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Integer cod = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Cons> list = (ArrayList<Cons>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
    Comm cmd = new Comm(cod, "U", list, 0.0);
    RESULT = cmd;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("use",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // cons_list ::= cons_list PV cons 
            { parser.Tree.reduce(3,"cons_list",0);
              ArrayList<Cons> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Cons> list = (ArrayList<Cons>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cons cn = (Cons)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(cn);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // cons_list ::= cons 
            { parser.Tree.reduce(1,"cons_list",0);
              ArrayList<Cons> RESULT =null;
		int cnleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cnright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Cons cn = (Cons)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Cons> list = new ArrayList();
    list.add(cn);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons_list",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // cons ::= exp KM exp UNITSKM 
            { parser.Tree.reduce(4,"cons",0);
              Cons RESULT =null;
		int distleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int distright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Double dist = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int unileft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int uniright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double uni = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Cons cn = new Cons(dist, uni);
    RESULT = cn;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("cons",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // type ::= BATTERY 
            { parser.Tree.reduce(1,"type",0);
              Integer RESULT =null;
		
    RESULT = 0;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // type ::= FUEL 
            { parser.Tree.reduce(1,"type",0);
              Integer RESULT =null;
		
    RESULT = 1;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // exp ::= exp STAR exp 
            { parser.Tree.reduce(3,"exp",0);
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Double res = e1*e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // exp ::= exp PLUS exp 
            { parser.Tree.reduce(3,"exp",0);
              Double RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double e1 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double e2 = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    Double res = e1+e2;
    RESULT = res;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // exp ::= max 
            { parser.Tree.reduce(1,"exp",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // exp ::= DOUBLE 
            { parser.Tree.reduce(1,"exp",0);
              Double RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    RESULT = val;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // max ::= MAX TA exp_list TC 
            { parser.Tree.reduce(4,"max",0);
              Double RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    Double max = 0.0;
    for(Double val: list) {
        if(val > max){
            max = val;
        }
    }
    RESULT = max;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("max",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // exp_list ::= exp_list V exp 
            { parser.Tree.reduce(3,"exp_list",0);
              ArrayList<Double> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<Double> list = (ArrayList<Double>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    list.add(val);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // exp_list ::= exp 
            { parser.Tree.reduce(1,"exp_list",0);
              ArrayList<Double> RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Double val = (Double)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
    ArrayList<Double> list = new ArrayList();
    list.add(val);
    RESULT = list;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("exp_list",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
